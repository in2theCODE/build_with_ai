version: '3.8'

services:
  # Database for Spec Registry
  spec-registry-db:
    image: postgres:17-bookworm
    container_name: spec-registry-db
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres  # Simple password for development
    volumes:
      - spec_registry_db_data:/var/lib/postgresql/data
      - ../certs/spec-registry-db/certificate.crt:/var/lib/postgresql/server.crt:ro
      - ../certs/spec-registry-db/private.key:/var/lib/postgresql/server.key:ro
    ports:
      - "127.0.0.1:5435:5432"
    networks:
      - spec-template-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Database for Project Manager
  project-manager-db:
    image: postgres:17-bookworm
    container_name: project-manager-db
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres  # Simple password for development
    volumes:
      - project_manager_db_data:/var/lib/postgresql/data
      - ../certs/project-manager-db/certificate.crt:/var/lib/postgresql/server.crt:ro
      - ../certs/project-manager-db/private.key:/var/lib/postgresql/server.key:ro # You'll need this
    ports:
      - "127.0.0.1:5436:5432"
    networks:
      - spec-template-network
    healthcheck:
      test: [ "CMD-SHELL", "-U postgres pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Database for Workflow Engine
  workflow-engine-db:
    image: postgres:17-bookworm
    container_name: workflow-engine-db
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres  # Simple password for development
    volumes:
      - workflow_engine_db_data:/var/lib/postgresql/data
      - ../certs/workflow-engine-db/certificate.crt:/var/lib/postgresql/server.crt:ro
      - ../certs/workflow-engine-db/private.key:/var/lib/postgresql/server.key:ro
    ports:
      - "127.0.0.1:5437:5432"
    networks:
      - spec-template-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Database for Meta Learner
  meta-learner-db:
    image: postgres:17-bookworm
    container_name: meta-learner-db
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres  # Simple password for development
    volumes:
      - meta_learner_db_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5438:5432"
    networks:
      - spec-template-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Vector database for Evolution Analyzer
  evolution-analyzer-vector-db:
    image: qdrant/qdrant:v1.9.6
    container_name: evolution-analyzer-qdrant
    security_opt:
      - no-new-privileges:true
    volumes:
      - evolution_analyzer_vector_db_data:/qdrant/storage
    ports:
      - "127.0.0.1:6339:6333"
    networks:
      - spec-template-network
    healthcheck:
      test: [ "CMD", http://localhost:6333/health" ]
      interval: 10s
      timeout: 5s
      retries: 3

  # MongoDB for Event Aggregator
  event-aggregator-mongodb:
    image: mongo:6.0
    container_name: event-aggregator-mongodb
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=mongodb   # Simple password for development
    volumes:
      - event_aggregator_mongodb_data:/data/db
    ports:
      - "127.0.0.1:27018:27017"
    networks:
      - spec-template-network
    healthcheck:
      test: [ "CMD", "mongo", "--username", "admin" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  event-aggregator:
    build:
      context: ../src/services/aggregators
    container_name: event-aggregator
    restart: unless-stopped
    ports:
      - "127.0.0.1:8080:8080"
    environment:
      - EVENT_SYSTEM_DATABASE_TYPE=mongodb
      - EVENT_AGGREGATOR_MONGODB=mongodb://admin:${MONGODB_PASSWORD}@mongodb:27017/event_system?authSource=admin
      - EVENT_SYSTEM_DATABASE_NAME=event_system
      - EVENT_SYSTEM_EVENTS_PROVIDER=pulsar
      - EVENT_SYSTEM_EVENTS_SERVICE_URL=pulsar://pulsar:6650
      - EVENT_SYSTEM_VECTOR_DB_ENABLED=true
      - EVENT_SYSTEM_VECTOR_DB_TYPE=qdrant
      - EVOLUTION_ANALYZER_VECTOR_DB=vector-db
      - DB_CONNECTION_STRING=postgresql://database:5432/specdb
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    depends_on:
      - event-aggregator-mongodb
      - evolution-analyzer-vector-db


    networks:
      - spec-template-network
      - pulsar-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    secrets:
      - mongodb_root_password
      - db_user
      - db_password

volumes:
  spec_registry_db_data:
  project_manager_db_data:
  workflow_engine_db_data:
  meta_learner_db_data:
  evolution_analyzer_vector_db_data:
  event_aggregator_mongodb_data:

networks:
  api-network: # If services in this file need it
    name: api-network # Use a consistent name if it's shared across compose files
    driver: bridge
  pulsar-network: # If services in this file need it
    name: pulsar-network
    driver: bridge
  spec-template-network:
    name: spec-template-network # This is the network your DB services are trying to use
    driver: bridge
  monitoring: # If services in this file need it
    name: monitoring
    driver: bridge

secrets:
  clerk_public_key:
    file: /Users/justinrussell/.docker-secrets-codegen/next_public_clerk_publishable_key
  clerk_secret_key:
    file: /Users/justinrussell/.docker-secrets-codegen/clerk_secret_key
  db_user:
    file: /Users/justinrussell/.docker-secrets-codegen/db_user
  db_password:
    file: /Users/justinrussell/.docker-secrets-codegen/db_password
  openai_api_key:
    file: /Users/justinrussell/.docker-secrets-codegen/openai_api_key
  anthropic_api_key:
    file: /Users/justinrussell/.docker-secrets-codegen/anthropic_api_key
  pinecone_api_key:
    file: /Users/justinrussell/.docker-secrets-codegen/pinecone_api_key
  mongodb_root_password:
    file: /Users/justinrussell/.docker-secrets-codegen/mongodb_root_password
  pulsar_secret_key:
    file: /Users/justinrussell/.docker-secrets-codegen/pulsar_secret_key

