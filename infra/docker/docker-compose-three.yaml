version: '3.8'

services:
  # API Gateway (Traefik)
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yaml:/etc/traefik/traefik.yaml:ro
      - ./traefik/certs:/etc/traefik/certs:ro
      - ./traefik/dynamic:/etc/traefik/dynamic:ro
      - api-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8080/ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  # Authentication Sidecar
  auth-sidecar:
    build:
      context: ./services/api_gateway/auth-sidecar
    container_name: auth-sidecar
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - CLERK_JWT_PUBLIC_KEY=${CLERK_JWT_PUBLIC_KEY}
      - ALLOWED_ORIGINS=https://yourdomain.com,https://app.yourdomain.com
    networks:
      - api-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  # Neural Interpreter
  neural-interpreter:
    build:
      context: ./services/api_gateway/neural_interpretor
    container_name: neural-interpreter
    restart: unless-stopped
    volumes:
      - ./config:/app/config
      - ./certs:/opt/certs
    environment:
      - CONFIG_PATH=/app/config/config.yaml
      - LOG_LEVEL=INFO
    networks:
      - pulsar-network
    healthcheck:
      test: ["CMD", "test", "-e", "/tmp/agent-health.txt"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      - pulsar
      - auth-sidecar

  # Pulsar - Event Bus
  pulsar:
    image: apachepulsar/pulsar:3.0.0
    container_name: pulsar
    restart: unless-stopped
    ports:
      - "6650:6650"  # Pulsar binary protocol port
      - "8080:8080"  # Pulsar web service port
    volumes:
      - pulsar-data:/pulsar/data
      - ./certs:/pulsar/certs
      - ./infra/configs/pulsar:/pulsar/conf
      - ./bin/pulsar/setup.py:/pulsar/setup.py
    command: >
      /bin/bash -c "bin/apply-config-from-env.py conf/standalone.conf && bin/pulsar standalone -nss -nfw"
    environment:
      - PULSAR_MEM=-Xms1g -Xmx1g
      - webServicePortTls=8443
      - tlsEnabled=true
      - tlsCertificateFilePath=/pulsar/certs/pulsar.crt
      - tlsKeyFilePath=/pulsar/certs/pulsar.key
      - tlsTrustCertsFilePath=/pulsar/certs/ca.crt
      - authenticationEnabled=true
      - authenticationProviders=org.apache.pulsar.broker.authentication.AuthenticationProviderTls
      - webSocketServiceEnabled=true
    networks:
      - pulsar-network
    healthcheck:
      test: ["CMD", "bin/pulsar-admin", "brokers", "healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Template Service - Manages spec templates
  template-service:
    build:
      context: ./services/spec_registry
    environment:
      - STORAGE_URL=http://storage-service:3002
      - TEMPLATE_ROOT=/templates
      - EVENT_BUS_URL=pulsar://pulsar:6650
    volumes:
      - ./services/spec_registry_lib/spec-templates:/templates
    networks:
      - spec-template-network
      - pulsar-network
    depends_on:
      - pulsar
      - storage-service

  # Project Service - Manages projects and spec sheets
  project-service:
    build:
      context: ./services/project_manager
    environment:
      - TEMPLATE_SERVICE_URL=http://template-service:3001
      - STORAGE_URL=http://storage-service:3002
      - EVENT_BUS_URL=pulsar://pulsar:6650
    depends_on:
      - template-service
      - storage-service
      - pulsar
    networks:
      - spec-template-network
      - pulsar-network

  # Spec Generator - AI-assisted spec completion
  spec-generator:
    build:
      context: ./services/neural_code_generator
    environment:
      - TEMPLATE_SERVICE_URL=http://template-service:3001
      - PROJECT_SERVICE_URL=http://project-service:3003
      - EVENT_BUS_URL=pulsar://pulsar:6650
    depends_on:
      - template-service
      - project-service
      - pulsar
    networks:
      - spec-template-network
      - pulsar-network

  # Storage Service - Handles persistence
  storage-service:
    build:
      context: ./services/template_discovery
    environment:
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=specdb
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - EVENT_BUS_URL=pulsar://pulsar:6650
    depends_on:
      - database
      - pulsar
    volumes:
      - storage-data:/data
    networks:
      - spec-template-network
      - pulsar-network

  # Database - PostgreSQL for storing projects and completed specs
  database:
    image: postgres:14
    environment:
      - POSTGRES_DB=specdb
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - spec-template-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Vector Database - For template similarity search
  vector-db:
    image: qdrant/qdrant:2.31.0
    ports:
      - "6333:6333"
    volumes:
      - vector-db-data:/qdrant/storage
    networks:
      - spec-template-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Workflow Engine - Orchestrates the entire flow
  workflow-engine:
    build:
      context: ./services/workflow_orchestrator
    environment:
      - PROJECT_SERVICE_URL=http://project-service:3003
      - SPEC_GENERATOR_URL=http://spec-generator:3004
      - EVENT_BUS_URL=pulsar://pulsar:6650
    depends_on:
      - project-service
      - spec-generator
      - pulsar
    networks:
      - spec-template-network
      - pulsar-network

  # Evolution Analyzer - Tracks template usage and suggests improvements
  evolution-analyzer:
    build:
      context: ./services/meta_learner
    environment:
      - TEMPLATE_SERVICE_URL=http://template-service:3001
      - STORAGE_URL=http://storage-service:3002
      - VECTOR_DB_HOST=vector-db
      - VECTOR_DB_PORT=6333
      - EVENT_BUS_URL=pulsar://pulsar:6650
    depends_on:
      - template-service
      - storage-service
      - vector-db
      - pulsar
    networks:
      - spec-template-network
      - pulsar-network

  # Monitoring Setup
  prometheus:
    image: prom/prometheus:v2.35.0
    container_name: prometheus
    volumes:
      - ./services/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
      - ./services/prometheus/prometheus_rules.yaml:/etc/prometheus/prometheus_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - 9090:9090
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - pulsar

  alertmanager:
    image: prom/alertmanager:v0.24.0
    container_name: alertmanager
    volumes:
      - ./services/prometheus/alert_manager.yaml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - 9093:9093
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - prometheus

  grafana:
    image: grafana/grafana:8.5.2
    container_name: grafana
    volumes:
      - ./services/grafana/app/provisioning/datasource:/etc/grafana/provisioning/datasources
      - ./services/grafana/app/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./services/grafana/app/dashboard_definitions:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin_secure_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - 3000:3000
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - prometheus

  event-aggregator:
    build: .
    container_name: event-aggregator
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - EVENT_SYSTEM_DATABASE_TYPE=mongodb
      - EVENT_SYSTEM_DATABASE_URI=mongodb://mongodb:27017
      - EVENT_SYSTEM_DATABASE_NAME=event_system
      - EVENT_SYSTEM_EVENTS_PROVIDER=pulsar
      - EVENT_SYSTEM_EVENTS_SERVICE_URL=pulsar://pulsar:6650
      - EVENT_SYSTEM_VECTOR_DB_ENABLED=true
      - EVENT_SYSTEM_VECTOR_DB_TYPE=qdrant
      - EVENT_SYSTEM_VECTOR_DB_HOST=qdrant
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    depends_on:
      - mongodb
      - pulsar
      - qdrant
    networks:
      - spec-template-network
      - pulsar-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  node-exporter:
    image: prom/node-exporter:v1.3.1
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - 9100:9100
    restart: unless-stopped
    networks:
      - monitoring

networks:
  api-network:
    driver: bridge
  pulsar-network:
    driver: bridge
  spec-template-network:
    driver: bridge
  monitoring:
    driver: bridge

volumes:
  pulsar-data:
  prometheus_data:
  alertmanager_data:
  grafana_data:
  db-data:
  vector-db-data:
  storage-data: