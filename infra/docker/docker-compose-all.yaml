version: '3.8'

services:
  # API Gateway (Traefik)
  traefik:
    image: traefik:v2.10
    platform: linux/arm64  # Add if using Apple Silicon
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"  # Run as non-root user
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /Users/justinrussell/.traefik/traefik.yaml:/etc/traefik/traefik.yaml:ro
      - /Users/justinrussell/.traefik/certs:/etc/traefik/certs:ro  # Fixed typo in path
      - /Users/justinrussell/.traefik/dynamic:/etc/traefik/dynamic:ro
      - /Users/justinrussell/.traefik/acme:/etc/traefik/acme
    networks:
      - api-network
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:8080/ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s


  # Neo4j Vector Database
  neo4j-vector:
    image: neo4j:5.6.0-community
    platform: linux/arm64  # Add if using Apple Silicon
    container_name: neo4j-vector
    restart: unless-stopped
    user: "1000:1000"  # Run as non-root user
    security_opt:
      - no-new-privileges:true
    environment:
      - NEO4J_AUTH=neo4j/yourpassword  # Change this to a secure password
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms_memory_heap_initial__size=1G
      - NEO4J_dbms_memory_heap_max__size=2G
      # Enable vector search plugin
      - NEO4J_dbms_security_procedures_unrestricted=gds.*
      - NEO4J_dbms_security_procedures_allowlist=gds.*
      # Security settings
      - NEO4J_dbms_security_auth__enabled=true
      - NEO4J_dbms_ssl_policy_bolt_enabled=true
      - NEO4J_dbms_ssl_policy_https_enabled=true
      - NEO4J_dbms_connector_bolt_tls__level=OPTIONAL
    ports:
      - "127.0.0.1:7474:7474"  # Browser interface - localhost only
      - "127.0.0.1:7687:7687"  # Bolt protocol - localhost only
    volumes:
      - neo4j-vector-data:/data
      - neo4j-vector-logs:/logs
      - neo4j-vector-plugins:/plugins
    networks:
      - api-network
      - spec-template-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:7474/browser/" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Neural Interpreter
  neural-interpreter:
    build:
      context: ../src/api_gateway/neural_interpretor
    container_name: neural-interpreter
    restart: unless-stopped
    volumes:
      - ../src/services/api_gateway/neural_interpretor/app/config:/app/config
      - ../certs/neural_interpretor:/app/config/certs
    environment:
      - CONFIG_PATH=/app/config/config.yaml
      - LOG_LEVEL=INFO
      - NEO4J_URI=neo4j://neo4j-vector:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=6115530825
    networks:
      - spec-template-network
      - pulsar-network
    healthcheck:
      test: [ "CMD", "test", "-e", "/tmp/agent-health.txt" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Pulsar - Event Bus
  pulsar:
    image: apachepulsar/pulsar:4.0.3
    platform: linux/arm64  # Add if using Apple Silicon
    container_name: pulsar
    restart: unless-stopped
    ports:
      - "127.0.0.1:6650:6650"  # Pulsar binary protocol port
      - "127.0.0.1:8080:8080"  # Pulsar web service port
    volumes:
      - pulsar-data:/pulsar/data
      - ./certs:/pulsar/certs
      - ./infra/configs/pulsar:/pulsar/conf
      - ./bin/pulsar/setup.py:/pulsar/setup.py
    command: >
      /bin/bash -c "bin/apply-config-from-env.py conf/standalone.conf && bin/pulsar standalone -nss -nfw"
    environment:
      - PULSAR_MEM=-Xms1g -Xmx1g
      - webServicePortTls=8443
      - tlsEnabled=true
      - tlsCertificateFilePath=/pulsar/certs/pulsar.crt
      - tlsKeyFilePath=/pulsar/certs/pulsar.key
      - tlsTrustCertsFilePath=/pulsar/certs/ca.crt
      - authenticationEnabled=true
      - authenticationProviders=org.apache.pulsar.broker.authentication.AuthenticationProviderTls
      - webSocketServiceEnabled=true
    networks:
      - spec-template-network
      - pulsar-network
    healthcheck:
      test: [ "CMD", "bin/pulsar-admin", "brokers", "healthcheck" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Vector Database - For template similarity search
  vector-db:
    image: qdrant/qdrant:v1.9.6
    platform: linux/arm64  # Add if using Apple Silicon
    container_name: qdrant
    ports:
      - "127.0.0.1:6333:6333"
    volumes:
      - vector-db-data:/qdrant/storage
    networks:
      - spec-template-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:6333/health" ]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL Database
  database:
    image: postgres:15
    platform: linux/arm64  # Add if using Apple Silicon
    container_name: postgres-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER_FILE=/run/secrets/db_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_DB=specdb
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - spec-template-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    secrets:
      - db_user
      - db_password

  # MongoDB for Event Aggregator
  mongodb:
    image: mongo:6.0
    platform: linux/arm64  # Add if using Apple Silicon
    container_name: mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD_FILE=/run/secrets/mongodb_root_password
    volumes:
      - mongodb_data:/data/db
    ports:
      - "127.0.0.1:27017:27017"  # Only accessible from localhost
    networks:
      - spec-template-network
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    secrets:
      - mongodb_root_password

  # Project Service - Manages projects and spec sheets
  project_manager:
    build:
      context: ../src/services/project_manager
    container_name: project-manager
    restart: unless-stopped
    environment:
      - SPEC_REGISTRY_URL=http://spec-registry:8000
      - EVENT_BUS_URL=pulsar://pulsar:6650
      - EVENT_AGGREGATOR_URL=http://event-aggregator:8080
    networks:
      - spec-template-network
      - pulsar-network

  # Spec Registry Service
  spec-registry:
    build:
      context: ../src/services/spec_registry
      dockerfile: Dockerfile
    container_name: spec-registry
    restart: unless-stopped
    environment:
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=INFO
      - PULSAR_SERVICE_URL=pulsar://pulsar:6650
      - ENABLE_EVENTS=true
      - BASE_DIR=/app/storage
      - DB_CONNECTION_STRING=postgresql://database:5432/specdb
      - DB_SCHEMA=public
      - EVENT_AGGREGATOR_URL=http://event-aggregator:8080
    volumes:
      - spec_registry_data:/app/storage
    networks:
      - spec-template-network
      - pulsar-network
    healthcheck:
      test: [ "CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    secrets:
      - pulsar_secret_key
      - db_user
      - db_password


  speculative-accelerator:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: speculative-accelerator
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "8001:8001"
    volumes:
      - ./config.yaml:/app/config.yaml
      - ./cache:/app/cache
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [ gpu ]
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: [ "--config", "config.yaml" ]










  grafana:
    image: grafana/grafana:10.0.3
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus


  # Workflow Engine - Orchestrates the entire flow
  workflow-engine:
    build:
      context: ../src/services/workflow_orchestrator
    container_name: workflow-engine
    restart: unless-stopped
    environment:
      - PROJECT_SERVICE_URL=http://project_manager:8000
      - SPEC_REGISTRY_URL=http://spec-registry:8000
      - EVENT_BUS_URL=pulsar://pulsar:6650
      - EVENT_AGGREGATOR_URL=http://event-aggregator:8080
    networks:
      - spec-template-network
      - pulsar-network

  # Evolution Analyzer - Tracks template usage and suggests improvements
  evolution-analyzer:
    build:
      context: ../src/services/meta_learner
    container_name: evolution-analyzer
    restart: unless-stopped
    environment:
      - SPEC_REGISTRY_URL=http://spec-registry:8000
      - VECTOR_DB_HOST=vector-db
      - VECTOR_DB_PORT=6333
      - EVENT_BUS_URL=pulsar://pulsar:6650
      - EVENT_AGGREGATOR_URL=http://event-aggregator:8080
    networks:
      - spec-template-network
      - pulsar-network























  node-exporter:
    image: prom/node-exporter:v1.3.1
    platform: linux/arm64  # Add if using Apple Silicon
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "127.0.0.1:9100:9100"
    restart: unless-stopped
    networks:
      - monitoring

secrets:
  clerk_public_key:
    file: /Users/justinrussell/.docker-secrets-codegen/next_public_clerk_publishable_key
  clerk_secret_key:
    file: /Users/justinrussell/.docker-secrets-codegen/clerk_secret_key
  db_user:
    file: /Users/justinrussell/.docker-secrets-codegen/db_user
  db_password:
    file: /Users/justinrussell/.docker-secrets-codegen/db_password
  openai_api_key:
    file: /Users/justinrussell/.docker-secrets-codegen/openai_api_key
  anthropic_api_key:
    file: /Users/justinrussell/.docker-secrets-codegen/anthropic_api_key
  pinecone_api_key:
    file: /Users/justinrussell/.docker-secrets-codegen/pinecone_api_key
  mongodb_root_password:
    file: /Users/justinrussell/.docker-secrets-codegen/mongodb_root_password
  pulsar_secret_key:
    file: /Users/justinrussell/.docker-secrets-codegen/pulsar_secret_key

networks:
  api-network:
    name: api-network
    driver: bridge
  pulsar-network:
    name: pulsar-network
    driver: bridge
  spec-template-network:
    name: spec-template-network
    driver: bridge
  monitoring:
    name: monitoring
    driver: bridge

volumes:
  pulsar-data:
  prometheus_data:
  alertmanager_data:
  grafana_data:
  db-data:
  vector-db-data:
  neo4j-vector-data:
  neo4j-vector-logs:
  neo4j-vector-plugins:
  spec_registry_data:
  mongodb_data: