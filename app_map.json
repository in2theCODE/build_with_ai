{
  "services": {
    "app_mapper.py": {
      "components": [
        "app_mapper",
        "app_mapper.Component",
        "app_mapper.EventFlow",
        "app_mapper.Template",
        "app_mapper.InfraFile",
        "app_mapper.ImprovedApplicationMapper",
        "app_mapper.main",
        "app_mapper.__init__",
        "app_mapper.get_service_name",
        "app_mapper.find_files",
        "app_mapper.find_infra_files",
        "app_mapper.analyze_file",
        "app_mapper._register_event_class",
        "app_mapper._get_module_name",
        "app_mapper._extract_docstring",
        "app_mapper._get_attribute_name",
        "app_mapper._detect_component_role",
        "app_mapper._detect_templates",
        "app_mapper._extract_template_variables",
        "app_mapper._detect_event_flows",
        "app_mapper.analyze_infra_file",
        "app_mapper.analyze_codebase",
        "app_mapper._process_relationships",
        "app_mapper._organize_by_service",
        "app_mapper.generate_application_map",
        "app_mapper.save_output",
        "app_mapper._save_markdown",
        "app_mapper._save_graphml"
      ],
      "event_flows": [
        "EventFlow"
      ],
      "templates": [],
      "infra_files": []
    },
    "project_scripts": {
      "components": [
        "project_scripts.registration",
        "project_scripts.registration.register_components",
        "project_scripts.mistral",
        "project_scripts.deepseek",
        "project_scripts.event_templates.request_template",
        "project_scripts.event_templates.request_template.main",
        "project_scripts.event_templates.event_template_generator",
        "project_scripts.event_templates.event_template_generator.EventTemplateGenerator",
        "project_scripts.event_templates.event_template_generator.main",
        "project_scripts.event_templates.event_template_generator.__init__",
        "project_scripts.event_templates.event_template_generator.shutdown",
        "project_scripts.event_templates.event_template_generator._send_response",
        "project_scripts.event_templates.event_template_generator._calculate_complexity",
        "project_scripts.event_templates.event_template_generator._save_template",
        "project_scripts.event_templates.event_template_generator.signal_handler",
        "project_scripts.tools.event_relationship_analyzer.request_analysis",
        "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer",
        "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer.EventRelationshipAnalyzer",
        "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer.main",
        "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer.__init__",
        "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer.shutdown",
        "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer._send_response",
        "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer._load_templates",
        "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer._discover_relationships",
        "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer._are_complementary",
        "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer._apply_discovered_relationships",
        "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer.signal_handler"
      ],
      "event_flows": [
        "EventTemplateGenerator",
        "EventRelationshipAnalyzer"
      ],
      "templates": [],
      "infra_files": []
    },
    "infra": {
      "components": [
        "infra.__init__",
        "infra.registration.registration",
        "infra.registration.registration.SingletonMeta",
        "infra.registration.registration.ServiceRegistry",
        "infra.registration.registration.__call__",
        "infra.registration.registration.__init__",
        "infra.registration.registration._setup_logging",
        "infra.registration.registration.get_service",
        "infra.registration.registration.get_service_with_type",
        "infra.registration.registration.get_services_by_type",
        "infra.registration.registration.get_service_health",
        "infra.registration.registration.get_service_metadata",
        "infra.registration.registration.list_services",
        "infra.registration.registration.run_async",
        "infra.registration.schema_registry",
        "infra.registration.schema_registry.SchemaRegistryClient",
        "infra.registration.schema_registry.register_pydantic_model",
        "infra.registration.schema_registry.convert_pydantic_schema_to_avro",
        "infra.registration.schema_registry.map_pydantic_type_to_avro",
        "infra.registration.schema_registry.__init__",
        "infra.registration.schema_registry.register_schema",
        "infra.registration.schema_registry.register_model_schema",
        "infra.registration.schema_registry.get_model_schema_id",
        "infra.registration.schema_registry.get_model_schema_subject",
        "infra.registration.schema_registry.validate_instance_against_schema",
        "infra.registration.schema_registry.get_schema_id",
        "infra.registration.schema_registry.get_schema",
        "infra.registration.schema_registry.validate_event_against_schema",
        "infra.registration.__init__",
        "infra.configs.__init__",
        "infra.pulsar.event_client",
        "infra.pulsar.event_client.PulsarEventClient",
        "infra.pulsar.event_client.__init__",
        "infra.pulsar.event_client.get_topic_name",
        "infra.pulsar.event_client.get_producer",
        "infra.pulsar.event_client.send_event",
        "infra.pulsar.event_client.subscribe",
        "infra.pulsar.event_client._receive_loop",
        "infra.pulsar.event_client.close"
      ],
      "event_flows": [
        "PulsarEventClient"
      ],
      "templates": [],
      "infra_files": [
        "infra/docker/Dockerfile",
        "infra/docker/docker-compose-infra-dev.yml",
        "infra/docker/docker-compose-all.yaml",
        "infra/docker/docker-compose-database-dev.yaml",
        "infra/docker/docker-compose-service-dev.yaml",
        "infra/docker/docker-compose-api-gateway-dev.yaml",
        "infra/docker/docker-compose-monitoring.yaml",
        "infra/docker/docker-compose-proxy-dev.yaml",
        "infra/kubernetes/service.yaml",
        "infra/.env",
        "infra/configs/system_config.yaml",
        "infra/configs/config.yaml"
      ]
    },
    "tests": {
      "components": [
        "tests.__init__",
        "tests.unit.__init__",
        "tests.integration.__init__",
        "tests.performance.__init__"
      ],
      "event_flows": [],
      "templates": [],
      "infra_files": []
    },
    "src": {
      "components": [
        "src.__init__",
        "src.api_gateway.__init__",
        "src.orchestration.system",
        "src.orchestration.system.SynthesisSystem",
        "src.orchestration.system.__init__",
        "src.orchestration.system._setup_logger",
        "src.orchestration.system._load_config",
        "src.orchestration.system._initialize_component",
        "src.orchestration.system.generate_from_spec",
        "src.orchestration.system._compute_cache_key",
        "src.orchestration.program_synthesizor",
        "src.orchestration.program_synthesizor.VerificationResult",
        "src.orchestration.program_synthesizor.SynthesisSystem",
        "src.orchestration.program_synthesizor.FormalSpecification",
        "src.orchestration.program_synthesizor.SynthesisResult",
        "src.orchestration.program_synthesizor.VerificationReport",
        "src.orchestration.program_synthesizor.SMTSpecificationParser",
        "src.orchestration.program_synthesizor.SketchSynthesisEngine",
        "src.orchestration.program_synthesizor.PostgresVectorKnowledgeBase",
        "src.orchestration.program_synthesizor.BaseVerifier",
        "src.orchestration.program_synthesizor.SimplePropertyTester",
        "src.orchestration.program_synthesizor.BoundedModelChecker",
        "src.orchestration.program_synthesizor.FormalVerifier",
        "src.orchestration.program_synthesizor.IncrementalSynthesizer",
        "src.orchestration.program_synthesizor.__init__",
        "src.orchestration.program_synthesizor.decompose",
        "src.orchestration.program_synthesizor.combine",
        "src.orchestration.program_synthesizor.LanguageInteroperability",
        "src.orchestration.program_synthesizor.MetaLearningSystem",
        "src.orchestration.program_synthesizor.ConstraintRelaxer",
        "src.orchestration.program_synthesizor.SymbolicExecutor",
        "src.orchestration.program_synthesizor.InterfaceContractor",
        "src.orchestration.program_synthesizor._setup_logger",
        "src.orchestration.program_synthesizor._load_config",
        "src.orchestration.program_synthesizor._initialize_component",
        "src.orchestration.program_synthesizor.generate_from_spec",
        "src.orchestration.program_synthesizor._compute_cache_key",
        "src.orchestration.program_synthesizor.parse",
        "src.orchestration.program_synthesizor.synthesize",
        "src.orchestration.program_synthesizor.get",
        "src.orchestration.program_synthesizor.store",
        "src.orchestration.program_synthesizor.find_similar",
        "src.orchestration.program_synthesizor.verify",
        "src.orchestration.program_synthesizor.generate_for_language",
        "src.orchestration.program_synthesizor.record_success",
        "src.orchestration.program_synthesizor.record_failure",
        "src.orchestration.program_synthesizor._determine_problem_type",
        "src.orchestration.program_synthesizor.relax_constraints",
        "src.orchestration.program_synthesizor._identify_violated_constraints",
        "src.orchestration.program_synthesizor._choose_constraint_to_relax",
        "src.orchestration.program_synthesizor._relax_constraint",
        "src.orchestration.program_synthesizor.generate_tests",
        "src.orchestration.program_synthesizor.execute_tests",
        "src.orchestration.program_synthesizor.verify_interfaces",
        "src.orchestration.program_synthesizor.Result",
        "src.orchestration.__init__",
        "src.orchestration.orchestration",
        "src.orchestration.orchestration.CodeGenPhase",
        "src.orchestration.orchestration.CodeGenOrchestrator",
        "src.orchestration.orchestration.__init__",
        "src.orchestration.orchestration._initialize_components",
        "src.orchestration.orchestration._register_event_handlers",
        "src.orchestration.orchestration._generate_simulated_code",
        "src.orchestration.orchestration._check_syntax",
        "src.pulsar.__init__",
        "src.services.__init__",
        "src.services.project_manager.__init__",
        "src.services.llm_volume.__init__",
        "src.services.feedback_collector.__init__",
        "src.services.aggregators.__init__",
        "src.services.spec_registry.__init__",
        "src.services.version_manager.version_manager",
        "src.services.version_manager.version_manager.VersionManager",
        "src.services.version_manager.version_manager.__init__",
        "src.services.version_manager.version_manager._initialize_storage",
        "src.services.version_manager.version_manager._load_version_index",
        "src.services.version_manager.version_manager._save_version_index",
        "src.services.version_manager.version_manager.record_new_version",
        "src.services.version_manager.version_manager.record_usage",
        "src.services.version_manager.version_manager.find_prior_versions",
        "src.services.version_manager.version_manager.get_version_history",
        "src.services.version_manager.version_manager.get_version_details",
        "src.services.version_manager.version_manager.compare_versions",
        "src.services.version_manager.version_manager._compute_fingerprint",
        "src.services.version_manager.version_manager._find_related_versions",
        "src.services.version_manager.version_manager._compute_text_similarity",
        "src.services.version_manager.version_manager._compute_text_diff",
        "src.services.version_manager.version_manager._compare_metadata",
        "src.services.version_manager.version_manager._calculate_version_similarity",
        "src.services.version_manager.version_manager._prune_old_versions",
        "src.services.version_manager.version_manager._remove_version",
        "src.services.version_manager.version_manager.get_version_statistics",
        "src.services.version_manager.__init__",
        "src.services.agents.__init__",
        "src.services.shared.__init__",
        "src.services.shared.setup",
        "src.services.component_factory.component_factory",
        "src.services.component_factory.component_factory.ComponentFactory",
        "src.services.component_factory.component_factory.__init__",
        "src.services.component_factory.component_factory._register_default_services",
        "src.services.component_factory.component_factory.register_component",
        "src.services.component_factory.component_factory.create_component",
        "src.services.component_factory.component_factory.create_from_config",
        "src.services.component_factory.__init__",
        "src.services.incremental_synthesis.incremental_synthesis",
        "src.services.incremental_synthesis.incremental_synthesis.IncrementalSynthesis",
        "src.services.incremental_synthesis.incremental_synthesis.__init__",
        "src.services.incremental_synthesis.incremental_synthesis.decompose",
        "src.services.incremental_synthesis.incremental_synthesis.combine",
        "src.services.incremental_synthesis.incremental_synthesis._decompose_by_dependencies",
        "src.services.incremental_synthesis.incremental_synthesis._extract_variable_dependencies",
        "src.services.incremental_synthesis.incremental_synthesis._extract_variables_from_constraint",
        "src.services.incremental_synthesis.incremental_synthesis._find_connected_components",
        "src.services.incremental_synthesis.incremental_synthesis._create_component_spec",
        "src.services.incremental_synthesis.incremental_synthesis._decompose_by_semantic_clustering",
        "src.services.incremental_synthesis.incremental_synthesis._group_constraints_by_type",
        "src.services.incremental_synthesis.incremental_synthesis._decompose_by_partitioning",
        "src.services.incremental_synthesis.incremental_synthesis._merge_components",
        "src.services.incremental_synthesis.incremental_synthesis._calculate_component_similarity",
        "src.services.incremental_synthesis.incremental_synthesis._merge_two_components",
        "src.services.incremental_synthesis.incremental_synthesis._combine_sequential",
        "src.services.incremental_synthesis.incremental_synthesis._combine_parallel",
        "src.services.incremental_synthesis.incremental_synthesis._combine_conditional",
        "src.services.incremental_synthesis.incremental_synthesis._get_component_body",
        "src.services.incremental_synthesis.incremental_synthesis._get_function_arguments",
        "src.services.incremental_synthesis.incremental_synthesis._compute_cache_key",
        "src.services.incremental_synthesis.incremental_synthesis.dfs",
        "src.services.incremental_synthesis.__init__",
        "src.services.language_interop.__init__",
        "src.services.language_interop.language_interop",
        "src.services.language_interop.language_interop.create_interop_bridge",
        "src.services.workflow_orchestrator.workflow_orchestrator",
        "src.services.workflow_orchestrator.workflow_orchestrator.WorkflowPhase",
        "src.services.workflow_orchestrator.workflow_orchestrator.WorkflowEventType",
        "src.services.workflow_orchestrator.workflow_orchestrator.WorkflowOrchestrator",
        "src.services.workflow_orchestrator.workflow_orchestrator.__init__",
        "src.services.workflow_orchestrator.workflow_orchestrator._load_project_states",
        "src.services.workflow_orchestrator.workflow_orchestrator._save_project_states",
        "src.services.workflow_orchestrator.__init__",
        "src.services.meta_learner.meta_learner",
        "src.services.meta_learner.meta_learner._extract_domain",
        "src.services.meta_learner.meta_learner.MetaLearner",
        "src.services.meta_learner.meta_learner.__init__",
        "src.services.meta_learner.meta_learner._load_learning_data",
        "src.services.meta_learner.meta_learner._save_learning_data",
        "src.services.meta_learner.meta_learner.suggest_strategy",
        "src.services.meta_learner.meta_learner.record_success",
        "src.services.meta_learner.meta_learner.record_failure",
        "src.services.meta_learner.meta_learner.get_strategy_performance",
        "src.services.meta_learner.meta_learner.get_domain_strategies",
        "src.services.meta_learner.meta_learner.analyze_strategy_patterns",
        "src.services.meta_learner.meta_learner._explore_strategies",
        "src.services.meta_learner.meta_learner._get_best_overall_strategy",
        "src.services.meta_learner.meta_learner._calculate_strategy_success_rate",
        "src.services.meta_learner.meta_learner._update_problem_clusters",
        "src.services.meta_learner.meta_learner._perform_clustering",
        "src.services.meta_learner.meta_learner._get_problem_cluster",
        "src.services.meta_learner.meta_learner._calculate_domain_similarity",
        "src.services.meta_learner.meta_learner._calculate_strategy_complementarity",
        "src.services.meta_learner.meta_learner._sanitize_context",
        "src.services.meta_learner.meta_learner.recommend_strategy",
        "src.services.meta_learner.meta_learner._determine_problem_type",
        "src.services.meta_learner.__init__",
        "src.services.meta_learner.main",
        "src.services.meta_learner.main.MetaLearnerService",
        "src.services.meta_learner.main.handle_signal",
        "src.services.meta_learner.main.__init__",
        "src.services.meta_learner.main._load_secret",
        "src.services.meta_learner.main.initialize",
        "src.services.neural_code_generator.__init__",
        "src.services.neural_code_generator.healthcheck",
        "src.services.neural_code_generator.healthcheck.HealthStatus",
        "src.services.neural_code_generator.healthcheck.update_stats",
        "src.services.neural_code_generator.healthcheck.start_server",
        "src.services.neural_code_generator.enhanced_neural_code_generator",
        "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_base_model",
        "src.services.neural_code_generator.enhanced_neural_code_generator.EnhancedNeuralCodeGenerator",
        "src.services.neural_code_generator.enhanced_neural_code_generator.__init__",
        "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_models",
        "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_tokenizer",
        "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_retrieval_model",
        "src.services.neural_code_generator.enhanced_neural_code_generator._connect_knowledge_base",
        "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_simple_knowledge_base",
        "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_tree_transformer",
        "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_hierarchical_model",
        "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_syntax_beam_search",
        "src.services.neural_code_generator.enhanced_neural_code_generator._python_syntax_checker",
        "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_hybrid_model",
        "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_pulsar",
        "src.services.neural_code_generator.enhanced_neural_code_generator._implement_basic_pulsar",
        "src.services.neural_code_generator.enhanced_neural_code_generator._parse_specification",
        "src.services.neural_code_generator.enhanced_neural_code_generator.generate",
        "src.services.neural_code_generator.enhanced_neural_code_generator._create_generation_prompt",
        "src.services.neural_code_generator.enhanced_neural_code_generator.SimpleKnowledgeBase",
        "src.services.neural_code_generator.enhanced_neural_code_generator.BasicPulsarConnection",
        "src.services.neural_code_generator.enhanced_neural_code_generator._load_index",
        "src.services.neural_code_generator.enhanced_neural_code_generator.search",
        "src.services.neural_code_generator.main",
        "src.services.neural_code_generator.main.signal_handler",
        "src.services.verifier.__init__",
        "src.services.verifier.statistical_verifier",
        "src.services.verifier.statistical_verifier.StatisticalVerifier",
        "src.services.verifier.statistical_verifier.DistributedVerifier",
        "src.services.verifier.statistical_verifier.SymbolicExecutor",
        "src.services.verifier.statistical_verifier.BaseVerifier",
        "src.services.verifier.statistical_verifier.SimplePropertyTester",
        "src.services.verifier.statistical_verifier.BoundedModelChecker",
        "src.services.verifier.statistical_verifier.FormalVerifier",
        "src.services.verifier.statistical_verifier.StratifiedVerifier",
        "src.services.verifier.statistical_verifier.__init__",
        "src.services.verifier.statistical_verifier.verify",
        "src.services.verifier.statistical_verifier._generate_test_inputs",
        "src.services.verifier.statistical_verifier._generate_inputs_from_constraints",
        "src.services.verifier.statistical_verifier._generate_random_inputs",
        "src.services.verifier.statistical_verifier._check_inputs",
        "src.services.verifier.statistical_verifier._create_program_interpreter",
        "src.services.verifier.statistical_verifier._check_constraints",
        "src.services.verifier.statistical_verifier._calculate_confidence",
        "src.services.verifier.statistical_verifier.generate_tests",
        "src.services.verifier.statistical_verifier.execute_tests",
        "src.services.verifier.statistical_verifier.stratified_verify",
        "src.services.verifier.statistical_verifier.interpreter",
        "src.services.verifier.statistical_verifier.SymbolicResult",
        "src.services.knowledge_base.__init__",
        "src.services.knowledge_base.db_adapter",
        "src.services.knowledge_base.vector_knowledge_base",
        "src.services.knowledge_base.vector_knowledge_base.VectorKnowledgeBase",
        "src.services.knowledge_base.vector_knowledge_base.__init__",
        "src.services.knowledge_base.vector_knowledge_base._initialize_storage",
        "src.services.knowledge_base.vector_knowledge_base._initialize_embedding_model",
        "src.services.knowledge_base.vector_knowledge_base.store",
        "src.services.knowledge_base.vector_knowledge_base.get",
        "src.services.knowledge_base.vector_knowledge_base.search",
        "src.services.knowledge_base.vector_knowledge_base.delete",
        "src.services.knowledge_base.vector_db_service",
        "src.services.knowledge_base.vector_db_service.VectorDBService",
        "src.services.knowledge_base.vector_db_service.__init__",
        "src.services.knowledge_base.vector_db_service._initialize_vector_db",
        "src.services.synthesis_engine.__init__",
        "src.services.synthesis_engine.synthesis_engine",
        "src.services.synthesis_engine.synthesis_engine.SpecBasedSynthesisEngine",
        "src.services.synthesis_engine.synthesis_engine.__init__",
        "src.services.synthesis_engine.synthesis_engine._initialize_synthesizer",
        "src.services.synthesis_engine.synthesis_engine._create_synthesizer",
        "src.services.synthesis_engine.synthesis_engine._select_strategy",
        "src.services.synthesis_engine.synthesis_engine._get_next_strategy",
        "src.services.synthesis_engine.synthesis_engine._convert_spec_to_formal_spec",
        "src.services.synthesis_engine.synthesis_engine._generate_fallback_code",
        "src.services.specification_parser.__init__",
        "src.services.specification_parser.smt_spec_parser",
        "src.services.specification_parser.smt_spec_parser._parse_to_ast",
        "src.services.specification_parser.smt_spec_parser._extract_constraints",
        "src.services.specification_parser.smt_spec_parser._extract_examples",
        "src.services.specification_parser.smt_spec_parser.SMTSpecificationParser",
        "src.services.specification_parser.smt_spec_parser.Token",
        "src.services.specification_parser.smt_spec_parser.__init__",
        "src.services.specification_parser.smt_spec_parser.parse",
        "src.services.specification_parser.smt_spec_parser._extract_parameter_names",
        "src.services.specification_parser.smt_spec_parser._infer_types",
        "src.services.specification_parser.smt_spec_parser._create_comparison_constraint",
        "src.services.specification_parser.smt_spec_parser._convert_value",
        "src.services.specification_parser.smt_spec_parser._parse_constraint_string",
        "src.services.specification_parser.smt_spec_parser._get_default_value",
        "src.services.specification_parser.smt_spec_parser._parse_example_text",
        "src.services.specification_parser.smt_spec_parser._create_ast",
        "src.services.constraint_relaxer.__init__",
        "src.services.ast_code_generator.__init__",
        "src.services.spec_inference.spec_inference",
        "src.services.spec_inference.__init__",
        "src.services.workflow_registry.app.workflows.workflow_registry",
        "src.services.workflow_registry.app.workflows.workflow_registry.SpeculationMethod",
        "src.services.workflow_registry.app.workflows.workflow_registry.PerformanceMetrics",
        "src.services.workflow_registry.app.workflows.workflow_registry.LLMRequest",
        "src.services.workflow_registry.app.workflows.workflow_registry.SpeculativeAccelerator",
        "src.services.workflow_registry.app.workflows.workflow_registry.create_app",
        "src.services.workflow_registry.app.workflows.workflow_registry.main",
        "src.services.workflow_registry.app.workflows.workflow_registry.update",
        "src.services.workflow_registry.app.workflows.workflow_registry.as_dict",
        "src.services.workflow_registry.app.workflows.workflow_registry.__init__",
        "src.services.workflow_registry.app.workflows.workflow_registry._load_config",
        "src.services.workflow_registry.app.workflows.workflow_registry._validate_dependencies",
        "src.services.workflow_registry.app.workflows.workflow_registry._build_speculative_config",
        "src.services.workflow_registry.app.workflows.workflow_registry._init_engine",
        "src.services.workflow_registry.app.workflows.workflow_registry.get_metrics",
        "src.services.ast_code_generator.app.ast_code_generator",
        "src.services.ast_code_generator.app.ast_code_generator._generate_function_stub",
        "src.services.ast_code_generator.app.ast_code_generator._optimize_ast",
        "src.services.ast_code_generator.app.ast_code_generator._apply_style",
        "src.services.ast_code_generator.app.ast_code_generator._add_comments",
        "src.services.ast_code_generator.app.ast_code_generator.CodeGenerator",
        "src.services.ast_code_generator.app.ast_code_generator.ASTCodeGenerator",
        "src.services.ast_code_generator.app.ast_code_generator.__init__",
        "src.services.ast_code_generator.app.ast_code_generator.generate",
        "src.services.ast_code_generator.app.ast_code_generator.generate_best_effort",
        "src.services.ast_code_generator.app.ast_code_generator._generate_from_ast",
        "src.services.ast_code_generator.app.ast_code_generator._generate_body",
        "src.services.ast_code_generator.app.ast_code_generator._generate_expression",
        "src.services.ast_code_generator.app.ast_code_generator._add_safety_measures",
        "src.services.ast_code_generator.app.ast_utils",
        "src.services.ast_code_generator.app.ast_utils.generate_function_stub",
        "src.services.ast_code_generator.app.ast_utils.optimize_ast",
        "src.services.ast_code_generator.app.ast_utils.apply_style",
        "src.services.ast_code_generator.app.ast_utils.add_comments",
        "src.services.constraint_relaxer.app.config",
        "src.services.constraint_relaxer.app.config.AppConfig",
        "src.services.constraint_relaxer.app.config.__init__",
        "src.services.constraint_relaxer.app.client",
        "src.services.constraint_relaxer.app.client.EventBusClient",
        "src.services.constraint_relaxer.app.client.__init__",
        "src.services.constraint_relaxer.app.__init__",
        "src.services.constraint_relaxer.app.__init__.is_int_value",
        "src.services.constraint_relaxer.app.__init__.is_int",
        "src.services.constraint_relaxer.app.__init__.is_real",
        "src.services.constraint_relaxer.app.__init__.And",
        "src.services.constraint_relaxer.app.__init__.Or",
        "src.services.constraint_relaxer.app.__init__.Not",
        "src.services.constraint_relaxer.app.__init__.Int",
        "src.services.constraint_relaxer.app.__init__.Real",
        "src.services.constraint_relaxer.app.__init__.Bool",
        "src.services.constraint_relaxer.app.__init__.Solver",
        "src.services.constraint_relaxer.app.__init__.__init__",
        "src.services.constraint_relaxer.app.__init__.evaluate",
        "src.services.constraint_relaxer.app.__init__.validate",
        "src.services.constraint_relaxer.app.__init__.add_constraint",
        "src.services.constraint_relaxer.app.__init__.solve",
        "src.services.constraint_relaxer.app.constraint_relaxer",
        "src.services.constraint_relaxer.app.constraint_relaxer.ModelBasedConstraintRelaxer",
        "src.services.constraint_relaxer.app.constraint_relaxer.__init__",
        "src.services.constraint_relaxer.app.constraint_relaxer._select_relaxation_strategy",
        "src.services.constraint_relaxer.app.constraint_relaxer._count_variables",
        "src.services.constraint_relaxer.app.constraint_relaxer._constraint_to_z3",
        "src.services.constraint_relaxer.app.constraint_relaxer._parse_constraint_string",
        "src.services.constraint_relaxer.app.main",
        "src.services.constraint_relaxer.app.main.ConstraintRelaxerService",
        "src.services.constraint_relaxer.app.main.__init__",
        "src.services.constraint_relaxer.app.main._handle_sigterm",
        "src.services.constraint_relaxer.app.main._deserialize_spec",
        "src.services.constraint_relaxer.app.main._deserialize_verification_result",
        "src.services.constraint_relaxer.app.main._serialize_spec",
        "src.services.shared.utils.z3_utils",
        "src.services.shared.utils.z3_utils._solver",
        "src.services.shared.utils.z3_utils._check_sat",
        "src.services.shared.utils.z3_utils._check_unsat",
        "src.services.shared.utils.z3_utils._is_expr_ref",
        "src.services.shared.utils.z3_utils._is_const",
        "src.services.shared.utils.z3_utils._is_bool",
        "src.services.shared.utils.z3_utils._is_int_value",
        "src.services.shared.utils.z3_utils._is_real",
        "src.services.shared.utils.z3_utils._create_bool",
        "src.services.shared.utils.z3_utils._is_true",
        "src.services.shared.utils.z3_utils._optimize",
        "src.services.shared.utils.z3_utils._is_eq",
        "src.services.shared.utils.z3_utils._is_arith",
        "src.services.shared.utils.z3_utils._is_and",
        "src.services.shared.utils.z3_utils._and",
        "src.services.shared.utils.z3_utils._is_app",
        "src.services.shared.utils.z3_utils.get_model",
        "src.services.shared.utils.z3_utils.extract_variables",
        "src.services.shared.utils.z3_utils.is_satisfiable",
        "src.services.shared.utils.z3_utils.get_unsat_core",
        "src.services.shared.utils.z3_utils.optimize_constraints",
        "src.services.shared.utils.z3_utils.relax_constraint",
        "src.services.shared.utils.__init__",
        "src.services.shared.models.event_avro",
        "src.services.shared.models.event_avro.EventAvro",
        "src.services.shared.models.event_avro.Meta",
        "src.services.shared.models.enums",
        "src.services.shared.models.enums.is_failure_event",
        "src.services.shared.models.enums.get_retry_event_type",
        "src.services.shared.models.enums.Components",
        "src.services.shared.models.enums.Events",
        "src.services.shared.models.enums.EventPriority",
        "src.services.shared.models.enums.EventType",
        "src.services.shared.models.enums.Database",
        "src.services.shared.models.enums.DatabaseConfig",
        "src.services.shared.models.enums.Paths",
        "src.services.shared.models.enums.Techniques",
        "src.services.shared.models.enums.ModelConfig",
        "src.services.shared.models.enums.Metrics",
        "src.services.shared.models.enums.MetricsConfig",
        "src.services.shared.models.enums.DeploymentConfig",
        "src.services.shared.models.enums.ErrorCodes",
        "src.services.shared.models.enums.Constants",
        "src.services.shared.models.enums.ProcessingMode",
        "src.services.shared.models.enums.TaskStatus",
        "src.services.shared.models.enums.TaskPriority",
        "src.services.shared.models.enums.ProjectType",
        "src.services.shared.models.enums.ProjectStatus",
        "src.services.shared.models.enums.SynthesisStrategy",
        "src.services.shared.models.enums.DisclosureLevel",
        "src.services.shared.models.enums.HealthStatus",
        "src.services.shared.models.enums.VerificationResult",
        "src.services.shared.models.domain",
        "src.services.shared.models.domain.CodeGenerationRequestedEvent",
        "src.services.shared.models.domain.CodeGenerationCompletedEvent",
        "src.services.shared.models.domain.CodeGenerationFailedEvent",
        "src.services.shared.models.domain.KnowledgeQueryRequestedEvent",
        "src.services.shared.models.domain.KnowledgeQueryCompletedEvent",
        "src.services.shared.models.domain.KnowledgeUpdatedEvent",
        "src.services.shared.models.domain.SpecSheetCreatedEvent",
        "src.services.shared.models.domain.SpecSheetUpdatedEvent",
        "src.services.shared.models.domain.SpecSheetDeletedEvent",
        "src.services.shared.models.domain.SpecSheetPublishedEvent",
        "src.services.shared.models.domain.SpecSheetDeprecatedEvent",
        "src.services.shared.models.domain.SpecSheetArchivedEvent",
        "src.services.shared.models.domain.SpecInstanceCreatedEvent",
        "src.services.shared.models.domain.SpecInstanceUpdatedEvent",
        "src.services.shared.models.domain.SpecInstanceCompletedEvent",
        "src.services.shared.models.domain.SpecInstanceValidatedEvent",
        "src.services.shared.models.domain.SpecInstanceDeletedEvent",
        "src.services.shared.models.domain.create",
        "src.services.shared.models.events",
        "src.services.shared.models.events.CodeGenerationRequestPayload",
        "src.services.shared.models.events.CodeGenerationCompletedPayload",
        "src.services.shared.models.events.CodeGenerationFailedPayload",
        "src.services.shared.models.events.KnowledgeQueryPayload",
        "src.services.shared.models.events.KnowledgeQueryCompletedPayload",
        "src.services.shared.models.events.KnowledgeUpdatedPayload",
        "src.services.shared.models.events.SpecSheetEvent",
        "src.services.shared.models.events.SpecInstanceEvent",
        "src.services.shared.models.events.CodeGenerationRequestedEvent",
        "src.services.shared.models.events.CodeGenerationCompletedEvent",
        "src.services.shared.models.events.CodeGenerationFailedEvent",
        "src.services.shared.models.events.KnowledgeQueryRequestedEvent",
        "src.services.shared.models.events.KnowledgeQueryCompletedEvent",
        "src.services.shared.models.events.KnowledgeUpdatedEvent",
        "src.services.shared.models.events.SpecSheetCreatedEvent",
        "src.services.shared.models.events.SpecSheetUpdatedEvent",
        "src.services.shared.models.events.SpecSheetDeletedEvent",
        "src.services.shared.models.events.ensure_payload_consistency",
        "src.services.shared.models.events.create",
        "src.services.shared.models.constants",
        "src.services.shared.models.constants.DatabaseConfig",
        "src.services.shared.models.constants.Paths",
        "src.services.shared.models.constants.ModelConfig",
        "src.services.shared.models.constants.MetricsConfig",
        "src.services.shared.models.constants.DeploymentConfig",
        "src.services.shared.models.constants.Constants",
        "src.services.shared.models.schema_registry",
        "src.services.shared.models.schema_registry.SchemaRegistryClient",
        "src.services.shared.models.schema_registry.register_model_schema",
        "src.services.shared.models.schema_registry.register_all_models",
        "src.services.shared.models.schema_registry.__init__",
        "src.services.shared.models.schema_registry.register_schema",
        "src.services.shared.models.schema_registry.get_schema",
        "src.services.shared.models.schema_registry.get_latest_schema",
        "src.services.shared.models.schema_registry.check_schema_compatibility",
        "src.services.shared.models.__init__",
        "src.services.shared.models.telemetry",
        "src.services.shared.models.telemetry.TelemetryManager",
        "src.services.shared.models.telemetry.get_instance",
        "src.services.shared.models.telemetry.__init__",
        "src.services.shared.models.telemetry.record_metric",
        "src.services.shared.models.telemetry.get_metrics",
        "src.services.shared.models.telemetry.reset",
        "src.services.shared.models.telemetry.get_summary",
        "src.services.shared.models.types",
        "src.services.shared.models.types.VerificationResult",
        "src.services.shared.models.types.FormalSpecification",
        "src.services.shared.models.types.VerificationReport",
        "src.services.shared.models.types.ConstraintRelaxationRequest",
        "src.services.shared.models.types.ConstraintRelaxationResponse",
        "src.services.shared.models.types.is_decomposable",
        "src.services.shared.models.types.model_copy",
        "src.services.shared.models.messages",
        "src.services.shared.models.messages.Pattern",
        "src.services.shared.models.messages.IntentAnalysis",
        "src.services.shared.models.messages.ErrorResponse",
        "src.services.shared.models.messages.QueryResponse",
        "src.services.shared.models.messages.HealthResponse",
        "src.services.shared.models.messages.PatternCreateRequest",
        "src.services.shared.models.messages.PatternResponse",
        "src.services.shared.models.messages.PatternListResponse",
        "src.services.shared.models.messages.QueryRequest",
        "src.services.shared.models.messages.SymbolicTestResult",
        "src.services.shared.models.messages.InterfaceVerificationResult",
        "src.services.shared.models.messages.Task",
        "src.services.shared.models.messages.Meta",
        "src.services.shared.models.projects",
        "src.services.shared.models.projects.TechnologyStack",
        "src.services.shared.models.projects.Requirement",
        "src.services.shared.models.projects.ProjectCreatedMessage",
        "src.services.shared.models.projects.ProjectAnalysisRequestMessage",
        "src.services.shared.models.base",
        "src.services.shared.models.base.PulsarAvroBaseModel",
        "src.services.shared.models.base.EventPayload",
        "src.services.shared.models.base.BaseEvent",
        "src.services.shared.models.base.BaseMessage",
        "src.services.shared.models.base.BaseComponent",
        "src.services.shared.models.base.ConfigurableComponent",
        "src.services.shared.models.base.get_schema_subject",
        "src.services.shared.models.base.schema_version",
        "src.services.shared.models.base.to_avro_dict",
        "src.services.shared.models.base.serialize",
        "src.services.shared.models.base.deserialize",
        "src.services.shared.models.base.from_avro_dict",
        "src.services.shared.models.base.Meta",
        "src.services.shared.models.base.validate_event_type",
        "src.services.shared.models.base.validate_priority",
        "src.services.shared.models.base.validate_timestamp",
        "src.services.shared.models.base.__init__",
        "src.services.shared.models.base.initialize",
        "src.services.shared.models.base.component_name",
        "src.services.shared.models.base.get_param",
        "src.services.shared.models.base.model_dump",
        "src.services.shared.models.base.configure",
        "src.services.shared.models.specifications",
        "src.services.shared.models.specifications.FieldDefinition",
        "src.services.shared.models.specifications.SectionDefinition",
        "src.services.shared.models.specifications.SpecSheetDefinition",
        "src.services.shared.models.specifications.FieldValue",
        "src.services.shared.models.specifications.SectionValues",
        "src.services.shared.models.specifications.SpecSheet",
        "src.services.shared.models.specifications.SpecSheetGenerationRequestMessage",
        "src.services.shared.models.specifications.SpecSheetCompletionRequestMessage",
        "src.services.shared.models.specifications.SpecSheetDefinitionRequest",
        "src.services.shared.models.specifications.SpecSheetDefinitionResponse",
        "src.services.shared.models.specifications.to_avro",
        "src.services.shared.models.specifications._make_avro_compatible",
        "src.services.shared.models.validation",
        "src.services.shared.models.validation.ValidationResult",
        "src.services.shared.models.validation.error_message",
        "src.services.shared.models.validation.with_error",
        "src.services.shared.models.validation.merge",
        "src.services.shared.models.synthesis",
        "src.services.shared.models.synthesis.SynthesisResult",
        "src.services.shared.models.synthesis.to_dict",
        "src.services.shared.models.synthesis.confidence",
        "src.services.shared.models.synthesis.ast",
        "src.services.shared.models.synthesis.create",
        "src.services.shared.models.synthesis.combine",
        "src.services.shared.models.synthesis.with_code",
        "src.services.shared.concurrency.concurrency",
        "src.services.shared.concurrency.concurrency.TaskPriority",
        "src.services.shared.concurrency.concurrency.TaskInfo",
        "src.services.shared.concurrency.concurrency.TaskPool",
        "src.services.shared.concurrency.concurrency.AsyncTaskManager",
        "src.services.shared.concurrency.concurrency.ParallelExecutor",
        "src.services.shared.concurrency.concurrency.parallel_context",
        "src.services.shared.concurrency.concurrency.run_parallel",
        "src.services.shared.concurrency.concurrency.__init__",
        "src.services.shared.concurrency.concurrency.submit",
        "src.services.shared.concurrency.concurrency.get_task_info",
        "src.services.shared.concurrency.concurrency.get_result",
        "src.services.shared.concurrency.concurrency.cancel_task",
        "src.services.shared.concurrency.concurrency.wait_for_tasks",
        "src.services.shared.concurrency.concurrency.shutdown",
        "src.services.shared.concurrency.concurrency.map",
        "src.services.shared.concurrency.concurrency.execute_all",
        "src.services.shared.concurrency.concurrency.task_done_callback",
        "src.services.shared.concurrency.concurrency.process_chunk",
        "src.services.shared.concurrency.__init__",
        "src.services.shared.pulsar.__init__",
        "src.services.shared.pulsar.event_bus",
        "src.services.shared.pulsar.event_bus.EventBus",
        "src.services.shared.pulsar.event_bus.PulsarEventBus",
        "src.services.shared.pulsar.event_bus.subscribe",
        "src.services.shared.pulsar.event_bus.__init__",
        "src.services.shared.pulsar.event_bus._create_event",
        "src.services.shared.pulsar.event_listener",
        "src.services.shared.pulsar.event_listener.EventVerificationError",
        "src.services.shared.pulsar.event_listener.SecureEventListener",
        "src.services.shared.pulsar.event_listener.__init__",
        "src.services.shared.pulsar.event_listener._get_topic_names",
        "src.services.shared.pulsar.event_listener._verify_signature",
        "src.services.shared.pulsar.event_listener.register_handler",
        "src.services.shared.pulsar.event_emitter",
        "src.services.shared.pulsar.event_emitter.SecureEventEmitter",
        "src.services.shared.pulsar.event_emitter.__init__",
        "src.services.shared.pulsar.event_emitter._get_topic_name",
        "src.services.shared.pulsar.event_emitter._get_producer",
        "src.services.shared.pulsar.event_emitter._sign_message",
        "src.services.shared.pulsar.event_emitter._add_signature",
        "src.services.shared.pulsar.event_emitter.emit",
        "src.services.shared.pulsar.event_emitter.close",
        "src.services.shared.pulsar.client_factory",
        "src.services.shared.pulsar.client_factory.create_pulsar_client",
        "src.services.shared.monitoring.metrics",
        "src.services.shared.monitoring.metrics.set_metrics_collector",
        "src.services.shared.monitoring.metrics.get_metrics_collector",
        "src.services.shared.monitoring.metrics.track_inference_time",
        "src.services.shared.monitoring.metrics._record_success",
        "src.services.shared.monitoring.metrics._record_error",
        "src.services.shared.monitoring.metrics.sync_wrapper",
        "src.services.shared.monitoring.embedding_client",
        "src.services.shared.monitoring.embedding_client.EmbeddingClient",
        "src.services.shared.monitoring.embedding_client.__init__",
        "src.services.shared.monitoring.embedding_client.Timer",
        "src.services.shared.monitoring.embedding_client._initialize_models",
        "src.services.shared.monitoring.embedding_client._simulate_embedding",
        "src.services.shared.monitoring.embedding_client.start",
        "src.services.shared.monitoring.embedding_client.stop",
        "src.services.shared.monitoring.embedding_client.duration",
        "src.services.shared.monitoring.__init__",
        "src.services.shared.monitoring.health_monitor",
        "src.services.shared.monitoring.health_monitor.HealthStatus",
        "src.services.shared.monitoring.health_monitor.HealthMonitor",
        "src.services.shared.monitoring.health_monitor.start_server",
        "src.services.shared.monitoring.health_monitor.__init__",
        "src.services.shared.monitoring.health_monitor.register_dependency",
        "src.services.shared.monitoring.health_monitor.register_subsystem",
        "src.services.shared.monitoring.health_monitor.get_detailed_status",
        "src.services.shared.monitoring.health_monitor.is_healthy",
        "src.services.shared.monitoring.health_monitor.is_available",
        "src.services.shared.monitoring.healthcheck",
        "src.services.shared.monitoring.healthcheck.HealthStatus",
        "src.services.shared.monitoring.healthcheck.update_stats",
        "src.services.shared.monitoring.healthcheck.start_server",
        "src.services.shared.monitoring.metrics_collector",
        "src.services.shared.monitoring.metrics_collector.MetricsCollector",
        "src.services.shared.monitoring.metrics_collector.__init__",
        "src.services.shared.monitoring.metrics_collector._init_metrics",
        "src.services.shared.monitoring.metrics_collector.record_request",
        "src.services.shared.monitoring.metrics_collector.start_request_timer",
        "src.services.shared.monitoring.metrics_collector.record_tokens",
        "src.services.shared.monitoring.metrics_collector.record_confidence",
        "src.services.shared.monitoring.metrics_collector.record_code_length",
        "src.services.shared.monitoring.metrics_collector.record_cache_hit",
        "src.services.shared.monitoring.metrics_collector.record_cache_miss",
        "src.services.shared.monitoring.metrics_collector.record_component_status",
        "src.services.shared.monitoring.metrics_collector.update_gpu_memory_usage",
        "src.services.shared.monitoring.metrics_collector.start_model_loading_timer",
        "src.services.shared.monitoring.metrics_collector.record_event_emitted",
        "src.services.shared.monitoring.metrics_collector.record_event_received",
        "src.services.shared.monitoring.metrics_collector.start_event_processing_timer",
        "src.services.shared.monitoring.metrics_collector.set_component_up",
        "src.services.shared.monitoring.metrics_collector.record_error",
        "src.services.shared.monitoring.metrics_collector.start_vector_db_timer",
        "src.services.shared.monitoring.metrics_collector.record_vector_db_operation",
        "src.services.shared.monitoring.circuit_breaker",
        "src.services.shared.monitoring.circuit_breaker.CircuitState",
        "src.services.shared.monitoring.circuit_breaker.CircuitBreakerError",
        "src.services.shared.monitoring.circuit_breaker.CircuitBreaker",
        "src.services.shared.monitoring.circuit_breaker.circuit_breaker",
        "src.services.shared.monitoring.circuit_breaker.async_circuit_breaker",
        "src.services.shared.monitoring.circuit_breaker.create_circuit_breaker_from_config",
        "src.services.shared.monitoring.circuit_breaker.__init__",
        "src.services.shared.monitoring.circuit_breaker.is_open",
        "src.services.shared.monitoring.circuit_breaker.get_state",
        "src.services.shared.monitoring.circuit_breaker.get_metrics",
        "src.services.shared.monitoring.circuit_breaker.__str__",
        "src.services.shared.monitoring.circuit_breaker.decorator",
        "src.services.shared.monitoring.circuit_breaker.wrapper",
        "src.services.shared.logging.__init__",
        "src.services.shared.logging.logger",
        "src.services.shared.logging.logger.LoggerService",
        "src.services.shared.logging.logger.__init__",
        "src.services.shared.logging.db_handler",
        "src.services.shared.logging.db_handler.PulsarLogHandler",
        "src.services.shared.logging.db_handler.__init__",
        "src.services.shared.logging.db_handler._connect",
        "src.services.shared.logging.db_handler.emit",
        "src.services.shared.logging.db_handler.format",
        "src.services.shared.logging.db_handler.format_message",
        "src.services.shared.logging.db_handler.close",
        "src.services.shared.validation.validator",
        "src.services.shared.validation.validator.ValidationResult",
        "src.services.shared.validation.validator.ValidationError",
        "src.services.shared.validation.validator.Validator",
        "src.services.shared.validation.validator.TypeValidator",
        "src.services.shared.validation.validator.StringValidator",
        "src.services.shared.validation.validator.NumberValidator",
        "src.services.shared.validation.validator.validate_input",
        "src.services.shared.validation.validator.__init__",
        "src.services.shared.validation.validator.__bool__",
        "src.services.shared.validation.validator.add_error",
        "src.services.shared.validation.validator.add_errors",
        "src.services.shared.validation.validator.merge",
        "src.services.shared.validation.validator.error_message",
        "src.services.shared.validation.validator.validate",
        "src.services.shared.validation.validator.__call__",
        "src.services.shared.validation.validator.decorator",
        "src.services.shared.validation.validator.wrapper",
        "src.services.shared.validation.__init__",
        "src.services.shared.models.tests.__init__",
        "src.services.shared.models.tests.event_avro_test",
        "src.services.shared.models.tests.event_avro_test.test_event_model_validation",
        "src.services.shared.models.tests.event_avro_test.test_avro_serialization",
        "src.services.shared.models.tests.test_event_converter",
        "src.services.shared.models.tests.test_event_converter.TestEnum",
        "src.services.shared.models.tests.test_event_converter.test_to_avro_basic",
        "src.services.shared.models.tests.test_event_converter.test_from_avro_basic",
        "src.services.shared.models.tests.test_event_converter.test_ensure_avro_compatible",
        "src.services.shared.models.tests.test_event_converter.test_roundtrip",
        "src.services.agents.app.event_service",
        "src.services.agents.app.event_service.AgentEventService",
        "src.services.agents.app.event_service.__init__",
        "src.services.agents.app.event_service.register_handler",
        "src.services.agents.app.__init__",
        "src.services.agents.app.agent_generator",
        "src.services.agents.app.agent_generator.AgentGenerator",
        "src.services.agents.app.agent_generator.__init__",
        "src.services.agents.app.agent_generator.get_instance",
        "src.services.agents.app.agent_generator.list_instances",
        "src.services.agents.app.agent_workflow",
        "src.services.agents.app.agent_template",
        "src.services.agents.app.agent_template.TemplateService",
        "src.services.agents.app.agent_template.__init__",
        "src.services.agents.app.agent_template._load_templates",
        "src.services.agents.app.agent_template._save_template",
        "src.services.agents.app.agent_template.get_template",
        "src.services.agents.app.agent_template.list_templates",
        "src.services.agents.app.agent_template.delete_template",
        "src.services.agents.app.block_registry",
        "src.services.agents.app.block_registry.BlockRegistry",
        "src.services.agents.app.block_registry.__init__",
        "src.services.agents.app.block_registry._load_blocks",
        "src.services.agents.app.block_registry._save_block",
        "src.services.agents.app.block_registry.get_block",
        "src.services.agents.app.block_registry.list_blocks",
        "src.services.agents.app.block_registry.delete_block",
        "src.services.agents.app.models.events",
        "src.services.agents.app.models.events.AgentBlockCreatedEvent",
        "src.services.agents.app.models.events.AgentBlockUpdatedEvent",
        "src.services.agents.app.models.events.AgentTemplateCreatedEvent",
        "src.services.agents.app.models.events.AgentTemplateUpdatedEvent",
        "src.services.agents.app.models.events.AgentInstanceCreatedEvent",
        "src.services.agents.app.models.events.AgentInstanceStartedEvent",
        "src.services.agents.app.models.events.AgentInstanceCompletedEvent",
        "src.services.agents.app.models.events.AgentInstanceFailedEvent",
        "src.services.agents.app.models.__init__",
        "src.services.agents.app.models.agent_blocks",
        "src.services.agents.app.models.agent_blocks.BlockType",
        "src.services.agents.app.models.agent_blocks.InputParameter",
        "src.services.agents.app.models.agent_blocks.OutputParameter",
        "src.services.agents.app.models.agent_blocks.BlockMetadata",
        "src.services.agents.app.models.agent_blocks.AgentBlock",
        "src.services.agents.app.models.agent_blocks.AgentTemplate",
        "src.services.agents.app.models.agent_blocks.AgentInstance",
        "src.services.spec_registry.app.spec_registry",
        "src.services.spec_registry.app.spec_registry.SpecRegistry",
        "src.services.spec_registry.app.spec_registry.__init__",
        "src.services.spec_registry.app.spec_registry._init_validators",
        "src.services.spec_registry.app.spec_registry.get_fields_for_spec_type",
        "src.services.spec_registry.app.spec_registry._get_fields_for_spec_type",
        "src.services.spec_registry.app.spec_registry._get_container_field_definitions",
        "src.services.spec_registry.app.spec_registry._get_api_field_definitions",
        "src.services.spec_registry.app.spec_registry._get_database_field_definitions",
        "src.services.spec_registry.app.spec_registry._validate_spec",
        "src.services.spec_registry.app.spec_registry._validate_required",
        "src.services.spec_registry.app.spec_registry._validate_min_length",
        "src.services.spec_registry.app.spec_registry._validate_max_length",
        "src.services.spec_registry.app.spec_registry._validate_min_value",
        "src.services.spec_registry.app.spec_registry._validate_max_value",
        "src.services.spec_registry.app.spec_registry._validate_pattern",
        "src.services.spec_registry.app.spec_registry._validate_string",
        "src.services.spec_registry.app.spec_registry._validate_int",
        "src.services.spec_registry.app.spec_registry._validate_float",
        "src.services.spec_registry.app.spec_registry._validate_boolean",
        "src.services.spec_registry.app.spec_registry._validate_list",
        "src.services.spec_registry.app.spec_registry._validate_json",
        "src.services.spec_registry.app.spec_registry._validate_code",
        "src.services.spec_registry.app.spec_registry._validate_datetime",
        "src.services.spec_registry.app.spec_registry._validate_reference",
        "src.services.spec_registry.app.models",
        "src.services.spec_registry.app.models.FieldType",
        "src.services.spec_registry.app.models.SpecStatus",
        "src.services.spec_registry.app.models.FieldConstraint",
        "src.services.spec_registry.app.models.RequiredConstraint",
        "src.services.spec_registry.app.models.MinLengthConstraint",
        "src.services.spec_registry.app.models.MaxLengthConstraint",
        "src.services.spec_registry.app.models.PatternConstraint",
        "src.services.spec_registry.app.models.MinValueConstraint",
        "src.services.spec_registry.app.models.MaxValueConstraint",
        "src.services.spec_registry.app.models.FieldDefinition",
        "src.services.spec_registry.app.models.SpecTemplate",
        "src.services.spec_registry.app.models.Spec",
        "src.services.spec_registry.app.models.ValidationResult",
        "src.services.spec_registry.app.models.validate_field_names",
        "src.services.spec_registry.app.models.to_internal_format",
        "src.services.spec_registry.app.models._constraint_to_string",
        "src.services.spec_registry.app.models.from_internal_format",
        "src.services.spec_registry.app.models._string_to_constraint",
        "src.services.spec_registry.app.__init__",
        "src.services.spec_registry.app.spec_registry_event_adapter",
        "src.services.spec_registry.app.postgre_spec_repo",
        "src.services.spec_registry.app.postgre_spec_repo.PostgreSQLSpecRepository",
        "src.services.spec_registry.app.postgre_spec_repo.__init__",
        "src.services.spec_registry.app.postgre_spec_repo._format_record",
        "src.services.spec_registry.app.main",
        "src.services.aggregators.app.response_aggregator",
        "src.services.aggregators.app.response_aggregator.ResponseAggregator",
        "src.services.aggregators.app.response_aggregator.__init__",
        "src.services.aggregators.app.response_aggregator.register_response_processor",
        "src.services.aggregators.app.response_aggregator._get_response_event_types",
        "src.services.aggregators.app.response_aggregator._initialize_request",
        "src.services.aggregators.app.response_aggregator._aggregate_responses",
        "src.services.aggregators.app.response_aggregator._record_service_failure",
        "src.services.aggregators.app.response_aggregator._is_circuit_open",
        "src.services.aggregators.app.__init__",
        "src.services.feedback_collector.app.__init__",
        "src.services.feedback_collector.app.feedback_collector",
        "src.services.feedback_collector.app.feedback_collector._sanitize_context",
        "src.services.feedback_collector.app.feedback_collector._categorize_error",
        "src.services.feedback_collector.app.feedback_collector._check_type_violations",
        "src.services.feedback_collector.app.feedback_collector._extract_common_values",
        "src.services.feedback_collector.app.feedback_collector._is_negative_feedback",
        "src.services.feedback_collector.app.feedback_collector._check_boundary_violations",
        "src.services.feedback_collector.app.feedback_collector._extract_error_patterns",
        "src.services.feedback_collector.app.feedback_collector._get_memory_usage",
        "src.services.feedback_collector.app.feedback_collector._get_system_load",
        "src.services.feedback_collector.app.feedback_collector.get_feedback_statistics",
        "src.services.feedback_collector.app.feedback_collector.FeedbackCollector",
        "src.services.feedback_collector.app.feedback_collector.__init__",
        "src.services.feedback_collector.app.feedback_collector._initialize_storage",
        "src.services.feedback_collector.app.feedback_collector.record_success",
        "src.services.feedback_collector.app.feedback_collector.record_failure",
        "src.services.feedback_collector.app.feedback_collector.record_user_feedback",
        "src.services.feedback_collector.app.feedback_collector.export_feedback_for_training",
        "src.services.feedback_collector.app.feedback_collector._store_feedback",
        "src.services.feedback_collector.app.feedback_collector._maybe_compress_old_data",
        "src.services.feedback_collector.app.feedback_collector._load_feedback_data",
        "src.services.feedback_collector.app.feedback_collector._analyze_negative_feedback",
        "src.services.feedback_collector.app.feedback_collector._analyze_failure_patterns",
        "src.services.feedback_collector.app.feedback_collector._schedule_pattern_analysis",
        "src.services.llm_volume.training_data.__init__",
        "src.services.llm_volume.specs.__init__",
        "src.services.llm_volume.examples.__init__",
        "src.services.project_manager.app.__init__",
        "src.services.project_manager.app.project_manager",
        "src.services.project_manager.app.project_manager.ProjectManager",
        "src.services.project_manager.app.project_manager.__init__",
        "src.services.project_manager.app.project_manager._has_api_requirements",
        "src.services.project_manager.app.project_manager._has_database_requirements",
        "src.services.project_manager.app.project_manager._has_auth_requirements",
        "src.services.project_manager.app.project_manager._has_microservice_requirements",
        "src.services.project_manager.app.project_manager._has_event_driven_requirements",
        "src.services.project_manager.app.project_manager._has_requirements_with_keywords",
        "src.services.project_manager.app.project_manager._get_requirement_ids_by_keyword",
        "src.services.project_manager.app.project_manager._estimate_api_endpoint_count",
        "src.services.project_manager.app.project_manager._estimate_model_count",
        "src.services.project_manager.app.project_manager._estimate_page_count",
        "src.services.project_manager.app.project_manager._estimate_component_count",
        "src.services.project_manager.app.project_manager._estimate_event_count",
        "src.services.project_manager.app.project_manager._determine_database_type",
        "src.services.project_manager.app.project_manager._determine_database_provider",
        "src.services.project_manager.app.project_manager._determine_auth_type",
        "src.services.project_manager.app.project_manager._determine_auth_provider",
        "src.services.project_manager.app.project_manager._determine_styling_framework",
        "src.services.project_manager.app.project_manager._determine_cloud_provider",
        "src.services.project_manager.app.project_manager._recommend_technology_stack",
        "src.pulsar.app.config",
        "src.pulsar.app.config.PulsarAuthConfig",
        "src.pulsar.app.config.PulsarTopicConfig",
        "src.pulsar.app.config.PulsarConfig",
        "src.pulsar.app.config.PulsarConfigManager",
        "src.pulsar.app.config.__init__",
        "src.pulsar.app.config.load",
        "src.pulsar.app.config.get_client_config",
        "src.pulsar.app.config.get_auth_params",
        "src.pulsar.app.config.get_consumer_topics",
        "src.pulsar.app.config.get_producer_topics",
        "src.pulsar.app.client",
        "src.pulsar.app.client.PulsarEventBus",
        "src.pulsar.app.client.__init__",
        "src.pulsar.app.client._get_topic_name",
        "src.pulsar.app.client.subscribe",
        "src.pulsar.app.client._start_consumer_loop",
        "src.pulsar.app.client._create_event_object",
        "src.pulsar.app.__init__",
        "src.pulsar.app.NEEDS_FIXED",
        "src.pulsar.app.NEEDS_FIXED.load_config",
        "src.pulsar.app.NEEDS_FIXED.AppState",
        "src.pulsar.app.NEEDS_FIXED.__init__",
        "src.pulsar.app.analytics.evolution",
        "src.pulsar.app.analytics.evolution.EvolutionSuggestionType",
        "src.pulsar.app.analytics.evolution.EvolutionSuggestion",
        "src.pulsar.app.analytics.evolution.FieldEvolutionData",
        "src.pulsar.app.analytics.evolution.SectionEvolutionData",
        "src.pulsar.app.analytics.evolution.SpecSheetDefinitionEvolutionAnalysis",
        "src.pulsar.app.analytics.evolution.to_dict",
        "src.pulsar.app.analytics.evolution.to_json",
        "src.pulsar.app.analytics.evolution.from_dict",
        "src.pulsar.app.analytics.evolution.from_json",
        "src.pulsar.app.analytics.__init__",
        "src.pulsar.app.analytics.usage",
        "src.pulsar.app.analytics.usage.FieldUsageStats",
        "src.pulsar.app.analytics.usage.SectionUsageStats",
        "src.pulsar.app.analytics.usage.CompletionPathStats",
        "src.pulsar.app.analytics.usage.SpecSheetDefinitionUsageAnalytics",
        "src.pulsar.app.analytics.usage.to_dict",
        "src.pulsar.app.analytics.usage.from_dict",
        "src.pulsar.app.analytics.usage.to_json",
        "src.pulsar.app.analytics.usage.from_json",
        "src.api_gateway.neural_interpretor.__init__",
        "src.api_gateway.security.__init__",
        "src.api_gateway.auth-sidecar.__init__",
        "src.api_gateway.security.app.hmac_signer",
        "src.api_gateway.security.app.hmac_signer.HmacSigner",
        "src.api_gateway.security.app.hmac_signer.__init__",
        "src.api_gateway.security.app.hmac_signer.sign_request",
        "src.api_gateway.security.app.hmac_signer.request",
        "src.api_gateway.security.app.__init__",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.IntentDimension",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.DomainDimension",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.ComplexityDimension",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.ActionabilityDimension",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.UrgencyDimension",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.SpecificityDimension",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.MultimodalityDimension",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.TaskMetadata",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.NeuralInterpretor",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.NeuralInterpreter",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.to_dict",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.__init__",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor._simple_token_counter",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.analyze_task",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_intent",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_domain",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_complexity",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_actionability",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_urgency",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_specificity",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_multimodality",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_workflow_patterns",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.determine_service_route",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.determine_processing_mode",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.estimate_processing_time",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.determine_priority",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.validate_request",
        "src.api_gateway.neural_interpretor.app.pattern_matcher",
        "src.api_gateway.neural_interpretor.app.pattern_matcher.PatternMatcher",
        "src.api_gateway.neural_interpretor.app.pattern_matcher.__init__",
        "src.api_gateway.neural_interpretor.app.code_generation",
        "src.api_gateway.neural_interpretor.app.code_generation.CodeGenRequestType",
        "src.api_gateway.neural_interpretor.app.code_generation.ProgrammingLanguage",
        "src.api_gateway.neural_interpretor.app.code_generation.CodeGenRequest",
        "src.api_gateway.neural_interpretor.app.code_generation.CodeGenRouter",
        "src.api_gateway.neural_interpretor.app.code_generation.Config",
        "src.api_gateway.neural_interpretor.app.code_generation.__init__",
        "src.api_gateway.neural_interpretor.app.code_generation.determine_request_type",
        "src.api_gateway.neural_interpretor.app.code_generation.determine_language",
        "src.api_gateway.neural_interpretor.app.code_generation.get_topic_for_request",
        "src.api_gateway.neural_interpretor.app.__init__",
        "src.api_gateway.neural_interpretor.app.intent_analyzer",
        "src.api_gateway.neural_interpretor.app.intent_analyzer.ProcessingMode",
        "src.api_gateway.neural_interpretor.app.intent_analyzer.QueryIntent",
        "src.api_gateway.neural_interpretor.app.intent_analyzer.IntentAnalyzer",
        "src.api_gateway.neural_interpretor.app.intent_analyzer.__init__",
        "src.api_gateway.neural_interpretor.app.intent_analyzer._count_complexity_keywords",
        "src.api_gateway.neural_interpretor.app.intent_analyzer._detect_conversational_markers",
        "src.api_gateway.neural_interpretor.app.intent_analyzer._calculate_complexity_score",
        "src.api_gateway.neural_interpretor.app.intent_analyzer._estimate_processing_time"
      ],
      "event_flows": [
        "WorkflowEventType",
        "EventBusClient",
        "EventAvro",
        "Events",
        "EventPriority",
        "EventType",
        "CodeGenerationRequestedEvent",
        "CodeGenerationCompletedEvent",
        "CodeGenerationFailedEvent",
        "KnowledgeQueryRequestedEvent",
        "KnowledgeQueryCompletedEvent",
        "KnowledgeUpdatedEvent",
        "SpecSheetCreatedEvent",
        "SpecSheetUpdatedEvent",
        "SpecSheetDeletedEvent",
        "SpecSheetPublishedEvent",
        "SpecSheetDeprecatedEvent",
        "SpecSheetArchivedEvent",
        "SpecInstanceCreatedEvent",
        "SpecInstanceUpdatedEvent",
        "SpecInstanceCompletedEvent",
        "SpecInstanceValidatedEvent",
        "SpecInstanceDeletedEvent",
        "CodeGenerationRequestPayload",
        "CodeGenerationCompletedPayload",
        "CodeGenerationFailedPayload",
        "KnowledgeQueryPayload",
        "KnowledgeQueryCompletedPayload",
        "KnowledgeUpdatedPayload",
        "SpecSheetEvent",
        "SpecInstanceEvent",
        "CodeGenerationRequestedEvent",
        "CodeGenerationCompletedEvent",
        "CodeGenerationFailedEvent",
        "KnowledgeQueryRequestedEvent",
        "KnowledgeQueryCompletedEvent",
        "KnowledgeUpdatedEvent",
        "SpecSheetCreatedEvent",
        "SpecSheetUpdatedEvent",
        "SpecSheetDeletedEvent",
        "EventPayload",
        "BaseEvent",
        "EventBus",
        "PulsarEventBus",
        "EventVerificationError",
        "SecureEventListener",
        "SecureEventEmitter",
        "AgentEventService",
        "AgentBlockCreatedEvent",
        "AgentBlockUpdatedEvent",
        "AgentTemplateCreatedEvent",
        "AgentTemplateUpdatedEvent",
        "AgentInstanceCreatedEvent",
        "AgentInstanceStartedEvent",
        "AgentInstanceCompletedEvent",
        "AgentInstanceFailedEvent",
        "response_aggregator",
        "PulsarEventBus"
      ],
      "templates": [],
      "infra_files": [
        "src/services/project_manager/Dockerfile",
        "src/services/feedback_collector/Dockerfile",
        "src/services/aggregators/Dockerfile",
        "src/services/spec_registry/Dockerfile",
        "src/services/grafana/Dockerfile",
        "src/services/shared/Dockerfile",
        "src/services/shared/Dockerfile-dev",
        "src/services/incremental_synthesis/Dockerfile",
        "src/services/language_interop/Dockerfile",
        "src/services/workflow_orchestrator/Dockerfile",
        "src/services/meta_learner/Dockerfile",
        "src/services/neural_code_generator/Dockerfile",
        "src/services/knowledge_base/Dockerfile",
        "src/services/prometheus/Dockerfile",
        "src/services/constraint_relaxer/Dockerfile",
        "src/services/ast_code_generator/Dockerfile",
        "src/services/spec_inference/Dockerfile",
        "src/services/shared/logging/Dockerfile",
        "src/api_gateway/neural_interpretor/Dockerfile",
        "src/api_gateway/security/Dockerfile",
        "src/api_gateway/auth-sidecar/Dockerfile",
        "src/services/project_manager/requirements.txt",
        "src/services/feedback_collector/requirements.txt",
        "src/services/aggregators/requirements.txt",
        "src/services/spec_registry/requirements.txt",
        "src/services/grafana/requirements.txt",
        "src/services/shared/requirements.txt",
        "src/services/incremental_synthesis/requirements.txt",
        "src/services/language_interop/requirements.txt",
        "src/services/meta_learner/requirements.txt",
        "src/services/knowledge_base/requirements.txt",
        "src/services/prometheus/requirements.txt",
        "src/services/constraint_relaxer/requirements.txt",
        "src/services/ast_code_generator/requirements.txt",
        "src/services/spec_inference/requirements.txt",
        "src/services/shared/logging/requirements.txt",
        "src/api_gateway/neural_interpretor/requirements.txt",
        "src/api_gateway/security/requirements.txt",
        "src/api_gateway/traefik/requirements.txt",
        "src/api_gateway/docker-compose.yaml",
        "src/services/shared/docker-compose.yaml",
        "src/services/llm_volume/deepseek_model_config.yaml",
        "src/services/neural_code_generator/config.yaml",
        "src/services/spec_inference/config.yaml",
        "src/api_gateway/traefik/app/traefik_tls_config.yaml",
        "src/api_gateway/traefik/app/config/config.yaml",
        "src/api_gateway/auth-sidecar/app/config/config.yaml",
        "src/api_gateway/security/app/config/config.yaml",
        "src/api_gateway/neural_interpretor/app/config/config.yaml"
      ]
    },
    "bin": {
      "components": [
        "bin.cli.__init__",
        "bin.cli.synthesize",
        "bin.cli.synthesize.parse_args",
        "bin.cli.synthesize.main",
        "bin.cli.standalonewithcli",
        "bin.cli.standalonewithcli.parse_args",
        "bin.cli.standalonewithcli.load_specification",
        "bin.cli.standalonewithcli.setup_neural_code_generator",
        "bin.cli.standalonewithcli.save_output",
        "bin.cli.standalonewithcli.main",
        "bin.pulsar.__init__",
        "bin.pulsar.service_module",
        "bin.pulsar.service_module.signal_handler",
        "bin.pulsar.neural_integration",
        "bin.pulsar.neural_integration.parse_args",
        "bin.pulsar.neural_integration.load_configuration",
        "bin.pulsar.neural_integration.load_specification",
        "bin.pulsar.neural_integration.setup_neural_code_generator",
        "bin.pulsar.neural_integration.main"
      ],
      "event_flows": [],
      "templates": [],
      "infra_files": []
    }
  },
  "components": {
    "app_mapper": {
      "name": "app_mapper",
      "type": "module",
      "service": "app_mapper.py",
      "file_path": "app_mapper.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Improved Application Architecture Mapper"
    },
    "app_mapper.Component": {
      "name": "app_mapper.Component",
      "type": "class",
      "service": "app_mapper.py",
      "file_path": "app_mapper.py",
      "parent": "app_mapper",
      "dependencies": [],
      "dependents": [
        "app_mapper"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Represents a component in the application architecture."
    },
    "app_mapper.EventFlow": {
      "name": "app_mapper.EventFlow",
      "type": "class",
      "service": "app_mapper.py",
      "file_path": "app_mapper.py",
      "parent": "app_mapper",
      "dependencies": [],
      "dependents": [
        "app_mapper"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Represents an event flow in the application."
    },
    "app_mapper.Template": {
      "name": "app_mapper.Template",
      "type": "class",
      "service": "app_mapper.py",
      "file_path": "app_mapper.py",
      "parent": "app_mapper",
      "dependencies": [],
      "dependents": [
        "app_mapper"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Represents a template in the application."
    },
    "app_mapper.InfraFile": {
      "name": "app_mapper.InfraFile",
      "type": "class",
      "service": "app_mapper.py",
      "file_path": "app_mapper.py",
      "parent": "app_mapper",
      "dependencies": [],
      "dependents": [
        "app_mapper"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Represents an infrastructure-related file."
    },
    "app_mapper.ImprovedApplicationMapper": {
      "name": "app_mapper.ImprovedApplicationMapper",
      "type": "class",
      "service": "app_mapper.py",
      "file_path": "app_mapper.py",
      "parent": "app_mapper",
      "dependencies": [],
      "dependents": [
        "app_mapper"
      ],
      "methods": [
        "__init__",
        "get_service_name",
        "find_files",
        "find_infra_files",
        "analyze_file",
        "_register_event_class",
        "_get_module_name",
        "_extract_docstring",
        "_get_attribute_name",
        "_detect_component_role",
        "_detect_templates",
        "_extract_template_variables",
        "_detect_event_flows",
        "analyze_infra_file",
        "analyze_codebase",
        "_process_relationships",
        "_organize_by_service",
        "generate_application_map",
        "save_output",
        "_save_markdown",
        "_save_graphml"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Maps the application architecture by analyzing the codebase with improved service grouping."
    },
    "app_mapper.main": {
      "name": "app_mapper.main",
      "type": "function",
      "service": "app_mapper.py",
      "file_path": "app_mapper.py",
      "parent": "app_mapper",
      "dependencies": [],
      "dependents": [
        "app_mapper"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Main entry point for the script."
    },
    "app_mapper.__init__": {
      "name": "app_mapper.__init__",
      "type": "function",
      "service": "app_mapper.py",
      "file_path": "app_mapper.py",
      "parent": "app_mapper",
      "dependencies": [],
      "dependents": [
        "app_mapper"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "app_mapper.get_service_name": {
      "name": "app_mapper.get_service_name",
      "type": "function",
      "service": "app_mapper.py",
      "file_path": "app_mapper.py",
      "parent": "app_mapper",
      "dependencies": [],
      "dependents": [
        "app_mapper"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Determine the service name based on the file path."
    },
    "app_mapper.find_files": {
      "name": "app_mapper.find_files",
      "type": "function",
      "service": "app_mapper.py",
      "file_path": "app_mapper.py",
      "parent": "app_mapper",
      "dependencies": [],
      "dependents": [
        "app_mapper"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Find all files with the given extension in the root path along with their service names."
    },
    "app_mapper.find_infra_files": {
      "name": "app_mapper.find_infra_files",
      "type": "function",
      "service": "app_mapper.py",
      "file_path": "app_mapper.py",
      "parent": "app_mapper",
      "dependencies": [],
      "dependents": [
        "app_mapper"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Find all infrastructure-related files in the root path."
    },
    "app_mapper.analyze_file": {
      "name": "app_mapper.analyze_file",
      "type": "function",
      "service": "app_mapper.py",
      "file_path": "app_mapper.py",
      "parent": "app_mapper",
      "dependencies": [],
      "dependents": [
        "app_mapper"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Analyze a single file to extract components and relationships."
    },
    "app_mapper._register_event_class": {
      "name": "app_mapper._register_event_class",
      "type": "function",
      "service": "app_mapper.py",
      "file_path": "app_mapper.py",
      "parent": "app_mapper",
      "dependencies": [],
      "dependents": [
        "app_mapper"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Register an event class as a potential event flow."
    },
    "app_mapper._get_module_name": {
      "name": "app_mapper._get_module_name",
      "type": "function",
      "service": "app_mapper.py",
      "file_path": "app_mapper.py",
      "parent": "app_mapper",
      "dependencies": [],
      "dependents": [
        "app_mapper"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Get the module name from a file path."
    },
    "app_mapper._extract_docstring": {
      "name": "app_mapper._extract_docstring",
      "type": "function",
      "service": "app_mapper.py",
      "file_path": "app_mapper.py",
      "parent": "app_mapper",
      "dependencies": [],
      "dependents": [
        "app_mapper"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Extract docstring from module content."
    },
    "app_mapper._get_attribute_name": {
      "name": "app_mapper._get_attribute_name",
      "type": "function",
      "service": "app_mapper.py",
      "file_path": "app_mapper.py",
      "parent": "app_mapper",
      "dependencies": [],
      "dependents": [
        "app_mapper"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Get the full attribute name."
    },
    "app_mapper._detect_component_role": {
      "name": "app_mapper._detect_component_role",
      "type": "function",
      "service": "app_mapper.py",
      "file_path": "app_mapper.py",
      "parent": "app_mapper",
      "dependencies": [],
      "dependents": [
        "app_mapper"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Detect the role of a component based on its content and docstring."
    },
    "app_mapper._detect_templates": {
      "name": "app_mapper._detect_templates",
      "type": "function",
      "service": "app_mapper.py",
      "file_path": "app_mapper.py",
      "parent": "app_mapper",
      "dependencies": [],
      "dependents": [
        "app_mapper"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Detect templates and their usage."
    },
    "app_mapper._extract_template_variables": {
      "name": "app_mapper._extract_template_variables",
      "type": "function",
      "service": "app_mapper.py",
      "file_path": "app_mapper.py",
      "parent": "app_mapper",
      "dependencies": [],
      "dependents": [
        "app_mapper"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Extract variables from a template."
    },
    "app_mapper._detect_event_flows": {
      "name": "app_mapper._detect_event_flows",
      "type": "function",
      "service": "app_mapper.py",
      "file_path": "app_mapper.py",
      "parent": "app_mapper",
      "dependencies": [],
      "dependents": [
        "app_mapper"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Detect event flows between components."
    },
    "app_mapper.analyze_infra_file": {
      "name": "app_mapper.analyze_infra_file",
      "type": "function",
      "service": "app_mapper.py",
      "file_path": "app_mapper.py",
      "parent": "app_mapper",
      "dependencies": [],
      "dependents": [
        "app_mapper"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Analyze an infrastructure file to extract relevant information."
    },
    "app_mapper.analyze_codebase": {
      "name": "app_mapper.analyze_codebase",
      "type": "function",
      "service": "app_mapper.py",
      "file_path": "app_mapper.py",
      "parent": "app_mapper",
      "dependencies": [],
      "dependents": [
        "app_mapper"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Analyze the entire codebase."
    },
    "app_mapper._process_relationships": {
      "name": "app_mapper._process_relationships",
      "type": "function",
      "service": "app_mapper.py",
      "file_path": "app_mapper.py",
      "parent": "app_mapper",
      "dependencies": [],
      "dependents": [
        "app_mapper"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Process and complete relationships between components."
    },
    "app_mapper._organize_by_service": {
      "name": "app_mapper._organize_by_service",
      "type": "function",
      "service": "app_mapper.py",
      "file_path": "app_mapper.py",
      "parent": "app_mapper",
      "dependencies": [],
      "dependents": [
        "app_mapper"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Organize components, event_flows, templates, and infra files by service."
    },
    "app_mapper.generate_application_map": {
      "name": "app_mapper.generate_application_map",
      "type": "function",
      "service": "app_mapper.py",
      "file_path": "app_mapper.py",
      "parent": "app_mapper",
      "dependencies": [],
      "dependents": [
        "app_mapper"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Generate a comprehensive application map."
    },
    "app_mapper.save_output": {
      "name": "app_mapper.save_output",
      "type": "function",
      "service": "app_mapper.py",
      "file_path": "app_mapper.py",
      "parent": "app_mapper",
      "dependencies": [],
      "dependents": [
        "app_mapper"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Save the application map to the specified format."
    },
    "app_mapper._save_markdown": {
      "name": "app_mapper._save_markdown",
      "type": "function",
      "service": "app_mapper.py",
      "file_path": "app_mapper.py",
      "parent": "app_mapper",
      "dependencies": [],
      "dependents": [
        "app_mapper"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Save the application map as a Markdown report."
    },
    "app_mapper._save_graphml": {
      "name": "app_mapper._save_graphml",
      "type": "function",
      "service": "app_mapper.py",
      "file_path": "app_mapper.py",
      "parent": "app_mapper",
      "dependencies": [],
      "dependents": [
        "app_mapper"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Save the application map as a GraphML file for network visualization tools."
    },
    "project_scripts.registration": {
      "name": "project_scripts.registration",
      "type": "module",
      "service": "project_scripts",
      "file_path": "project_scripts/registration.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Component registration script for the Program Synthesis System."
    },
    "project_scripts.registration.register_components": {
      "name": "project_scripts.registration.register_components",
      "type": "function",
      "service": "project_scripts",
      "file_path": "project_scripts/registration.py",
      "parent": "project_scripts.registration",
      "dependencies": [],
      "dependents": [
        "project_scripts.registration"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Register all services in the component factory."
    },
    "project_scripts.mistral": {
      "name": "project_scripts.mistral",
      "type": "module",
      "service": "project_scripts",
      "file_path": "project_scripts/mistral.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "project_scripts.deepseek": {
      "name": "project_scripts.deepseek",
      "type": "module",
      "service": "project_scripts",
      "file_path": "project_scripts/deepseek.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "infra.__init__": {
      "name": "infra.__init__",
      "type": "module",
      "service": "infra",
      "file_path": "infra/__init__.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "tests.__init__": {
      "name": "tests.__init__",
      "type": "module",
      "service": "tests",
      "file_path": "tests/__init__.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.__init__": {
      "name": "src.__init__",
      "type": "module",
      "service": "src",
      "file_path": "src/__init__.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.api_gateway.__init__": {
      "name": "src.api_gateway.__init__",
      "type": "module",
      "service": "src",
      "file_path": "src/api_gateway/__init__.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.orchestration.system": {
      "name": "src.orchestration.system",
      "type": "module",
      "service": "src",
      "file_path": "src/orchestration/system.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.orchestration.system.SynthesisSystem": {
      "name": "src.orchestration.system.SynthesisSystem",
      "type": "class",
      "service": "src",
      "file_path": "src/orchestration/system.py",
      "parent": "src.orchestration.system",
      "dependencies": [],
      "dependents": [
        "src.orchestration.system"
      ],
      "methods": [
        "__init__",
        "_setup_logger",
        "_load_config",
        "_initialize_component",
        "generate_from_spec",
        "_compute_cache_key"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Core system for program synthesis with statistical verification."
    },
    "src.orchestration.system.__init__": {
      "name": "src.orchestration.system.__init__",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/system.py",
      "parent": "src.orchestration.system",
      "dependencies": [],
      "dependents": [
        "src.orchestration.system"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize the synthesis system."
    },
    "src.orchestration.system._setup_logger": {
      "name": "src.orchestration.system._setup_logger",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/system.py",
      "parent": "src.orchestration.system",
      "dependencies": [],
      "dependents": [
        "src.orchestration.system"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Set up logging for the synthesis system."
    },
    "src.orchestration.system._load_config": {
      "name": "src.orchestration.system._load_config",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/system.py",
      "parent": "src.orchestration.system",
      "dependencies": [],
      "dependents": [
        "src.orchestration.system"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Load the configuration from YAML file."
    },
    "src.orchestration.system._initialize_component": {
      "name": "src.orchestration.system._initialize_component",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/system.py",
      "parent": "src.orchestration.system",
      "dependencies": [],
      "dependents": [
        "src.orchestration.system"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize a system component based on configuration."
    },
    "src.orchestration.system.generate_from_spec": {
      "name": "src.orchestration.system.generate_from_spec",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/system.py",
      "parent": "src.orchestration.system",
      "dependencies": [],
      "dependents": [
        "src.orchestration.system"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Generate code from a specification with verification."
    },
    "src.orchestration.system._compute_cache_key": {
      "name": "src.orchestration.system._compute_cache_key",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/system.py",
      "parent": "src.orchestration.system",
      "dependencies": [],
      "dependents": [
        "src.orchestration.system"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Compute a cache key for the knowledge base."
    },
    "src.orchestration.program_synthesizor": {
      "name": "src.orchestration.program_synthesizor",
      "type": "module",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Program Synthesis with Statistical Verification System"
    },
    "src.orchestration.program_synthesizor.VerificationResult": {
      "name": "src.orchestration.program_synthesizor.VerificationResult",
      "type": "class",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.orchestration.program_synthesizor.SynthesisSystem": {
      "name": "src.orchestration.program_synthesizor.SynthesisSystem",
      "type": "class",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [
        "__init__",
        "_setup_logger",
        "_load_config",
        "_initialize_component",
        "_initialize_component",
        "generate_from_spec",
        "_compute_cache_key"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Core system for program synthesis with statistical verification."
    },
    "src.orchestration.program_synthesizor.FormalSpecification": {
      "name": "src.orchestration.program_synthesizor.FormalSpecification",
      "type": "class",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [
        "__init__"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Represents a formal specification parsed from requirements."
    },
    "src.orchestration.program_synthesizor.SynthesisResult": {
      "name": "src.orchestration.program_synthesizor.SynthesisResult",
      "type": "class",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [
        "__init__"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Result of the synthesis process."
    },
    "src.orchestration.program_synthesizor.VerificationReport": {
      "name": "src.orchestration.program_synthesizor.VerificationReport",
      "type": "class",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [
        "__init__"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Report from the verification process."
    },
    "src.orchestration.program_synthesizor.SMTSpecificationParser": {
      "name": "src.orchestration.program_synthesizor.SMTSpecificationParser",
      "type": "class",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [
        "__init__",
        "parse"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Parses specifications into SMT constraints."
    },
    "src.orchestration.program_synthesizor.SketchSynthesisEngine": {
      "name": "src.orchestration.program_synthesizor.SketchSynthesisEngine",
      "type": "class",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [
        "__init__",
        "synthesize"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Uses the SKETCH synthesizer to generate programs."
    },
    "src.orchestration.program_synthesizor.PostgresVectorKnowledgeBase": {
      "name": "src.orchestration.program_synthesizor.PostgresVectorKnowledgeBase",
      "type": "class",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [
        "__init__",
        "get",
        "store",
        "find_similar"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Knowledge base using PostgreSQL with vector embeddings for semantic matching."
    },
    "src.orchestration.program_synthesizor.BaseVerifier": {
      "name": "src.orchestration.program_synthesizor.BaseVerifier",
      "type": "class",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [
        "verify"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Base class for all verifiers."
    },
    "src.orchestration.program_synthesizor.SimplePropertyTester": {
      "name": "src.orchestration.program_synthesizor.SimplePropertyTester",
      "type": "class",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [
        "verify"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Fast but less thorough verifier that checks basic properties."
    },
    "src.orchestration.program_synthesizor.BoundedModelChecker": {
      "name": "src.orchestration.program_synthesizor.BoundedModelChecker",
      "type": "class",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [
        "verify"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Medium verifier that does bounded model checking."
    },
    "src.orchestration.program_synthesizor.FormalVerifier": {
      "name": "src.orchestration.program_synthesizor.FormalVerifier",
      "type": "class",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [
        "verify"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Thorough verifier that uses formal methods."
    },
    "src.orchestration.program_synthesizor.IncrementalSynthesizer": {
      "name": "src.orchestration.program_synthesizor.IncrementalSynthesizer",
      "type": "class",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Handles breaking specifications into smaller parts for synthesis."
    },
    "src.orchestration.program_synthesizor.__init__": {
      "name": "src.orchestration.program_synthesizor.__init__",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor",
        "src.orchestration.program_synthesizor",
        "src.orchestration.program_synthesizor",
        "src.orchestration.program_synthesizor",
        "src.orchestration.program_synthesizor",
        "src.orchestration.program_synthesizor",
        "src.orchestration.program_synthesizor",
        "src.orchestration.program_synthesizor",
        "src.orchestration.program_synthesizor",
        "src.orchestration.program_synthesizor",
        "src.orchestration.program_synthesizor",
        "src.orchestration.program_synthesizor",
        "src.orchestration.program_synthesizor",
        "src.orchestration.program_synthesizor",
        "src.orchestration.program_synthesizor"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.orchestration.program_synthesizor.decompose": {
      "name": "src.orchestration.program_synthesizor.decompose",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Break a specification into smaller, independently synthesizable parts."
    },
    "src.orchestration.program_synthesizor.combine": {
      "name": "src.orchestration.program_synthesizor.combine",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Combine independently synthesized services into a complete solution."
    },
    "src.orchestration.program_synthesizor.LanguageInteroperability": {
      "name": "src.orchestration.program_synthesizor.LanguageInteroperability",
      "type": "class",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [
        "__init__",
        "generate_for_language"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Handles cross-language code generation from internal AST representation."
    },
    "src.orchestration.program_synthesizor.MetaLearningSystem": {
      "name": "src.orchestration.program_synthesizor.MetaLearningSystem",
      "type": "class",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [
        "__init__",
        "record_success",
        "record_failure",
        "_determine_problem_type"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Learns which synthesis strategies work best for different problem types."
    },
    "src.orchestration.program_synthesizor.ConstraintRelaxer": {
      "name": "src.orchestration.program_synthesizor.ConstraintRelaxer",
      "type": "class",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [
        "__init__",
        "relax_constraints",
        "_identify_violated_constraints",
        "_choose_constraint_to_relax",
        "_relax_constraint"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Systematically relaxes constraints when synthesis fails."
    },
    "src.orchestration.program_synthesizor.SymbolicExecutor": {
      "name": "src.orchestration.program_synthesizor.SymbolicExecutor",
      "type": "class",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [
        "__init__",
        "generate_tests",
        "execute_tests"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Generates and runs symbolic execution tests to find edge cases."
    },
    "src.orchestration.program_synthesizor.InterfaceContractor": {
      "name": "src.orchestration.program_synthesizor.InterfaceContractor",
      "type": "class",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [
        "__init__",
        "verify_interfaces"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Verifies that code satisfies interface contracts."
    },
    "src.orchestration.program_synthesizor._setup_logger": {
      "name": "src.orchestration.program_synthesizor._setup_logger",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Set up logging for the synthesis system."
    },
    "src.orchestration.program_synthesizor._load_config": {
      "name": "src.orchestration.program_synthesizor._load_config",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Load the configuration from YAML file."
    },
    "src.orchestration.program_synthesizor._initialize_component": {
      "name": "src.orchestration.program_synthesizor._initialize_component",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor",
        "src.orchestration.program_synthesizor"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize a system component based on configuration."
    },
    "src.orchestration.program_synthesizor.generate_from_spec": {
      "name": "src.orchestration.program_synthesizor.generate_from_spec",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Generate code from a specification with verification."
    },
    "src.orchestration.program_synthesizor._compute_cache_key": {
      "name": "src.orchestration.program_synthesizor._compute_cache_key",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Compute a cache key for the knowledge base."
    },
    "src.orchestration.program_synthesizor.parse": {
      "name": "src.orchestration.program_synthesizor.parse",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Parse the specification into a formal model."
    },
    "src.orchestration.program_synthesizor.synthesize": {
      "name": "src.orchestration.program_synthesizor.synthesize",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Synthesize a program from the formal specification."
    },
    "src.orchestration.program_synthesizor.get": {
      "name": "src.orchestration.program_synthesizor.get",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Get cached result by key or by semantic similarity."
    },
    "src.orchestration.program_synthesizor.store": {
      "name": "src.orchestration.program_synthesizor.store",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Store a result with its key and vector embedding."
    },
    "src.orchestration.program_synthesizor.find_similar": {
      "name": "src.orchestration.program_synthesizor.find_similar",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Find similar specifications above similarity threshold."
    },
    "src.orchestration.program_synthesizor.verify": {
      "name": "src.orchestration.program_synthesizor.verify",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor",
        "src.orchestration.program_synthesizor",
        "src.orchestration.program_synthesizor",
        "src.orchestration.program_synthesizor"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.orchestration.program_synthesizor.generate_for_language": {
      "name": "src.orchestration.program_synthesizor.generate_for_language",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Generate code in the target language from the internal representation."
    },
    "src.orchestration.program_synthesizor.record_success": {
      "name": "src.orchestration.program_synthesizor.record_success",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Record a successful synthesis with the given strategy."
    },
    "src.orchestration.program_synthesizor.record_failure": {
      "name": "src.orchestration.program_synthesizor.record_failure",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Record a failed synthesis with the given strategy."
    },
    "src.orchestration.program_synthesizor._determine_problem_type": {
      "name": "src.orchestration.program_synthesizor._determine_problem_type",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Determine the type of problem based on the specification and context."
    },
    "src.orchestration.program_synthesizor.relax_constraints": {
      "name": "src.orchestration.program_synthesizor.relax_constraints",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Relax constraints based on verification failures."
    },
    "src.orchestration.program_synthesizor._identify_violated_constraints": {
      "name": "src.orchestration.program_synthesizor._identify_violated_constraints",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Identify constraints violated by a counterexample."
    },
    "src.orchestration.program_synthesizor._choose_constraint_to_relax": {
      "name": "src.orchestration.program_synthesizor._choose_constraint_to_relax",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Choose which constraint to relax based on importance/priority."
    },
    "src.orchestration.program_synthesizor._relax_constraint": {
      "name": "src.orchestration.program_synthesizor._relax_constraint",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Relax a specific constraint in the specification."
    },
    "src.orchestration.program_synthesizor.generate_tests": {
      "name": "src.orchestration.program_synthesizor.generate_tests",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Generate symbolic execution test cases from the specification."
    },
    "src.orchestration.program_synthesizor.execute_tests": {
      "name": "src.orchestration.program_synthesizor.execute_tests",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Execute symbolic tests against the synthesized program."
    },
    "src.orchestration.program_synthesizor.verify_interfaces": {
      "name": "src.orchestration.program_synthesizor.verify_interfaces",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Verify that generated code satisfies interface contracts."
    },
    "src.orchestration.program_synthesizor.Result": {
      "name": "src.orchestration.program_synthesizor.Result",
      "type": "class",
      "service": "src",
      "file_path": "src/orchestration/program_synthesizor.py",
      "parent": "src.orchestration.program_synthesizor",
      "dependencies": [],
      "dependents": [
        "src.orchestration.program_synthesizor",
        "src.orchestration.program_synthesizor"
      ],
      "methods": [
        "__init__"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.orchestration.__init__": {
      "name": "src.orchestration.__init__",
      "type": "module",
      "service": "src",
      "file_path": "src/orchestration/__init__.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.orchestration.orchestration": {
      "name": "src.orchestration.orchestration",
      "type": "module",
      "service": "src",
      "file_path": "src/orchestration/orchestration.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Code Generation Orchestration System"
    },
    "src.orchestration.orchestration.CodeGenPhase": {
      "name": "src.orchestration.orchestration.CodeGenPhase",
      "type": "class",
      "service": "src",
      "file_path": "src/orchestration/orchestration.py",
      "parent": "src.orchestration.orchestration",
      "dependencies": [],
      "dependents": [
        "src.orchestration.orchestration"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Orchestration phases for the code generation system"
    },
    "src.orchestration.orchestration.CodeGenOrchestrator": {
      "name": "src.orchestration.orchestration.CodeGenOrchestrator",
      "type": "class",
      "service": "src",
      "file_path": "src/orchestration/orchestration.py",
      "parent": "src.orchestration.orchestration",
      "dependencies": [],
      "dependents": [
        "src.orchestration.orchestration"
      ],
      "methods": [
        "__init__",
        "_initialize_components",
        "_register_event_handlers",
        "_generate_simulated_code",
        "_check_syntax"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Orchestrates the code generation pipeline using the event system."
    },
    "src.orchestration.orchestration.__init__": {
      "name": "src.orchestration.orchestration.__init__",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/orchestration.py",
      "parent": "src.orchestration.orchestration",
      "dependencies": [],
      "dependents": [
        "src.orchestration.orchestration"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize the code generation orchestrator."
    },
    "src.orchestration.orchestration._initialize_components": {
      "name": "src.orchestration.orchestration._initialize_components",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/orchestration.py",
      "parent": "src.orchestration.orchestration",
      "dependencies": [],
      "dependents": [
        "src.orchestration.orchestration"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize event system components."
    },
    "src.orchestration.orchestration._register_event_handlers": {
      "name": "src.orchestration.orchestration._register_event_handlers",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/orchestration.py",
      "parent": "src.orchestration.orchestration",
      "dependencies": [],
      "dependents": [
        "src.orchestration.orchestration"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Register handlers for different event types."
    },
    "src.orchestration.orchestration._generate_simulated_code": {
      "name": "src.orchestration.orchestration._generate_simulated_code",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/orchestration.py",
      "parent": "src.orchestration.orchestration",
      "dependencies": [],
      "dependents": [
        "src.orchestration.orchestration"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Generate simulated code for demonstration purposes."
    },
    "src.orchestration.orchestration._check_syntax": {
      "name": "src.orchestration.orchestration._check_syntax",
      "type": "function",
      "service": "src",
      "file_path": "src/orchestration/orchestration.py",
      "parent": "src.orchestration.orchestration",
      "dependencies": [],
      "dependents": [
        "src.orchestration.orchestration"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Check syntax of generated code."
    },
    "src.pulsar.__init__": {
      "name": "src.pulsar.__init__",
      "type": "module",
      "service": "src",
      "file_path": "src/pulsar/__init__.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.__init__": {
      "name": "src.services.__init__",
      "type": "module",
      "service": "src",
      "file_path": "src/services/__init__.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.project_manager.__init__": {
      "name": "src.services.project_manager.__init__",
      "type": "module",
      "service": "src",
      "file_path": "src/services/project_manager/__init__.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.llm_volume.__init__": {
      "name": "src.services.llm_volume.__init__",
      "type": "module",
      "service": "src",
      "file_path": "src/services/llm_volume/__init__.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.feedback_collector.__init__": {
      "name": "src.services.feedback_collector.__init__",
      "type": "module",
      "service": "src",
      "file_path": "src/services/feedback_collector/__init__.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.aggregators.__init__": {
      "name": "src.services.aggregators.__init__",
      "type": "module",
      "service": "src",
      "file_path": "src/services/aggregators/__init__.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.spec_registry.__init__": {
      "name": "src.services.spec_registry.__init__",
      "type": "module",
      "service": "src",
      "file_path": "src/services/spec_registry/__init__.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.version_manager.version_manager": {
      "name": "src.services.version_manager.version_manager",
      "type": "module",
      "service": "src",
      "file_path": "src/services/version_manager/version_manager.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Version manager component for the Program Synthesis System."
    },
    "src.services.version_manager.version_manager.VersionManager": {
      "name": "src.services.version_manager.version_manager.VersionManager",
      "type": "class",
      "service": "src",
      "file_path": "src/services/version_manager/version_manager.py",
      "parent": "src.services.version_manager.version_manager",
      "dependencies": [],
      "dependents": [
        "src.services.version_manager.version_manager"
      ],
      "methods": [
        "__init__",
        "_initialize_storage",
        "_load_version_index",
        "_save_version_index",
        "record_new_version",
        "record_usage",
        "find_prior_versions",
        "get_version_history",
        "get_version_details",
        "compare_versions",
        "_compute_fingerprint",
        "_find_related_versions",
        "_compute_text_similarity",
        "_compute_text_diff",
        "_compare_metadata",
        "_calculate_version_similarity",
        "_prune_old_versions",
        "_remove_version",
        "get_version_statistics"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Manages versions of specifications and synthesis results."
    },
    "src.services.version_manager.version_manager.__init__": {
      "name": "src.services.version_manager.version_manager.__init__",
      "type": "function",
      "service": "src",
      "file_path": "src/services/version_manager/version_manager.py",
      "parent": "src.services.version_manager.version_manager",
      "dependencies": [],
      "dependents": [
        "src.services.version_manager.version_manager"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize the version manager with storage parameters."
    },
    "src.services.version_manager.version_manager._initialize_storage": {
      "name": "src.services.version_manager.version_manager._initialize_storage",
      "type": "function",
      "service": "src",
      "file_path": "src/services/version_manager/version_manager.py",
      "parent": "src.services.version_manager.version_manager",
      "dependencies": [],
      "dependents": [
        "src.services.version_manager.version_manager"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize storage directories."
    },
    "src.services.version_manager.version_manager._load_version_index": {
      "name": "src.services.version_manager.version_manager._load_version_index",
      "type": "function",
      "service": "src",
      "file_path": "src/services/version_manager/version_manager.py",
      "parent": "src.services.version_manager.version_manager",
      "dependencies": [],
      "dependents": [
        "src.services.version_manager.version_manager"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Load the version index from storage."
    },
    "src.services.version_manager.version_manager._save_version_index": {
      "name": "src.services.version_manager.version_manager._save_version_index",
      "type": "function",
      "service": "src",
      "file_path": "src/services/version_manager/version_manager.py",
      "parent": "src.services.version_manager.version_manager",
      "dependencies": [],
      "dependents": [
        "src.services.version_manager.version_manager"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Save the version index to storage."
    },
    "src.services.version_manager.version_manager.record_new_version": {
      "name": "src.services.version_manager.version_manager.record_new_version",
      "type": "function",
      "service": "src",
      "file_path": "src/services/version_manager/version_manager.py",
      "parent": "src.services.version_manager.version_manager",
      "dependencies": [],
      "dependents": [
        "src.services.version_manager.version_manager"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Record a new version of a specification and its synthesis result."
    },
    "src.services.version_manager.version_manager.record_usage": {
      "name": "src.services.version_manager.version_manager.record_usage",
      "type": "function",
      "service": "src",
      "file_path": "src/services/version_manager/version_manager.py",
      "parent": "src.services.version_manager.version_manager",
      "dependencies": [],
      "dependents": [
        "src.services.version_manager.version_manager"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Record usage of an existing version."
    },
    "src.services.version_manager.version_manager.find_prior_versions": {
      "name": "src.services.version_manager.version_manager.find_prior_versions",
      "type": "function",
      "service": "src",
      "file_path": "src/services/version_manager/version_manager.py",
      "parent": "src.services.version_manager.version_manager",
      "dependencies": [],
      "dependents": [
        "src.services.version_manager.version_manager"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Find prior versions related to a specification."
    },
    "src.services.version_manager.version_manager.get_version_history": {
      "name": "src.services.version_manager.version_manager.get_version_history",
      "type": "function",
      "service": "src",
      "file_path": "src/services/version_manager/version_manager.py",
      "parent": "src.services.version_manager.version_manager",
      "dependencies": [],
      "dependents": [
        "src.services.version_manager.version_manager"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Get the history of related versions for a specific version."
    },
    "src.services.version_manager.version_manager.get_version_details": {
      "name": "src.services.version_manager.version_manager.get_version_details",
      "type": "function",
      "service": "src",
      "file_path": "src/services/version_manager/version_manager.py",
      "parent": "src.services.version_manager.version_manager",
      "dependencies": [],
      "dependents": [
        "src.services.version_manager.version_manager"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Get detailed information about a specific version."
    },
    "src.services.version_manager.version_manager.compare_versions": {
      "name": "src.services.version_manager.version_manager.compare_versions",
      "type": "function",
      "service": "src",
      "file_path": "src/services/version_manager/version_manager.py",
      "parent": "src.services.version_manager.version_manager",
      "dependencies": [],
      "dependents": [
        "src.services.version_manager.version_manager"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Compare two versions and identify differences."
    },
    "src.services.version_manager.version_manager._compute_fingerprint": {
      "name": "src.services.version_manager.version_manager._compute_fingerprint",
      "type": "function",
      "service": "src",
      "file_path": "src/services/version_manager/version_manager.py",
      "parent": "src.services.version_manager.version_manager",
      "dependencies": [],
      "dependents": [
        "src.services.version_manager.version_manager"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Compute a fingerprint for a text to enable quick similarity checks."
    },
    "src.services.version_manager.version_manager._find_related_versions": {
      "name": "src.services.version_manager.version_manager._find_related_versions",
      "type": "function",
      "service": "src",
      "file_path": "src/services/version_manager/version_manager.py",
      "parent": "src.services.version_manager.version_manager",
      "dependencies": [],
      "dependents": [
        "src.services.version_manager.version_manager"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Find versions related to a specification based on similarity."
    },
    "src.services.version_manager.version_manager._compute_text_similarity": {
      "name": "src.services.version_manager.version_manager._compute_text_similarity",
      "type": "function",
      "service": "src",
      "file_path": "src/services/version_manager/version_manager.py",
      "parent": "src.services.version_manager.version_manager",
      "dependencies": [],
      "dependents": [
        "src.services.version_manager.version_manager"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Compute similarity between two text strings."
    },
    "src.services.version_manager.version_manager._compute_text_diff": {
      "name": "src.services.version_manager.version_manager._compute_text_diff",
      "type": "function",
      "service": "src",
      "file_path": "src/services/version_manager/version_manager.py",
      "parent": "src.services.version_manager.version_manager",
      "dependencies": [],
      "dependents": [
        "src.services.version_manager.version_manager"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Compute differences between two text strings."
    },
    "src.services.version_manager.version_manager._compare_metadata": {
      "name": "src.services.version_manager.version_manager._compare_metadata",
      "type": "function",
      "service": "src",
      "file_path": "src/services/version_manager/version_manager.py",
      "parent": "src.services.version_manager.version_manager",
      "dependencies": [],
      "dependents": [
        "src.services.version_manager.version_manager"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Compare two metadata dictionaries and identify differences."
    },
    "src.services.version_manager.version_manager._calculate_version_similarity": {
      "name": "src.services.version_manager.version_manager._calculate_version_similarity",
      "type": "function",
      "service": "src",
      "file_path": "src/services/version_manager/version_manager.py",
      "parent": "src.services.version_manager.version_manager",
      "dependencies": [],
      "dependents": [
        "src.services.version_manager.version_manager"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Calculate overall similarity between two versions."
    },
    "src.services.version_manager.version_manager._prune_old_versions": {
      "name": "src.services.version_manager.version_manager._prune_old_versions",
      "type": "function",
      "service": "src",
      "file_path": "src/services/version_manager/version_manager.py",
      "parent": "src.services.version_manager.version_manager",
      "dependencies": [],
      "dependents": [
        "src.services.version_manager.version_manager"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Prune old versions if the index exceeds the maximum size."
    },
    "src.services.version_manager.version_manager._remove_version": {
      "name": "src.services.version_manager.version_manager._remove_version",
      "type": "function",
      "service": "src",
      "file_path": "src/services/version_manager/version_manager.py",
      "parent": "src.services.version_manager.version_manager",
      "dependencies": [],
      "dependents": [
        "src.services.version_manager.version_manager"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Remove a version from storage."
    },
    "src.services.version_manager.version_manager.get_version_statistics": {
      "name": "src.services.version_manager.version_manager.get_version_statistics",
      "type": "function",
      "service": "src",
      "file_path": "src/services/version_manager/version_manager.py",
      "parent": "src.services.version_manager.version_manager",
      "dependencies": [],
      "dependents": [
        "src.services.version_manager.version_manager"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Get statistics about version history."
    },
    "src.services.version_manager.__init__": {
      "name": "src.services.version_manager.__init__",
      "type": "module",
      "service": "src",
      "file_path": "src/services/version_manager/__init__.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.agents.__init__": {
      "name": "src.services.agents.__init__",
      "type": "module",
      "service": "src",
      "file_path": "src/services/agents/__init__.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.shared.__init__": {
      "name": "src.services.shared.__init__",
      "type": "module",
      "service": "src",
      "file_path": "src/services/shared/__init__.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Shared package for common models, utilities, and services."
    },
    "src.services.shared.setup": {
      "name": "src.services.shared.setup",
      "type": "module",
      "service": "src",
      "file_path": "src/services/shared/setup.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.component_factory.component_factory": {
      "name": "src.services.component_factory.component_factory",
      "type": "module",
      "service": "src",
      "file_path": "src/services/component_factory/component_factory.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Component factory for the program synthesis system."
    },
    "src.services.component_factory.component_factory.ComponentFactory": {
      "name": "src.services.component_factory.component_factory.ComponentFactory",
      "type": "class",
      "service": "src",
      "file_path": "src/services/component_factory/component_factory.py",
      "parent": "src.services.component_factory.component_factory",
      "dependencies": [],
      "dependents": [
        "src.services.component_factory.component_factory"
      ],
      "methods": [
        "__init__",
        "_register_default_services",
        "register_component",
        "create_component",
        "create_from_config"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Factory for creating and configuring system services."
    },
    "src.services.component_factory.component_factory.__init__": {
      "name": "src.services.component_factory.component_factory.__init__",
      "type": "function",
      "service": "src",
      "file_path": "src/services/component_factory/component_factory.py",
      "parent": "src.services.component_factory.component_factory",
      "dependencies": [],
      "dependents": [
        "src.services.component_factory.component_factory"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize the component factory."
    },
    "src.services.component_factory.component_factory._register_default_services": {
      "name": "src.services.component_factory.component_factory._register_default_services",
      "type": "function",
      "service": "src",
      "file_path": "src/services/component_factory/component_factory.py",
      "parent": "src.services.component_factory.component_factory",
      "dependencies": [],
      "dependents": [
        "src.services.component_factory.component_factory"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Register default component implementations."
    },
    "src.services.component_factory.component_factory.register_component": {
      "name": "src.services.component_factory.component_factory.register_component",
      "type": "function",
      "service": "src",
      "file_path": "src/services/component_factory/component_factory.py",
      "parent": "src.services.component_factory.component_factory",
      "dependencies": [],
      "dependents": [
        "src.services.component_factory.component_factory"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Register a component implementation."
    },
    "src.services.component_factory.component_factory.create_component": {
      "name": "src.services.component_factory.component_factory.create_component",
      "type": "function",
      "service": "src",
      "file_path": "src/services/component_factory/component_factory.py",
      "parent": "src.services.component_factory.component_factory",
      "dependencies": [],
      "dependents": [
        "src.services.component_factory.component_factory"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Create a component of the specified type with the given implementation."
    },
    "src.services.component_factory.component_factory.create_from_config": {
      "name": "src.services.component_factory.component_factory.create_from_config",
      "type": "function",
      "service": "src",
      "file_path": "src/services/component_factory/component_factory.py",
      "parent": "src.services.component_factory.component_factory",
      "dependencies": [],
      "dependents": [
        "src.services.component_factory.component_factory"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Create services from a configuration dictionary."
    },
    "src.services.component_factory.__init__": {
      "name": "src.services.component_factory.__init__",
      "type": "module",
      "service": "src",
      "file_path": "src/services/component_factory/__init__.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.incremental_synthesis.incremental_synthesis": {
      "name": "src.services.incremental_synthesis.incremental_synthesis",
      "type": "module",
      "service": "src",
      "file_path": "src/services/incremental_synthesis/incremental_synthesis.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Incremental synthesis component for the Program Synthesis System."
    },
    "src.services.incremental_synthesis.incremental_synthesis.IncrementalSynthesis": {
      "name": "src.services.incremental_synthesis.incremental_synthesis.IncrementalSynthesis",
      "type": "class",
      "service": "src",
      "file_path": "src/services/incremental_synthesis/incremental_synthesis.py",
      "parent": "src.services.incremental_synthesis.incremental_synthesis",
      "dependencies": [],
      "dependents": [
        "src.services.incremental_synthesis.incremental_synthesis"
      ],
      "methods": [
        "__init__",
        "decompose",
        "combine",
        "_decompose_by_dependencies",
        "_extract_variable_dependencies",
        "_extract_variables_from_constraint",
        "_find_connected_components",
        "_create_component_spec",
        "_decompose_by_semantic_clustering",
        "_group_constraints_by_type",
        "_decompose_by_partitioning",
        "_merge_components",
        "_calculate_component_similarity",
        "_merge_two_components",
        "_combine_sequential",
        "_combine_parallel",
        "_combine_conditional",
        "_get_component_body",
        "_get_function_arguments",
        "_compute_cache_key"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Implements incremental synthesis strategies for complex specifications."
    },
    "src.services.incremental_synthesis.incremental_synthesis.__init__": {
      "name": "src.services.incremental_synthesis.incremental_synthesis.__init__",
      "type": "function",
      "service": "src",
      "file_path": "src/services/incremental_synthesis/incremental_synthesis.py",
      "parent": "src.services.incremental_synthesis.incremental_synthesis",
      "dependencies": [],
      "dependents": [
        "src.services.incremental_synthesis.incremental_synthesis"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize the incremental synthesis component."
    },
    "src.services.incremental_synthesis.incremental_synthesis.decompose": {
      "name": "src.services.incremental_synthesis.incremental_synthesis.decompose",
      "type": "function",
      "service": "src",
      "file_path": "src/services/incremental_synthesis/incremental_synthesis.py",
      "parent": "src.services.incremental_synthesis.incremental_synthesis",
      "dependencies": [],
      "dependents": [
        "src.services.incremental_synthesis.incremental_synthesis"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Decompose a formal specification into smaller services."
    },
    "src.services.incremental_synthesis.incremental_synthesis.combine": {
      "name": "src.services.incremental_synthesis.incremental_synthesis.combine",
      "type": "function",
      "service": "src",
      "file_path": "src/services/incremental_synthesis/incremental_synthesis.py",
      "parent": "src.services.incremental_synthesis.incremental_synthesis",
      "dependencies": [],
      "dependents": [
        "src.services.incremental_synthesis.incremental_synthesis"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Combine synthesis results from services into a final solution."
    },
    "src.services.incremental_synthesis.incremental_synthesis._decompose_by_dependencies": {
      "name": "src.services.incremental_synthesis.incremental_synthesis._decompose_by_dependencies",
      "type": "function",
      "service": "src",
      "file_path": "src/services/incremental_synthesis/incremental_synthesis.py",
      "parent": "src.services.incremental_synthesis.incremental_synthesis",
      "dependencies": [],
      "dependents": [
        "src.services.incremental_synthesis.incremental_synthesis"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Decompose a specification by analyzing variable dependencies."
    },
    "src.services.incremental_synthesis.incremental_synthesis._extract_variable_dependencies": {
      "name": "src.services.incremental_synthesis.incremental_synthesis._extract_variable_dependencies",
      "type": "function",
      "service": "src",
      "file_path": "src/services/incremental_synthesis/incremental_synthesis.py",
      "parent": "src.services.incremental_synthesis.incremental_synthesis",
      "dependencies": [],
      "dependents": [
        "src.services.incremental_synthesis.incremental_synthesis"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Extract dependencies between variables in constraints."
    },
    "src.services.incremental_synthesis.incremental_synthesis._extract_variables_from_constraint": {
      "name": "src.services.incremental_synthesis.incremental_synthesis._extract_variables_from_constraint",
      "type": "function",
      "service": "src",
      "file_path": "src/services/incremental_synthesis/incremental_synthesis.py",
      "parent": "src.services.incremental_synthesis.incremental_synthesis",
      "dependencies": [],
      "dependents": [
        "src.services.incremental_synthesis.incremental_synthesis"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Extract variables used in a constraint expression."
    },
    "src.services.incremental_synthesis.incremental_synthesis._find_connected_components": {
      "name": "src.services.incremental_synthesis.incremental_synthesis._find_connected_components",
      "type": "function",
      "service": "src",
      "file_path": "src/services/incremental_synthesis/incremental_synthesis.py",
      "parent": "src.services.incremental_synthesis.incremental_synthesis",
      "dependencies": [],
      "dependents": [
        "src.services.incremental_synthesis.incremental_synthesis"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Find connected services in the dependency graph."
    },
    "src.services.incremental_synthesis.incremental_synthesis._create_component_spec": {
      "name": "src.services.incremental_synthesis.incremental_synthesis._create_component_spec",
      "type": "function",
      "service": "src",
      "file_path": "src/services/incremental_synthesis/incremental_synthesis.py",
      "parent": "src.services.incremental_synthesis.incremental_synthesis",
      "dependencies": [],
      "dependents": [
        "src.services.incremental_synthesis.incremental_synthesis"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Create a component specification for the given variables."
    },
    "src.services.incremental_synthesis.incremental_synthesis._decompose_by_semantic_clustering": {
      "name": "src.services.incremental_synthesis.incremental_synthesis._decompose_by_semantic_clustering",
      "type": "function",
      "service": "src",
      "file_path": "src/services/incremental_synthesis/incremental_synthesis.py",
      "parent": "src.services.incremental_synthesis.incremental_synthesis",
      "dependencies": [],
      "dependents": [
        "src.services.incremental_synthesis.incremental_synthesis"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Decompose a specification by clustering semantically related constraints."
    },
    "src.services.incremental_synthesis.incremental_synthesis._group_constraints_by_type": {
      "name": "src.services.incremental_synthesis.incremental_synthesis._group_constraints_by_type",
      "type": "function",
      "service": "src",
      "file_path": "src/services/incremental_synthesis/incremental_synthesis.py",
      "parent": "src.services.incremental_synthesis.incremental_synthesis",
      "dependencies": [],
      "dependents": [
        "src.services.incremental_synthesis.incremental_synthesis"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Group constraints by their semantic type."
    },
    "src.services.incremental_synthesis.incremental_synthesis._decompose_by_partitioning": {
      "name": "src.services.incremental_synthesis.incremental_synthesis._decompose_by_partitioning",
      "type": "function",
      "service": "src",
      "file_path": "src/services/incremental_synthesis/incremental_synthesis.py",
      "parent": "src.services.incremental_synthesis.incremental_synthesis",
      "dependencies": [],
      "dependents": [
        "src.services.incremental_synthesis.incremental_synthesis"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Decompose a specification by simple partitioning."
    },
    "src.services.incremental_synthesis.incremental_synthesis._merge_components": {
      "name": "src.services.incremental_synthesis.incremental_synthesis._merge_components",
      "type": "function",
      "service": "src",
      "file_path": "src/services/incremental_synthesis/incremental_synthesis.py",
      "parent": "src.services.incremental_synthesis.incremental_synthesis",
      "dependencies": [],
      "dependents": [
        "src.services.incremental_synthesis.incremental_synthesis"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Merge services to reduce their number to the target."
    },
    "src.services.incremental_synthesis.incremental_synthesis._calculate_component_similarity": {
      "name": "src.services.incremental_synthesis.incremental_synthesis._calculate_component_similarity",
      "type": "function",
      "service": "src",
      "file_path": "src/services/incremental_synthesis/incremental_synthesis.py",
      "parent": "src.services.incremental_synthesis.incremental_synthesis",
      "dependencies": [],
      "dependents": [
        "src.services.incremental_synthesis.incremental_synthesis"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Calculate similarity between two services."
    },
    "src.services.incremental_synthesis.incremental_synthesis._merge_two_components": {
      "name": "src.services.incremental_synthesis.incremental_synthesis._merge_two_components",
      "type": "function",
      "service": "src",
      "file_path": "src/services/incremental_synthesis/incremental_synthesis.py",
      "parent": "src.services.incremental_synthesis.incremental_synthesis",
      "dependencies": [],
      "dependents": [
        "src.services.incremental_synthesis.incremental_synthesis"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Merge two component specifications."
    },
    "src.services.incremental_synthesis.incremental_synthesis._combine_sequential": {
      "name": "src.services.incremental_synthesis.incremental_synthesis._combine_sequential",
      "type": "function",
      "service": "src",
      "file_path": "src/services/incremental_synthesis/incremental_synthesis.py",
      "parent": "src.services.incremental_synthesis.incremental_synthesis",
      "dependencies": [],
      "dependents": [
        "src.services.incremental_synthesis.incremental_synthesis"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Combine services sequentially, with outputs flowing into inputs."
    },
    "src.services.incremental_synthesis.incremental_synthesis._combine_parallel": {
      "name": "src.services.incremental_synthesis.incremental_synthesis._combine_parallel",
      "type": "function",
      "service": "src",
      "file_path": "src/services/incremental_synthesis/incremental_synthesis.py",
      "parent": "src.services.incremental_synthesis.incremental_synthesis",
      "dependencies": [],
      "dependents": [
        "src.services.incremental_synthesis.incremental_synthesis"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Combine services to execute in parallel and merge results."
    },
    "src.services.incremental_synthesis.incremental_synthesis._combine_conditional": {
      "name": "src.services.incremental_synthesis.incremental_synthesis._combine_conditional",
      "type": "function",
      "service": "src",
      "file_path": "src/services/incremental_synthesis/incremental_synthesis.py",
      "parent": "src.services.incremental_synthesis.incremental_synthesis",
      "dependencies": [],
      "dependents": [
        "src.services.incremental_synthesis.incremental_synthesis"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Combine services with conditional branching based on input conditions."
    },
    "src.services.incremental_synthesis.incremental_synthesis._get_component_body": {
      "name": "src.services.incremental_synthesis.incremental_synthesis._get_component_body",
      "type": "function",
      "service": "src",
      "file_path": "src/services/incremental_synthesis/incremental_synthesis.py",
      "parent": "src.services.incremental_synthesis.incremental_synthesis",
      "dependencies": [],
      "dependents": [
        "src.services.incremental_synthesis.incremental_synthesis"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Extract the body from a component AST."
    },
    "src.services.incremental_synthesis.incremental_synthesis._get_function_arguments": {
      "name": "src.services.incremental_synthesis.incremental_synthesis._get_function_arguments",
      "type": "function",
      "service": "src",
      "file_path": "src/services/incremental_synthesis/incremental_synthesis.py",
      "parent": "src.services.incremental_synthesis.incremental_synthesis",
      "dependencies": [],
      "dependents": [
        "src.services.incremental_synthesis.incremental_synthesis"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Create argument expressions for a function call."
    },
    "src.services.incremental_synthesis.incremental_synthesis._compute_cache_key": {
      "name": "src.services.incremental_synthesis.incremental_synthesis._compute_cache_key",
      "type": "function",
      "service": "src",
      "file_path": "src/services/incremental_synthesis/incremental_synthesis.py",
      "parent": "src.services.incremental_synthesis.incremental_synthesis",
      "dependencies": [],
      "dependents": [
        "src.services.incremental_synthesis.incremental_synthesis"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Compute a cache key for the specification."
    },
    "src.services.incremental_synthesis.incremental_synthesis.dfs": {
      "name": "src.services.incremental_synthesis.incremental_synthesis.dfs",
      "type": "function",
      "service": "src",
      "file_path": "src/services/incremental_synthesis/incremental_synthesis.py",
      "parent": "src.services.incremental_synthesis.incremental_synthesis",
      "dependencies": [],
      "dependents": [
        "src.services.incremental_synthesis.incremental_synthesis"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Depth-first search to find connected services."
    },
    "src.services.incremental_synthesis.__init__": {
      "name": "src.services.incremental_synthesis.__init__",
      "type": "module",
      "service": "src",
      "file_path": "src/services/incremental_synthesis/__init__.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.language_interop.__init__": {
      "name": "src.services.language_interop.__init__",
      "type": "module",
      "service": "src",
      "file_path": "src/services/language_interop/__init__.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.language_interop.language_interop": {
      "name": "src.services.language_interop.language_interop",
      "type": "module",
      "service": "src",
      "file_path": "src/services/language_interop/language_interop.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.language_interop.language_interop.create_interop_bridge": {
      "name": "src.services.language_interop.language_interop.create_interop_bridge",
      "type": "function",
      "service": "src",
      "file_path": "src/services/language_interop/language_interop.py",
      "parent": "src.services.language_interop.language_interop",
      "dependencies": [],
      "dependents": [
        "src.services.language_interop.language_interop"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Create an interoperability bridge between languages."
    },
    "src.services.workflow_orchestrator.workflow_orchestrator": {
      "name": "src.services.workflow_orchestrator.workflow_orchestrator",
      "type": "module",
      "service": "src",
      "file_path": "src/services/workflow_orchestrator/workflow_orchestrator.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Workflow Orchestrator Service - Manages the workflow phases for the spec-driven code generation system"
    },
    "src.services.workflow_orchestrator.workflow_orchestrator.WorkflowPhase": {
      "name": "src.services.workflow_orchestrator.workflow_orchestrator.WorkflowPhase",
      "type": "class",
      "service": "src",
      "file_path": "src/services/workflow_orchestrator/workflow_orchestrator.py",
      "parent": "src.services.workflow_orchestrator.workflow_orchestrator",
      "dependencies": [],
      "dependents": [
        "src.services.workflow_orchestrator.workflow_orchestrator"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Workflow phases for the spec-driven code generation system"
    },
    "src.services.workflow_orchestrator.workflow_orchestrator.WorkflowEventType": {
      "name": "src.services.workflow_orchestrator.workflow_orchestrator.WorkflowEventType",
      "type": "class",
      "service": "src",
      "file_path": "src/services/workflow_orchestrator/workflow_orchestrator.py",
      "parent": "src.services.workflow_orchestrator.workflow_orchestrator",
      "dependencies": [],
      "dependents": [
        "src.services.workflow_orchestrator.workflow_orchestrator"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Event types for the workflow orchestrator"
    },
    "src.services.workflow_orchestrator.workflow_orchestrator.WorkflowOrchestrator": {
      "name": "src.services.workflow_orchestrator.workflow_orchestrator.WorkflowOrchestrator",
      "type": "class",
      "service": "src",
      "file_path": "src/services/workflow_orchestrator/workflow_orchestrator.py",
      "parent": "src.services.workflow_orchestrator.workflow_orchestrator",
      "dependencies": [],
      "dependents": [
        "src.services.workflow_orchestrator.workflow_orchestrator"
      ],
      "methods": [
        "__init__",
        "_load_project_states",
        "_save_project_states"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Service that orchestrates the workflow of projects through different phases."
    },
    "src.services.workflow_orchestrator.workflow_orchestrator.__init__": {
      "name": "src.services.workflow_orchestrator.workflow_orchestrator.__init__",
      "type": "function",
      "service": "src",
      "file_path": "src/services/workflow_orchestrator/workflow_orchestrator.py",
      "parent": "src.services.workflow_orchestrator.workflow_orchestrator",
      "dependencies": [],
      "dependents": [
        "src.services.workflow_orchestrator.workflow_orchestrator"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize the workflow orchestrator."
    },
    "src.services.workflow_orchestrator.workflow_orchestrator._load_project_states": {
      "name": "src.services.workflow_orchestrator.workflow_orchestrator._load_project_states",
      "type": "function",
      "service": "src",
      "file_path": "src/services/workflow_orchestrator/workflow_orchestrator.py",
      "parent": "src.services.workflow_orchestrator.workflow_orchestrator",
      "dependencies": [],
      "dependents": [
        "src.services.workflow_orchestrator.workflow_orchestrator"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Load project states from disk if available."
    },
    "src.services.workflow_orchestrator.workflow_orchestrator._save_project_states": {
      "name": "src.services.workflow_orchestrator.workflow_orchestrator._save_project_states",
      "type": "function",
      "service": "src",
      "file_path": "src/services/workflow_orchestrator/workflow_orchestrator.py",
      "parent": "src.services.workflow_orchestrator.workflow_orchestrator",
      "dependencies": [],
      "dependents": [
        "src.services.workflow_orchestrator.workflow_orchestrator"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Save project states to disk."
    },
    "src.services.workflow_orchestrator.__init__": {
      "name": "src.services.workflow_orchestrator.__init__",
      "type": "module",
      "service": "src",
      "file_path": "src/services/workflow_orchestrator/__init__.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.meta_learner.meta_learner": {
      "name": "src.services.meta_learner.meta_learner",
      "type": "module",
      "service": "src",
      "file_path": "src/services/meta_learner/meta_learner.py",
      "parent": null,
      "dependencies": [],
      "dependents": [
        "src.services.meta_learner.main"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Meta learning component for the Program Synthesis System."
    },
    "src.services.meta_learner.meta_learner._extract_domain": {
      "name": "src.services.meta_learner.meta_learner._extract_domain",
      "type": "function",
      "service": "src",
      "file_path": "src/services/meta_learner/meta_learner.py",
      "parent": "src.services.meta_learner.meta_learner",
      "dependencies": [],
      "dependents": [
        "src.services.meta_learner.meta_learner"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Extract domain from specification and context."
    },
    "src.services.meta_learner.meta_learner.MetaLearner": {
      "name": "src.services.meta_learner.meta_learner.MetaLearner",
      "type": "class",
      "service": "src",
      "file_path": "src/services/meta_learner/meta_learner.py",
      "parent": "src.services.meta_learner.meta_learner",
      "dependencies": [],
      "dependents": [
        "src.services.meta_learner.meta_learner"
      ],
      "methods": [
        "__init__",
        "_load_learning_data",
        "_save_learning_data",
        "suggest_strategy",
        "record_success",
        "record_failure",
        "get_strategy_performance",
        "get_domain_strategies",
        "analyze_strategy_patterns",
        "_explore_strategies",
        "_get_best_overall_strategy",
        "_calculate_strategy_success_rate",
        "_update_problem_clusters",
        "_perform_clustering",
        "_get_problem_cluster",
        "_calculate_domain_similarity",
        "_calculate_strategy_complementarity",
        "_sanitize_context"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Learns synthesis strategies from past experiences."
    },
    "src.services.meta_learner.meta_learner.__init__": {
      "name": "src.services.meta_learner.meta_learner.__init__",
      "type": "function",
      "service": "src",
      "file_path": "src/services/meta_learner/meta_learner.py",
      "parent": "src.services.meta_learner.meta_learner",
      "dependencies": [],
      "dependents": [
        "src.services.meta_learner.meta_learner"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize the meta learner with learning parameters."
    },
    "src.services.meta_learner.meta_learner._load_learning_data": {
      "name": "src.services.meta_learner.meta_learner._load_learning_data",
      "type": "function",
      "service": "src",
      "file_path": "src/services/meta_learner/meta_learner.py",
      "parent": "src.services.meta_learner.meta_learner",
      "dependencies": [],
      "dependents": [
        "src.services.meta_learner.meta_learner"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Load previous learning data from persistent storage."
    },
    "src.services.meta_learner.meta_learner._save_learning_data": {
      "name": "src.services.meta_learner.meta_learner._save_learning_data",
      "type": "function",
      "service": "src",
      "file_path": "src/services/meta_learner/meta_learner.py",
      "parent": "src.services.meta_learner.meta_learner",
      "dependencies": [],
      "dependents": [
        "src.services.meta_learner.meta_learner"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Save learning data to persistent storage."
    },
    "src.services.meta_learner.meta_learner.suggest_strategy": {
      "name": "src.services.meta_learner.meta_learner.suggest_strategy",
      "type": "function",
      "service": "src",
      "file_path": "src/services/meta_learner/meta_learner.py",
      "parent": "src.services.meta_learner.meta_learner",
      "dependencies": [],
      "dependents": [
        "src.services.meta_learner.meta_learner"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Suggest a synthesis strategy based on learning."
    },
    "src.services.meta_learner.meta_learner.record_success": {
      "name": "src.services.meta_learner.meta_learner.record_success",
      "type": "function",
      "service": "src",
      "file_path": "src/services/meta_learner/meta_learner.py",
      "parent": "src.services.meta_learner.meta_learner",
      "dependencies": [],
      "dependents": [
        "src.services.meta_learner.meta_learner"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Record a successful synthesis result."
    },
    "src.services.meta_learner.meta_learner.record_failure": {
      "name": "src.services.meta_learner.meta_learner.record_failure",
      "type": "function",
      "service": "src",
      "file_path": "src/services/meta_learner/meta_learner.py",
      "parent": "src.services.meta_learner.meta_learner",
      "dependencies": [],
      "dependents": [
        "src.services.meta_learner.meta_learner"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Record a failed synthesis result."
    },
    "src.services.meta_learner.meta_learner.get_strategy_performance": {
      "name": "src.services.meta_learner.meta_learner.get_strategy_performance",
      "type": "function",
      "service": "src",
      "file_path": "src/services/meta_learner/meta_learner.py",
      "parent": "src.services.meta_learner.meta_learner",
      "dependencies": [],
      "dependents": [
        "src.services.meta_learner.meta_learner"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Get performance metrics for all strategies."
    },
    "src.services.meta_learner.meta_learner.get_domain_strategies": {
      "name": "src.services.meta_learner.meta_learner.get_domain_strategies",
      "type": "function",
      "service": "src",
      "file_path": "src/services/meta_learner/meta_learner.py",
      "parent": "src.services.meta_learner.meta_learner",
      "dependencies": [],
      "dependents": [
        "src.services.meta_learner.meta_learner"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Get strategy rankings for a specific domain."
    },
    "src.services.meta_learner.meta_learner.analyze_strategy_patterns": {
      "name": "src.services.meta_learner.meta_learner.analyze_strategy_patterns",
      "type": "function",
      "service": "src",
      "file_path": "src/services/meta_learner/meta_learner.py",
      "parent": "src.services.meta_learner.meta_learner",
      "dependencies": [],
      "dependents": [
        "src.services.meta_learner.meta_learner"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Analyze patterns in strategy performance across domains."
    },
    "src.services.meta_learner.meta_learner._explore_strategies": {
      "name": "src.services.meta_learner.meta_learner._explore_strategies",
      "type": "function",
      "service": "src",
      "file_path": "src/services/meta_learner/meta_learner.py",
      "parent": "src.services.meta_learner.meta_learner",
      "dependencies": [],
      "dependents": [
        "src.services.meta_learner.meta_learner"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Randomly explore a strategy for learning purposes."
    },
    "src.services.meta_learner.meta_learner._get_best_overall_strategy": {
      "name": "src.services.meta_learner.meta_learner._get_best_overall_strategy",
      "type": "function",
      "service": "src",
      "file_path": "src/services/meta_learner/meta_learner.py",
      "parent": "src.services.meta_learner.meta_learner",
      "dependencies": [],
      "dependents": [
        "src.services.meta_learner.meta_learner"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Get the best overall strategy based on success rate."
    },
    "src.services.meta_learner.meta_learner._calculate_strategy_success_rate": {
      "name": "src.services.meta_learner.meta_learner._calculate_strategy_success_rate",
      "type": "function",
      "service": "src",
      "file_path": "src/services/meta_learner/meta_learner.py",
      "parent": "src.services.meta_learner.meta_learner",
      "dependencies": [],
      "dependents": [
        "src.services.meta_learner.meta_learner"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Calculate success rate for a given strategy."
    },
    "src.services.meta_learner.meta_learner._update_problem_clusters": {
      "name": "src.services.meta_learner.meta_learner._update_problem_clusters",
      "type": "function",
      "service": "src",
      "file_path": "src/services/meta_learner/meta_learner.py",
      "parent": "src.services.meta_learner.meta_learner",
      "dependencies": [],
      "dependents": [
        "src.services.meta_learner.meta_learner"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Update problem clusters with new data."
    },
    "src.services.meta_learner.meta_learner._perform_clustering": {
      "name": "src.services.meta_learner.meta_learner._perform_clustering",
      "type": "function",
      "service": "src",
      "file_path": "src/services/meta_learner/meta_learner.py",
      "parent": "src.services.meta_learner.meta_learner",
      "dependencies": [],
      "dependents": [
        "src.services.meta_learner.meta_learner"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Perform clustering on problem specifications."
    },
    "src.services.meta_learner.meta_learner._get_problem_cluster": {
      "name": "src.services.meta_learner.meta_learner._get_problem_cluster",
      "type": "function",
      "service": "src",
      "file_path": "src/services/meta_learner/meta_learner.py",
      "parent": "src.services.meta_learner.meta_learner",
      "dependencies": [],
      "dependents": [
        "src.services.meta_learner.meta_learner"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Get the cluster for a given problem specification."
    },
    "src.services.meta_learner.meta_learner._calculate_domain_similarity": {
      "name": "src.services.meta_learner.meta_learner._calculate_domain_similarity",
      "type": "function",
      "service": "src",
      "file_path": "src/services/meta_learner/meta_learner.py",
      "parent": "src.services.meta_learner.meta_learner",
      "dependencies": [],
      "dependents": [
        "src.services.meta_learner.meta_learner"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Calculate similarity between two domains based on strategy preferences."
    },
    "src.services.meta_learner.meta_learner._calculate_strategy_complementarity": {
      "name": "src.services.meta_learner.meta_learner._calculate_strategy_complementarity",
      "type": "function",
      "service": "src",
      "file_path": "src/services/meta_learner/meta_learner.py",
      "parent": "src.services.meta_learner.meta_learner",
      "dependencies": [],
      "dependents": [
        "src.services.meta_learner.meta_learner"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Calculate how complementary two strategies are across domains."
    },
    "src.services.meta_learner.meta_learner._sanitize_context": {
      "name": "src.services.meta_learner.meta_learner._sanitize_context",
      "type": "function",
      "service": "src",
      "file_path": "src/services/meta_learner/meta_learner.py",
      "parent": "src.services.meta_learner.meta_learner",
      "dependencies": [],
      "dependents": [
        "src.services.meta_learner.meta_learner"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Sanitize context for storage (remove sensitive info)."
    },
    "src.services.meta_learner.meta_learner.recommend_strategy": {
      "name": "src.services.meta_learner.meta_learner.recommend_strategy",
      "type": "function",
      "service": "src",
      "file_path": "src/services/meta_learner/meta_learner.py",
      "parent": "src.services.meta_learner.meta_learner",
      "dependencies": [],
      "dependents": [
        "src.services.meta_learner.meta_learner"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Recommend the best synthesis strategy for a given problem."
    },
    "src.services.meta_learner.meta_learner._determine_problem_type": {
      "name": "src.services.meta_learner.meta_learner._determine_problem_type",
      "type": "function",
      "service": "src",
      "file_path": "src/services/meta_learner/meta_learner.py",
      "parent": "src.services.meta_learner.meta_learner",
      "dependencies": [],
      "dependents": [
        "src.services.meta_learner.meta_learner"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Determine the type of problem based on the specification and context."
    },
    "src.services.meta_learner.__init__": {
      "name": "src.services.meta_learner.__init__",
      "type": "module",
      "service": "src",
      "file_path": "src/services/meta_learner/__init__.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.meta_learner.main": {
      "name": "src.services.meta_learner.main",
      "type": "module",
      "service": "src",
      "file_path": "src/services/meta_learner/main.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Main entry point for Meta Learner Service."
    },
    "src.services.meta_learner.main.MetaLearnerService": {
      "name": "src.services.meta_learner.main.MetaLearnerService",
      "type": "class",
      "service": "src",
      "file_path": "src/services/meta_learner/main.py",
      "parent": "src.services.meta_learner.main",
      "dependencies": [],
      "dependents": [
        "src.services.meta_learner.main"
      ],
      "methods": [
        "__init__",
        "_load_secret",
        "initialize"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Service wrapper for the Meta Learner component."
    },
    "src.services.meta_learner.main.handle_signal": {
      "name": "src.services.meta_learner.main.handle_signal",
      "type": "function",
      "service": "src",
      "file_path": "src/services/meta_learner/main.py",
      "parent": "src.services.meta_learner.main",
      "dependencies": [],
      "dependents": [
        "src.services.meta_learner.main"
      ],
      "methods": [],
      "event_handlers": [
        "signal"
      ],
      "event_publishers": [],
      "description": "Handle termination signals."
    },
    "src.services.meta_learner.main.__init__": {
      "name": "src.services.meta_learner.main.__init__",
      "type": "function",
      "service": "src",
      "file_path": "src/services/meta_learner/main.py",
      "parent": "src.services.meta_learner.main",
      "dependencies": [],
      "dependents": [
        "src.services.meta_learner.main"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize the Meta Learner service."
    },
    "src.services.meta_learner.main._load_secret": {
      "name": "src.services.meta_learner.main._load_secret",
      "type": "function",
      "service": "src",
      "file_path": "src/services/meta_learner/main.py",
      "parent": "src.services.meta_learner.main",
      "dependencies": [],
      "dependents": [
        "src.services.meta_learner.main"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Load a secret from file if it exists."
    },
    "src.services.meta_learner.main.initialize": {
      "name": "src.services.meta_learner.main.initialize",
      "type": "function",
      "service": "src",
      "file_path": "src/services/meta_learner/main.py",
      "parent": "src.services.meta_learner.main",
      "dependencies": [],
      "dependents": [
        "src.services.meta_learner.main"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize all components of the service."
    },
    "src.services.neural_code_generator.__init__": {
      "name": "src.services.neural_code_generator.__init__",
      "type": "module",
      "service": "src",
      "file_path": "src/services/neural_code_generator/__init__.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.neural_code_generator.healthcheck": {
      "name": "src.services.neural_code_generator.healthcheck",
      "type": "module",
      "service": "src",
      "file_path": "src/services/neural_code_generator/healthcheck.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Health check API for Neural Code Generator."
    },
    "src.services.neural_code_generator.healthcheck.HealthStatus": {
      "name": "src.services.neural_code_generator.healthcheck.HealthStatus",
      "type": "class",
      "service": "src",
      "file_path": "src/services/neural_code_generator/healthcheck.py",
      "parent": "src.services.neural_code_generator.healthcheck",
      "dependencies": [],
      "dependents": [
        "src.services.neural_code_generator.healthcheck"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Health status response model."
    },
    "src.services.neural_code_generator.healthcheck.update_stats": {
      "name": "src.services.neural_code_generator.healthcheck.update_stats",
      "type": "function",
      "service": "src",
      "file_path": "src/services/neural_code_generator/healthcheck.py",
      "parent": "src.services.neural_code_generator.healthcheck",
      "dependencies": [],
      "dependents": [
        "src.services.neural_code_generator.healthcheck"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Update the request statistics."
    },
    "src.services.neural_code_generator.healthcheck.start_server": {
      "name": "src.services.neural_code_generator.healthcheck.start_server",
      "type": "function",
      "service": "src",
      "file_path": "src/services/neural_code_generator/healthcheck.py",
      "parent": "src.services.neural_code_generator.healthcheck",
      "dependencies": [],
      "dependents": [
        "src.services.neural_code_generator.healthcheck"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Start the health check server."
    },
    "src.services.neural_code_generator.enhanced_neural_code_generator": {
      "name": "src.services.neural_code_generator.enhanced_neural_code_generator",
      "type": "module",
      "service": "src",
      "file_path": "src/services/neural_code_generator/enhanced_neural_code_generator.py",
      "parent": null,
      "dependencies": [],
      "dependents": [
        "src.services.component_factory.component_factory",
        "bin.cli.standalonewithcli"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Enhanced neural code generator with production-ready implementations."
    },
    "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_base_model": {
      "name": "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_base_model",
      "type": "function",
      "service": "src",
      "file_path": "src/services/neural_code_generator/enhanced_neural_code_generator.py",
      "parent": "src.services.neural_code_generator.enhanced_neural_code_generator",
      "dependencies": [],
      "dependents": [
        "src.services.neural_code_generator.enhanced_neural_code_generator",
        "src.services.neural_code_generator.enhanced_neural_code_generator"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize the base DeepSeek 8B model with optimizations."
    },
    "src.services.neural_code_generator.enhanced_neural_code_generator.EnhancedNeuralCodeGenerator": {
      "name": "src.services.neural_code_generator.enhanced_neural_code_generator.EnhancedNeuralCodeGenerator",
      "type": "class",
      "service": "src",
      "file_path": "src/services/neural_code_generator/enhanced_neural_code_generator.py",
      "parent": "src.services.neural_code_generator.enhanced_neural_code_generator",
      "dependencies": [],
      "dependents": [
        "src.services.neural_code_generator.enhanced_neural_code_generator"
      ],
      "methods": [
        "__init__",
        "_initialize_models",
        "_initialize_tokenizer",
        "_initialize_base_model",
        "_initialize_retrieval_model",
        "_connect_knowledge_base",
        "_initialize_simple_knowledge_base",
        "_initialize_tree_transformer",
        "_initialize_hierarchical_model",
        "_initialize_syntax_beam_search",
        "_python_syntax_checker",
        "_initialize_hybrid_model",
        "_initialize_pulsar",
        "_implement_basic_pulsar",
        "_parse_specification",
        "generate",
        "_create_generation_prompt"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Advanced neural code generator that incorporates cutting-edge techniques:"
    },
    "src.services.neural_code_generator.enhanced_neural_code_generator.__init__": {
      "name": "src.services.neural_code_generator.enhanced_neural_code_generator.__init__",
      "type": "function",
      "service": "src",
      "file_path": "src/services/neural_code_generator/enhanced_neural_code_generator.py",
      "parent": "src.services.neural_code_generator.enhanced_neural_code_generator",
      "dependencies": [],
      "dependents": [
        "src.services.neural_code_generator.enhanced_neural_code_generator",
        "src.services.neural_code_generator.enhanced_neural_code_generator",
        "src.services.neural_code_generator.enhanced_neural_code_generator"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_models": {
      "name": "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_models",
      "type": "function",
      "service": "src",
      "file_path": "src/services/neural_code_generator/enhanced_neural_code_generator.py",
      "parent": "src.services.neural_code_generator.enhanced_neural_code_generator",
      "dependencies": [],
      "dependents": [
        "src.services.neural_code_generator.enhanced_neural_code_generator"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize the neural models and other services."
    },
    "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_tokenizer": {
      "name": "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_tokenizer",
      "type": "function",
      "service": "src",
      "file_path": "src/services/neural_code_generator/enhanced_neural_code_generator.py",
      "parent": "src.services.neural_code_generator.enhanced_neural_code_generator",
      "dependencies": [],
      "dependents": [
        "src.services.neural_code_generator.enhanced_neural_code_generator"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize the tokenizer for the base model."
    },
    "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_retrieval_model": {
      "name": "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_retrieval_model",
      "type": "function",
      "service": "src",
      "file_path": "src/services/neural_code_generator/enhanced_neural_code_generator.py",
      "parent": "src.services.neural_code_generator.enhanced_neural_code_generator",
      "dependencies": [],
      "dependents": [
        "src.services.neural_code_generator.enhanced_neural_code_generator"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize the retrieval-augmented generation services."
    },
    "src.services.neural_code_generator.enhanced_neural_code_generator._connect_knowledge_base": {
      "name": "src.services.neural_code_generator.enhanced_neural_code_generator._connect_knowledge_base",
      "type": "function",
      "service": "src",
      "file_path": "src/services/neural_code_generator/enhanced_neural_code_generator.py",
      "parent": "src.services.neural_code_generator.enhanced_neural_code_generator",
      "dependencies": [],
      "dependents": [
        "src.services.neural_code_generator.enhanced_neural_code_generator"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Connect to the knowledge base for code retrieval."
    },
    "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_simple_knowledge_base": {
      "name": "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_simple_knowledge_base",
      "type": "function",
      "service": "src",
      "file_path": "src/services/neural_code_generator/enhanced_neural_code_generator.py",
      "parent": "src.services.neural_code_generator.enhanced_neural_code_generator",
      "dependencies": [],
      "dependents": [
        "src.services.neural_code_generator.enhanced_neural_code_generator"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize a simplified knowledge base using local file storage."
    },
    "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_tree_transformer": {
      "name": "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_tree_transformer",
      "type": "function",
      "service": "src",
      "file_path": "src/services/neural_code_generator/enhanced_neural_code_generator.py",
      "parent": "src.services.neural_code_generator.enhanced_neural_code_generator",
      "dependencies": [],
      "dependents": [
        "src.services.neural_code_generator.enhanced_neural_code_generator"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize tree-based transformer that operates on AST structures."
    },
    "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_hierarchical_model": {
      "name": "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_hierarchical_model",
      "type": "function",
      "service": "src",
      "file_path": "src/services/neural_code_generator/enhanced_neural_code_generator.py",
      "parent": "src.services.neural_code_generator.enhanced_neural_code_generator",
      "dependencies": [],
      "dependents": [
        "src.services.neural_code_generator.enhanced_neural_code_generator"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize hierarchical code generation model."
    },
    "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_syntax_beam_search": {
      "name": "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_syntax_beam_search",
      "type": "function",
      "service": "src",
      "file_path": "src/services/neural_code_generator/enhanced_neural_code_generator.py",
      "parent": "src.services.neural_code_generator.enhanced_neural_code_generator",
      "dependencies": [],
      "dependents": [
        "src.services.neural_code_generator.enhanced_neural_code_generator"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize syntax-aware beam search."
    },
    "src.services.neural_code_generator.enhanced_neural_code_generator._python_syntax_checker": {
      "name": "src.services.neural_code_generator.enhanced_neural_code_generator._python_syntax_checker",
      "type": "function",
      "service": "src",
      "file_path": "src/services/neural_code_generator/enhanced_neural_code_generator.py",
      "parent": "src.services.neural_code_generator.enhanced_neural_code_generator",
      "dependencies": [],
      "dependents": [
        "src.services.neural_code_generator.enhanced_neural_code_generator"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Basic Python syntax checker using ast.parse."
    },
    "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_hybrid_model": {
      "name": "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_hybrid_model",
      "type": "function",
      "service": "src",
      "file_path": "src/services/neural_code_generator/enhanced_neural_code_generator.py",
      "parent": "src.services.neural_code_generator.enhanced_neural_code_generator",
      "dependencies": [],
      "dependents": [
        "src.services.neural_code_generator.enhanced_neural_code_generator"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize hybrid grammar-neural model."
    },
    "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_pulsar": {
      "name": "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_pulsar",
      "type": "function",
      "service": "src",
      "file_path": "src/services/neural_code_generator/enhanced_neural_code_generator.py",
      "parent": "src.services.neural_code_generator.enhanced_neural_code_generator",
      "dependencies": [],
      "dependents": [
        "src.services.neural_code_generator.enhanced_neural_code_generator"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize connection to Apache Pulsar for event-driven architecture."
    },
    "src.services.neural_code_generator.enhanced_neural_code_generator._implement_basic_pulsar": {
      "name": "src.services.neural_code_generator.enhanced_neural_code_generator._implement_basic_pulsar",
      "type": "function",
      "service": "src",
      "file_path": "src/services/neural_code_generator/enhanced_neural_code_generator.py",
      "parent": "src.services.neural_code_generator.enhanced_neural_code_generator",
      "dependencies": [],
      "dependents": [
        "src.services.neural_code_generator.enhanced_neural_code_generator"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Implement a basic version of PulsarConnection for testing."
    },
    "src.services.neural_code_generator.enhanced_neural_code_generator._parse_specification": {
      "name": "src.services.neural_code_generator.enhanced_neural_code_generator._parse_specification",
      "type": "function",
      "service": "src",
      "file_path": "src/services/neural_code_generator/enhanced_neural_code_generator.py",
      "parent": "src.services.neural_code_generator.enhanced_neural_code_generator",
      "dependencies": [],
      "dependents": [
        "src.services.neural_code_generator.enhanced_neural_code_generator"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Parse the specification from a message payload."
    },
    "src.services.neural_code_generator.enhanced_neural_code_generator.generate": {
      "name": "src.services.neural_code_generator.enhanced_neural_code_generator.generate",
      "type": "function",
      "service": "src",
      "file_path": "src/services/neural_code_generator/enhanced_neural_code_generator.py",
      "parent": "src.services.neural_code_generator.enhanced_neural_code_generator",
      "dependencies": [],
      "dependents": [
        "src.services.neural_code_generator.enhanced_neural_code_generator"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Generate code from a formal specification using advanced neural techniques."
    },
    "src.services.neural_code_generator.enhanced_neural_code_generator._create_generation_prompt": {
      "name": "src.services.neural_code_generator.enhanced_neural_code_generator._create_generation_prompt",
      "type": "function",
      "service": "src",
      "file_path": "src/services/neural_code_generator/enhanced_neural_code_generator.py",
      "parent": "src.services.neural_code_generator.enhanced_neural_code_generator",
      "dependencies": [],
      "dependents": [
        "src.services.neural_code_generator.enhanced_neural_code_generator"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Create a suitable prompt for code generation from the formal specification."
    },
    "src.services.neural_code_generator.enhanced_neural_code_generator.SimpleKnowledgeBase": {
      "name": "src.services.neural_code_generator.enhanced_neural_code_generator.SimpleKnowledgeBase",
      "type": "class",
      "service": "src",
      "file_path": "src/services/neural_code_generator/enhanced_neural_code_generator.py",
      "parent": "src.services.neural_code_generator.enhanced_neural_code_generator",
      "dependencies": [],
      "dependents": [
        "src.services.neural_code_generator.enhanced_neural_code_generator"
      ],
      "methods": [
        "__init__",
        "_load_index",
        "search"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.neural_code_generator.enhanced_neural_code_generator.BasicPulsarConnection": {
      "name": "src.services.neural_code_generator.enhanced_neural_code_generator.BasicPulsarConnection",
      "type": "class",
      "service": "src",
      "file_path": "src/services/neural_code_generator/enhanced_neural_code_generator.py",
      "parent": "src.services.neural_code_generator.enhanced_neural_code_generator",
      "dependencies": [],
      "dependents": [
        "src.services.neural_code_generator.enhanced_neural_code_generator"
      ],
      "methods": [
        "__init__"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.neural_code_generator.enhanced_neural_code_generator._load_index": {
      "name": "src.services.neural_code_generator.enhanced_neural_code_generator._load_index",
      "type": "function",
      "service": "src",
      "file_path": "src/services/neural_code_generator/enhanced_neural_code_generator.py",
      "parent": "src.services.neural_code_generator.enhanced_neural_code_generator",
      "dependencies": [],
      "dependents": [
        "src.services.neural_code_generator.enhanced_neural_code_generator"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.neural_code_generator.enhanced_neural_code_generator.search": {
      "name": "src.services.neural_code_generator.enhanced_neural_code_generator.search",
      "type": "function",
      "service": "src",
      "file_path": "src/services/neural_code_generator/enhanced_neural_code_generator.py",
      "parent": "src.services.neural_code_generator.enhanced_neural_code_generator",
      "dependencies": [],
      "dependents": [
        "src.services.neural_code_generator.enhanced_neural_code_generator"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.neural_code_generator.main": {
      "name": "src.services.neural_code_generator.main",
      "type": "module",
      "service": "src",
      "file_path": "src/services/neural_code_generator/main.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Service module for the Neural Code Generator."
    },
    "src.services.neural_code_generator.main.signal_handler": {
      "name": "src.services.neural_code_generator.main.signal_handler",
      "type": "function",
      "service": "src",
      "file_path": "src/services/neural_code_generator/main.py",
      "parent": "src.services.neural_code_generator.main",
      "dependencies": [],
      "dependents": [
        "src.services.neural_code_generator.main"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.verifier.__init__": {
      "name": "src.services.verifier.__init__",
      "type": "module",
      "service": "src",
      "file_path": "src/services/verifier/__init__.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.verifier.statistical_verifier": {
      "name": "src.services.verifier.statistical_verifier",
      "type": "module",
      "service": "src",
      "file_path": "src/services/verifier/statistical_verifier.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Statistical verification implementation."
    },
    "src.services.verifier.statistical_verifier.StatisticalVerifier": {
      "name": "src.services.verifier.statistical_verifier.StatisticalVerifier",
      "type": "class",
      "service": "src",
      "file_path": "src/services/verifier/statistical_verifier.py",
      "parent": "src.services.verifier.statistical_verifier",
      "dependencies": [],
      "dependents": [
        "src.services.verifier.statistical_verifier",
        "src.services.verifier.statistical_verifier"
      ],
      "methods": [
        "__init__",
        "verify"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Verifier that uses statistical methods to check programs."
    },
    "src.services.verifier.statistical_verifier.DistributedVerifier": {
      "name": "src.services.verifier.statistical_verifier.DistributedVerifier",
      "type": "class",
      "service": "src",
      "file_path": "src/services/verifier/statistical_verifier.py",
      "parent": "src.services.verifier.statistical_verifier",
      "dependencies": [],
      "dependents": [
        "src.services.verifier.statistical_verifier"
      ],
      "methods": [
        "__init__",
        "verify"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Distributes verification tasks across multiple nodes."
    },
    "src.services.verifier.statistical_verifier.SymbolicExecutor": {
      "name": "src.services.verifier.statistical_verifier.SymbolicExecutor",
      "type": "class",
      "service": "src",
      "file_path": "src/services/verifier/statistical_verifier.py",
      "parent": "src.services.verifier.statistical_verifier",
      "dependencies": [],
      "dependents": [
        "src.services.verifier.statistical_verifier"
      ],
      "methods": [
        "__init__",
        "generate_tests",
        "execute_tests"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Generates and runs symbolic execution tests to find edge cases."
    },
    "src.services.verifier.statistical_verifier.BaseVerifier": {
      "name": "src.services.verifier.statistical_verifier.BaseVerifier",
      "type": "class",
      "service": "src",
      "file_path": "src/services/verifier/statistical_verifier.py",
      "parent": "src.services.verifier.statistical_verifier",
      "dependencies": [],
      "dependents": [
        "src.services.verifier.statistical_verifier",
        "src.services.verifier.statistical_verifier"
      ],
      "methods": [
        "verify"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Base class for all verifiers."
    },
    "src.services.verifier.statistical_verifier.SimplePropertyTester": {
      "name": "src.services.verifier.statistical_verifier.SimplePropertyTester",
      "type": "class",
      "service": "src",
      "file_path": "src/services/verifier/statistical_verifier.py",
      "parent": "src.services.verifier.statistical_verifier",
      "dependencies": [],
      "dependents": [
        "src.services.verifier.statistical_verifier",
        "src.services.verifier.statistical_verifier"
      ],
      "methods": [
        "verify"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Fast but less thorough verifier that checks basic properties."
    },
    "src.services.verifier.statistical_verifier.BoundedModelChecker": {
      "name": "src.services.verifier.statistical_verifier.BoundedModelChecker",
      "type": "class",
      "service": "src",
      "file_path": "src/services/verifier/statistical_verifier.py",
      "parent": "src.services.verifier.statistical_verifier",
      "dependencies": [],
      "dependents": [
        "src.services.verifier.statistical_verifier",
        "src.services.verifier.statistical_verifier"
      ],
      "methods": [
        "verify"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Medium verifier that does bounded model checking."
    },
    "src.services.verifier.statistical_verifier.FormalVerifier": {
      "name": "src.services.verifier.statistical_verifier.FormalVerifier",
      "type": "class",
      "service": "src",
      "file_path": "src/services/verifier/statistical_verifier.py",
      "parent": "src.services.verifier.statistical_verifier",
      "dependencies": [],
      "dependents": [
        "src.services.verifier.statistical_verifier",
        "src.services.verifier.statistical_verifier"
      ],
      "methods": [
        "verify"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Thorough verifier that uses formal methods."
    },
    "src.services.verifier.statistical_verifier.StratifiedVerifier": {
      "name": "src.services.verifier.statistical_verifier.StratifiedVerifier",
      "type": "class",
      "service": "src",
      "file_path": "src/services/verifier/statistical_verifier.py",
      "parent": "src.services.verifier.statistical_verifier",
      "dependencies": [],
      "dependents": [
        "src.services.verifier.statistical_verifier"
      ],
      "methods": [
        "__init__",
        "stratified_verify"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Multi-level verification system with stratified approaches."
    },
    "src.services.verifier.statistical_verifier.__init__": {
      "name": "src.services.verifier.statistical_verifier.__init__",
      "type": "function",
      "service": "src",
      "file_path": "src/services/verifier/statistical_verifier.py",
      "parent": "src.services.verifier.statistical_verifier",
      "dependencies": [],
      "dependents": [
        "src.services.verifier.statistical_verifier",
        "src.services.verifier.statistical_verifier",
        "src.services.verifier.statistical_verifier",
        "src.services.verifier.statistical_verifier",
        "src.services.verifier.statistical_verifier",
        "src.services.verifier.statistical_verifier"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.verifier.statistical_verifier.verify": {
      "name": "src.services.verifier.statistical_verifier.verify",
      "type": "function",
      "service": "src",
      "file_path": "src/services/verifier/statistical_verifier.py",
      "parent": "src.services.verifier.statistical_verifier",
      "dependencies": [],
      "dependents": [
        "src.services.verifier.statistical_verifier",
        "src.services.verifier.statistical_verifier",
        "src.services.verifier.statistical_verifier",
        "src.services.verifier.statistical_verifier",
        "src.services.verifier.statistical_verifier",
        "src.services.verifier.statistical_verifier",
        "src.services.verifier.statistical_verifier",
        "src.services.verifier.statistical_verifier",
        "src.services.verifier.statistical_verifier",
        "src.services.verifier.statistical_verifier",
        "src.services.verifier.statistical_verifier"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.verifier.statistical_verifier._generate_test_inputs": {
      "name": "src.services.verifier.statistical_verifier._generate_test_inputs",
      "type": "function",
      "service": "src",
      "file_path": "src/services/verifier/statistical_verifier.py",
      "parent": "src.services.verifier.statistical_verifier",
      "dependencies": [],
      "dependents": [
        "src.services.verifier.statistical_verifier"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Generate test inputs based on the specification."
    },
    "src.services.verifier.statistical_verifier._generate_inputs_from_constraints": {
      "name": "src.services.verifier.statistical_verifier._generate_inputs_from_constraints",
      "type": "function",
      "service": "src",
      "file_path": "src/services/verifier/statistical_verifier.py",
      "parent": "src.services.verifier.statistical_verifier",
      "dependencies": [],
      "dependents": [
        "src.services.verifier.statistical_verifier"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Generate inputs by solving constraints."
    },
    "src.services.verifier.statistical_verifier._generate_random_inputs": {
      "name": "src.services.verifier.statistical_verifier._generate_random_inputs",
      "type": "function",
      "service": "src",
      "file_path": "src/services/verifier/statistical_verifier.py",
      "parent": "src.services.verifier.statistical_verifier",
      "dependencies": [],
      "dependents": [
        "src.services.verifier.statistical_verifier"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Generate random inputs based on types."
    },
    "src.services.verifier.statistical_verifier._check_inputs": {
      "name": "src.services.verifier.statistical_verifier._check_inputs",
      "type": "function",
      "service": "src",
      "file_path": "src/services/verifier/statistical_verifier.py",
      "parent": "src.services.verifier.statistical_verifier",
      "dependencies": [],
      "dependents": [
        "src.services.verifier.statistical_verifier"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Check if the program produces correct outputs for the inputs."
    },
    "src.services.verifier.statistical_verifier._create_program_interpreter": {
      "name": "src.services.verifier.statistical_verifier._create_program_interpreter",
      "type": "function",
      "service": "src",
      "file_path": "src/services/verifier/statistical_verifier.py",
      "parent": "src.services.verifier.statistical_verifier",
      "dependencies": [],
      "dependents": [
        "src.services.verifier.statistical_verifier"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Create a function that interprets the synthesized program."
    },
    "src.services.verifier.statistical_verifier._check_constraints": {
      "name": "src.services.verifier.statistical_verifier._check_constraints",
      "type": "function",
      "service": "src",
      "file_path": "src/services/verifier/statistical_verifier.py",
      "parent": "src.services.verifier.statistical_verifier",
      "dependencies": [],
      "dependents": [
        "src.services.verifier.statistical_verifier"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Check if the input-output pair satisfies all constraints."
    },
    "src.services.verifier.statistical_verifier._calculate_confidence": {
      "name": "src.services.verifier.statistical_verifier._calculate_confidence",
      "type": "function",
      "service": "src",
      "file_path": "src/services/verifier/statistical_verifier.py",
      "parent": "src.services.verifier.statistical_verifier",
      "dependencies": [],
      "dependents": [
        "src.services.verifier.statistical_verifier"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Calculate the confidence score based on the number of tests."
    },
    "src.services.verifier.statistical_verifier.generate_tests": {
      "name": "src.services.verifier.statistical_verifier.generate_tests",
      "type": "function",
      "service": "src",
      "file_path": "src/services/verifier/statistical_verifier.py",
      "parent": "src.services.verifier.statistical_verifier",
      "dependencies": [],
      "dependents": [
        "src.services.verifier.statistical_verifier"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Generate symbolic execution test cases from the specification."
    },
    "src.services.verifier.statistical_verifier.execute_tests": {
      "name": "src.services.verifier.statistical_verifier.execute_tests",
      "type": "function",
      "service": "src",
      "file_path": "src/services/verifier/statistical_verifier.py",
      "parent": "src.services.verifier.statistical_verifier",
      "dependencies": [],
      "dependents": [
        "src.services.verifier.statistical_verifier"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Execute symbolic tests against the synthesized program."
    },
    "src.services.verifier.statistical_verifier.stratified_verify": {
      "name": "src.services.verifier.statistical_verifier.stratified_verify",
      "type": "function",
      "service": "src",
      "file_path": "src/services/verifier/statistical_verifier.py",
      "parent": "src.services.verifier.statistical_verifier",
      "dependencies": [],
      "dependents": [
        "src.services.verifier.statistical_verifier"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Run verification in stages, from fastest to most thorough."
    },
    "src.services.verifier.statistical_verifier.interpreter": {
      "name": "src.services.verifier.statistical_verifier.interpreter",
      "type": "function",
      "service": "src",
      "file_path": "src/services/verifier/statistical_verifier.py",
      "parent": "src.services.verifier.statistical_verifier",
      "dependencies": [],
      "dependents": [
        "src.services.verifier.statistical_verifier"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.verifier.statistical_verifier.SymbolicResult": {
      "name": "src.services.verifier.statistical_verifier.SymbolicResult",
      "type": "class",
      "service": "src",
      "file_path": "src/services/verifier/statistical_verifier.py",
      "parent": "src.services.verifier.statistical_verifier",
      "dependencies": [],
      "dependents": [
        "src.services.verifier.statistical_verifier"
      ],
      "methods": [
        "__init__"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.knowledge_base.__init__": {
      "name": "src.services.knowledge_base.__init__",
      "type": "module",
      "service": "src",
      "file_path": "src/services/knowledge_base/__init__.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.knowledge_base.db_adapter": {
      "name": "src.services.knowledge_base.db_adapter",
      "type": "module",
      "service": "src",
      "file_path": "src/services/knowledge_base/db_adapter.py",
      "parent": null,
      "dependencies": [],
      "dependents": [
        "src.services.ast_code_generator.app.ast_code_generator"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize Redis connection with enterprise configuration."
    },
    "src.services.knowledge_base.vector_knowledge_base": {
      "name": "src.services.knowledge_base.vector_knowledge_base",
      "type": "module",
      "service": "src",
      "file_path": "src/services/knowledge_base/vector_knowledge_base.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Vector knowledge base implementation for code storage and retrieval."
    },
    "src.services.knowledge_base.vector_knowledge_base.VectorKnowledgeBase": {
      "name": "src.services.knowledge_base.vector_knowledge_base.VectorKnowledgeBase",
      "type": "class",
      "service": "src",
      "file_path": "src/services/knowledge_base/vector_knowledge_base.py",
      "parent": "src.services.knowledge_base.vector_knowledge_base",
      "dependencies": [],
      "dependents": [
        "src.services.knowledge_base.vector_knowledge_base"
      ],
      "methods": [
        "__init__",
        "_initialize_storage",
        "_initialize_embedding_model",
        "store",
        "get",
        "search",
        "delete"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Knowledge base that stores code with vector embeddings for similarity search."
    },
    "src.services.knowledge_base.vector_knowledge_base.__init__": {
      "name": "src.services.knowledge_base.vector_knowledge_base.__init__",
      "type": "function",
      "service": "src",
      "file_path": "src/services/knowledge_base/vector_knowledge_base.py",
      "parent": "src.services.knowledge_base.vector_knowledge_base",
      "dependencies": [],
      "dependents": [
        "src.services.knowledge_base.vector_knowledge_base"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize the vector knowledge base with connection parameters."
    },
    "src.services.knowledge_base.vector_knowledge_base._initialize_storage": {
      "name": "src.services.knowledge_base.vector_knowledge_base._initialize_storage",
      "type": "function",
      "service": "src",
      "file_path": "src/services/knowledge_base/vector_knowledge_base.py",
      "parent": "src.services.knowledge_base.vector_knowledge_base",
      "dependencies": [],
      "dependents": [
        "src.services.knowledge_base.vector_knowledge_base"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize the storage backend."
    },
    "src.services.knowledge_base.vector_knowledge_base._initialize_embedding_model": {
      "name": "src.services.knowledge_base.vector_knowledge_base._initialize_embedding_model",
      "type": "function",
      "service": "src",
      "file_path": "src/services/knowledge_base/vector_knowledge_base.py",
      "parent": "src.services.knowledge_base.vector_knowledge_base",
      "dependencies": [],
      "dependents": [
        "src.services.knowledge_base.vector_knowledge_base"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize the embedding model."
    },
    "src.services.knowledge_base.vector_knowledge_base.store": {
      "name": "src.services.knowledge_base.vector_knowledge_base.store",
      "type": "function",
      "service": "src",
      "file_path": "src/services/knowledge_base/vector_knowledge_base.py",
      "parent": "src.services.knowledge_base.vector_knowledge_base",
      "dependencies": [],
      "dependents": [
        "src.services.knowledge_base.vector_knowledge_base"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Store data in the knowledge base with vector embedding."
    },
    "src.services.knowledge_base.vector_knowledge_base.get": {
      "name": "src.services.knowledge_base.vector_knowledge_base.get",
      "type": "function",
      "service": "src",
      "file_path": "src/services/knowledge_base/vector_knowledge_base.py",
      "parent": "src.services.knowledge_base.vector_knowledge_base",
      "dependencies": [],
      "dependents": [
        "src.services.knowledge_base.vector_knowledge_base"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Retrieve data by exact key."
    },
    "src.services.knowledge_base.vector_knowledge_base.search": {
      "name": "src.services.knowledge_base.vector_knowledge_base.search",
      "type": "function",
      "service": "src",
      "file_path": "src/services/knowledge_base/vector_knowledge_base.py",
      "parent": "src.services.knowledge_base.vector_knowledge_base",
      "dependencies": [],
      "dependents": [
        "src.services.knowledge_base.vector_knowledge_base"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Search for similar code using vector similarity."
    },
    "src.services.knowledge_base.vector_knowledge_base.delete": {
      "name": "src.services.knowledge_base.vector_knowledge_base.delete",
      "type": "function",
      "service": "src",
      "file_path": "src/services/knowledge_base/vector_knowledge_base.py",
      "parent": "src.services.knowledge_base.vector_knowledge_base",
      "dependencies": [],
      "dependents": [
        "src.services.knowledge_base.vector_knowledge_base"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Delete an entry from the knowledge base."
    },
    "src.services.knowledge_base.vector_db_service": {
      "name": "src.services.knowledge_base.vector_db_service",
      "type": "module",
      "service": "src",
      "file_path": "src/services/knowledge_base/vector_db_service.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.knowledge_base.vector_db_service.VectorDBService": {
      "name": "src.services.knowledge_base.vector_db_service.VectorDBService",
      "type": "class",
      "service": "src",
      "file_path": "src/services/knowledge_base/vector_db_service.py",
      "parent": "src.services.knowledge_base.vector_db_service",
      "dependencies": [],
      "dependents": [
        "src.services.knowledge_base.vector_db_service"
      ],
      "methods": [
        "__init__",
        "_initialize_vector_db"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Service that handles vector DB operations through Pulsar events."
    },
    "src.services.knowledge_base.vector_db_service.__init__": {
      "name": "src.services.knowledge_base.vector_db_service.__init__",
      "type": "function",
      "service": "src",
      "file_path": "src/services/knowledge_base/vector_db_service.py",
      "parent": "src.services.knowledge_base.vector_db_service",
      "dependencies": [],
      "dependents": [
        "src.services.knowledge_base.vector_db_service"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize the Vector DB service."
    },
    "src.services.knowledge_base.vector_db_service._initialize_vector_db": {
      "name": "src.services.knowledge_base.vector_db_service._initialize_vector_db",
      "type": "function",
      "service": "src",
      "file_path": "src/services/knowledge_base/vector_db_service.py",
      "parent": "src.services.knowledge_base.vector_db_service",
      "dependencies": [],
      "dependents": [
        "src.services.knowledge_base.vector_db_service"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize the vector database client."
    },
    "src.services.synthesis_engine.__init__": {
      "name": "src.services.synthesis_engine.__init__",
      "type": "module",
      "service": "src",
      "file_path": "src/services/synthesis_engine/__init__.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.synthesis_engine.synthesis_engine": {
      "name": "src.services.synthesis_engine.synthesis_engine",
      "type": "module",
      "service": "src",
      "file_path": "src/services/synthesis_engine/synthesis_engine.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.synthesis_engine.synthesis_engine.SpecBasedSynthesisEngine": {
      "name": "src.services.synthesis_engine.synthesis_engine.SpecBasedSynthesisEngine",
      "type": "class",
      "service": "src",
      "file_path": "src/services/synthesis_engine/synthesis_engine.py",
      "parent": "src.services.synthesis_engine.synthesis_engine",
      "dependencies": [],
      "dependents": [
        "src.services.synthesis_engine.synthesis_engine"
      ],
      "methods": [
        "__init__",
        "_initialize_synthesizer",
        "_create_synthesizer",
        "_select_strategy",
        "_get_next_strategy",
        "_convert_spec_to_formal_spec",
        "_generate_fallback_code"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Orchestrates the synthesis of code from spec sheets."
    },
    "src.services.synthesis_engine.synthesis_engine.__init__": {
      "name": "src.services.synthesis_engine.synthesis_engine.__init__",
      "type": "function",
      "service": "src",
      "file_path": "src/services/synthesis_engine/synthesis_engine.py",
      "parent": "src.services.synthesis_engine.synthesis_engine",
      "dependencies": [],
      "dependents": [
        "src.services.synthesis_engine.synthesis_engine"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize the synthesis engine with configurable parameters."
    },
    "src.services.synthesis_engine.synthesis_engine._initialize_synthesizer": {
      "name": "src.services.synthesis_engine.synthesis_engine._initialize_synthesizer",
      "type": "function",
      "service": "src",
      "file_path": "src/services/synthesis_engine/synthesis_engine.py",
      "parent": "src.services.synthesis_engine.synthesis_engine",
      "dependencies": [],
      "dependents": [
        "src.services.synthesis_engine.synthesis_engine"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize a specialized synthesizer for a specific strategy."
    },
    "src.services.synthesis_engine.synthesis_engine._create_synthesizer": {
      "name": "src.services.synthesis_engine.synthesis_engine._create_synthesizer",
      "type": "function",
      "service": "src",
      "file_path": "src/services/synthesis_engine/synthesis_engine.py",
      "parent": "src.services.synthesis_engine.synthesis_engine",
      "dependencies": [],
      "dependents": [
        "src.services.synthesis_engine.synthesis_engine"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Create a synthesizer component."
    },
    "src.services.synthesis_engine.synthesis_engine._select_strategy": {
      "name": "src.services.synthesis_engine.synthesis_engine._select_strategy",
      "type": "function",
      "service": "src",
      "file_path": "src/services/synthesis_engine/synthesis_engine.py",
      "parent": "src.services.synthesis_engine.synthesis_engine",
      "dependencies": [],
      "dependents": [
        "src.services.synthesis_engine.synthesis_engine"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Select the best synthesis strategy for the spec."
    },
    "src.services.synthesis_engine.synthesis_engine._get_next_strategy": {
      "name": "src.services.synthesis_engine.synthesis_engine._get_next_strategy",
      "type": "function",
      "service": "src",
      "file_path": "src/services/synthesis_engine/synthesis_engine.py",
      "parent": "src.services.synthesis_engine.synthesis_engine",
      "dependencies": [],
      "dependents": [
        "src.services.synthesis_engine.synthesis_engine"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Get the next strategy to try after the current one failed."
    },
    "src.services.synthesis_engine.synthesis_engine._convert_spec_to_formal_spec": {
      "name": "src.services.synthesis_engine.synthesis_engine._convert_spec_to_formal_spec",
      "type": "function",
      "service": "src",
      "file_path": "src/services/synthesis_engine/synthesis_engine.py",
      "parent": "src.services.synthesis_engine.synthesis_engine",
      "dependencies": [],
      "dependents": [
        "src.services.synthesis_engine.synthesis_engine"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Convert a spec sheet to a formal specification for synthesis."
    },
    "src.services.synthesis_engine.synthesis_engine._generate_fallback_code": {
      "name": "src.services.synthesis_engine.synthesis_engine._generate_fallback_code",
      "type": "function",
      "service": "src",
      "file_path": "src/services/synthesis_engine/synthesis_engine.py",
      "parent": "src.services.synthesis_engine.synthesis_engine",
      "dependencies": [],
      "dependents": [
        "src.services.synthesis_engine.synthesis_engine"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Generate fallback code when synthesis fails."
    },
    "src.services.specification_parser.__init__": {
      "name": "src.services.specification_parser.__init__",
      "type": "module",
      "service": "src",
      "file_path": "src/services/specification_parser/__init__.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": null
    },
    "src.services.specification_parser.smt_spec_parser": {
      "name": "src.services.specification_parser.smt_spec_parser",
      "type": "module",
      "service": "src",
      "file_path": "src/services/specification_parser/smt_spec_parser.py",
      "parent": null,
      "dependencies": [],
      "dependents": [],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "SMT-based specification parser implementation with advanced parsing capabilities."
    },
    "src.services.specification_parser.smt_spec_parser._parse_to_ast": {
      "name": "src.services.specification_parser.smt_spec_parser._parse_to_ast",
      "type": "function",
      "service": "src",
      "file_path": "src/services/specification_parser/smt_spec_parser.py",
      "parent": "src.services.specification_parser.smt_spec_parser",
      "dependencies": [],
      "dependents": [
        "src.services.specification_parser.smt_spec_parser"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Parse specification to abstract syntax tree."
    },
    "src.services.specification_parser.smt_spec_parser._extract_constraints": {
      "name": "src.services.specification_parser.smt_spec_parser._extract_constraints",
      "type": "function",
      "service": "src",
      "file_path": "src/services/specification_parser/smt_spec_parser.py",
      "parent": "src.services.specification_parser.smt_spec_parser",
      "dependencies": [],
      "dependents": [
        "src.services.specification_parser.smt_spec_parser",
        "src.services.specification_parser.smt_spec_parser"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Extract constraints from the specification with improved reliability."
    },
    "src.services.specification_parser.smt_spec_parser._extract_examples": {
      "name": "src.services.specification_parser.smt_spec_parser._extract_examples",
      "type": "function",
      "service": "src",
      "file_path": "src/services/specification_parser/smt_spec_parser.py",
      "parent": "src.services.specification_parser.smt_spec_parser",
      "dependencies": [],
      "dependents": [
        "src.services.specification_parser.smt_spec_parser",
        "src.services.specification_parser.smt_spec_parser"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Extract examples from the specification with improved parsing."
    },
    "src.services.specification_parser.smt_spec_parser.SMTSpecificationParser": {
      "name": "src.services.specification_parser.smt_spec_parser.SMTSpecificationParser",
      "type": "class",
      "service": "src",
      "file_path": "src/services/specification_parser/smt_spec_parser.py",
      "parent": "src.services.specification_parser.smt_spec_parser",
      "dependencies": [],
      "dependents": [
        "src.services.specification_parser.smt_spec_parser"
      ],
      "methods": [
        "__init__",
        "parse",
        "_extract_parameter_names",
        "_infer_types",
        "_infer_types",
        "_extract_constraints",
        "_create_comparison_constraint",
        "_convert_value",
        "_parse_constraint_string",
        "_extract_examples",
        "_get_default_value",
        "_parse_example_text"
      ],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Parses specifications into SMT constraints with improved reliability and accuracy."
    },
    "src.services.specification_parser.smt_spec_parser.Token": {
      "name": "src.services.specification_parser.smt_spec_parser.Token",
      "type": "class",
      "service": "src",
      "file_path": "src/services/specification_parser/smt_spec_parser.py",
      "parent": "src.services.specification_parser.smt_spec_parser",
      "dependencies": [],
      "dependents": [
        "src.services.specification_parser.smt_spec_parser"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Token representation for parser."
    },
    "src.services.specification_parser.smt_spec_parser.__init__": {
      "name": "src.services.specification_parser.smt_spec_parser.__init__",
      "type": "function",
      "service": "src",
      "file_path": "src/services/specification_parser/smt_spec_parser.py",
      "parent": "src.services.specification_parser.smt_spec_parser",
      "dependencies": [],
      "dependents": [
        "src.services.specification_parser.smt_spec_parser"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Initialize the SMT specification parser with configurable parameters."
    },
    "src.services.specification_parser.smt_spec_parser.parse": {
      "name": "src.services.specification_parser.smt_spec_parser.parse",
      "type": "function",
      "service": "src",
      "file_path": "src/services/specification_parser/smt_spec_parser.py",
      "parent": "src.services.specification_parser.smt_spec_parser",
      "dependencies": [],
      "dependents": [
        "src.services.specification_parser.smt_spec_parser"
      ],
      "methods": [],
      "event_handlers": [],
      "event_publishers": [],
      "description": "Parse the specification into a formal model with improved accuracy."
    },
    "src.services.specification_parser.smt_spec_parser._extract_parameter_names": {
      "name": "src.services.specification_parser.smt_spec_parser._extract_parameter_names",
      "type": "function",
      "service": "src",
      "file_path": "src/services/specification_parser/smt_spec_parser.py",
      "parent": "src.services.specification_parser.smt_spec_parser",
      "dependencies": [],
      "dependents": [
        "src.services.specification_parser.smt_spec_parser"
      ],
      "src.services.specification_parser.smt_spec_parser._create_comparison_constraint": {
        "name": "src.services.specification_parser.smt_spec_parser._create_comparison_constraint",
        "type": "function",
        "service": "src",
        "file_path": "src/services/specification_parser/smt_spec_parser.py",
        "parent": "src.services.specification_parser.smt_spec_parser",
        "dependencies": [],
        "dependents": [
          "src.services.specification_parser.smt_spec_parser"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Create a comparison constraint based on operator and variable type."
      },
      "src.services.specification_parser.smt_spec_parser._convert_value": {
        "name": "src.services.specification_parser.smt_spec_parser._convert_value",
        "type": "function",
        "service": "src",
        "file_path": "src/services/specification_parser/smt_spec_parser.py",
        "parent": "src.services.specification_parser.smt_spec_parser",
        "dependencies": [],
        "dependents": [
          "src.services.specification_parser.smt_spec_parser"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Convert a string value to the appropriate type with enhanced type support."
      },
      "src.services.specification_parser.smt_spec_parser._parse_constraint_string": {
        "name": "src.services.specification_parser.smt_spec_parser._parse_constraint_string",
        "type": "function",
        "service": "src",
        "file_path": "src/services/specification_parser/smt_spec_parser.py",
        "parent": "src.services.specification_parser.smt_spec_parser",
        "dependencies": [],
        "dependents": [
          "src.services.specification_parser.smt_spec_parser"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Parse a constraint from a string representation with improved reliability."
      },
      "src.services.specification_parser.smt_spec_parser._get_default_value": {
        "name": "src.services.specification_parser.smt_spec_parser._get_default_value",
        "type": "function",
        "service": "src",
        "file_path": "src/services/specification_parser/smt_spec_parser.py",
        "parent": "src.services.specification_parser.smt_spec_parser",
        "dependencies": [],
        "dependents": [
          "src.services.specification_parser.smt_spec_parser"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get a reasonable default value for a given type."
      },
      "src.services.specification_parser.smt_spec_parser._parse_example_text": {
        "name": "src.services.specification_parser.smt_spec_parser._parse_example_text",
        "type": "function",
        "service": "src",
        "file_path": "src/services/specification_parser/smt_spec_parser.py",
        "parent": "src.services.specification_parser.smt_spec_parser",
        "dependencies": [],
        "dependents": [
          "src.services.specification_parser.smt_spec_parser"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Parse example input and output text into structured data with improved detection."
      },
      "src.services.specification_parser.smt_spec_parser._create_ast": {
        "name": "src.services.specification_parser.smt_spec_parser._create_ast",
        "type": "function",
        "service": "src",
        "file_path": "src/services/specification_parser/smt_spec_parser.py",
        "parent": "src.services.specification_parser.smt_spec_parser",
        "dependencies": [],
        "dependents": [
          "src.services.specification_parser.smt_spec_parser"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Create an abstract syntax tree from the specification."
      },
      "src.services.constraint_relaxer.__init__": {
        "name": "src.services.constraint_relaxer.__init__",
        "type": "module",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.ast_code_generator.__init__": {
        "name": "src.services.ast_code_generator.__init__",
        "type": "module",
        "service": "src",
        "file_path": "src/services/ast_code_generator/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.spec_inference.spec_inference": {
        "name": "src.services.spec_inference.spec_inference",
        "type": "module",
        "service": "src",
        "file_path": "src/services/spec_inference/spec_inference.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Normalize type names to standard Python types."
      },
      "src.services.spec_inference.__init__": {
        "name": "src.services.spec_inference.__init__",
        "type": "module",
        "service": "src",
        "file_path": "src/services/spec_inference/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.workflow_registry.app.workflows.workflow_registry": {
        "name": "src.services.workflow_registry.app.workflows.workflow_registry",
        "type": "module",
        "service": "src",
        "file_path": "src/services/workflow_registry/app/workflows/workflow_registry.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Production-ready speculative decoding accelerator using Arctic Inference and Arctic Training."
      },
      "src.services.workflow_registry.app.workflows.workflow_registry.SpeculationMethod": {
        "name": "src.services.workflow_registry.app.workflows.workflow_registry.SpeculationMethod",
        "type": "class",
        "service": "src",
        "file_path": "src/services/workflow_registry/app/workflows/workflow_registry.py",
        "parent": "src.services.workflow_registry.app.workflows.workflow_registry",
        "dependencies": [],
        "dependents": [
          "src.services.workflow_registry.app.workflows.workflow_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Available speculative decoding methods."
      },
      "src.services.workflow_registry.app.workflows.workflow_registry.PerformanceMetrics": {
        "name": "src.services.workflow_registry.app.workflows.workflow_registry.PerformanceMetrics",
        "type": "class",
        "service": "src",
        "file_path": "src/services/workflow_registry/app/workflows/workflow_registry.py",
        "parent": "src.services.workflow_registry.app.workflows.workflow_registry",
        "dependencies": [],
        "dependents": [
          "src.services.workflow_registry.app.workflows.workflow_registry"
        ],
        "methods": [
          "update",
          "as_dict"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Performance metrics for tracking inference acceleration."
      },
      "src.services.workflow_registry.app.workflows.workflow_registry.LLMRequest": {
        "name": "src.services.workflow_registry.app.workflows.workflow_registry.LLMRequest",
        "type": "class",
        "service": "src",
        "file_path": "src/services/workflow_registry/app/workflows/workflow_registry.py",
        "parent": "src.services.workflow_registry.app.workflows.workflow_registry",
        "dependencies": [],
        "dependents": [
          "src.services.workflow_registry.app.workflows.workflow_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "API request model for LLM inference."
      },
      "src.services.workflow_registry.app.workflows.workflow_registry.SpeculativeAccelerator": {
        "name": "src.services.workflow_registry.app.workflows.workflow_registry.SpeculativeAccelerator",
        "type": "class",
        "service": "src",
        "file_path": "src/services/workflow_registry/app/workflows/workflow_registry.py",
        "parent": "src.services.workflow_registry.app.workflows.workflow_registry",
        "dependencies": [],
        "dependents": [
          "src.services.workflow_registry.app.workflows.workflow_registry"
        ],
        "methods": [
          "__init__",
          "_load_config",
          "_validate_dependencies",
          "_build_speculative_config",
          "_init_engine",
          "get_metrics"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Production-ready LLM inference accelerator using Arctic Inference and Arctic Training."
      },
      "src.services.workflow_registry.app.workflows.workflow_registry.create_app": {
        "name": "src.services.workflow_registry.app.workflows.workflow_registry.create_app",
        "type": "function",
        "service": "src",
        "file_path": "src/services/workflow_registry/app/workflows/workflow_registry.py",
        "parent": "src.services.workflow_registry.app.workflows.workflow_registry",
        "dependencies": [],
        "dependents": [
          "src.services.workflow_registry.app.workflows.workflow_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Create and configure the FastAPI application."
      },
      "src.services.workflow_registry.app.workflows.workflow_registry.main": {
        "name": "src.services.workflow_registry.app.workflows.workflow_registry.main",
        "type": "function",
        "service": "src",
        "file_path": "src/services/workflow_registry/app/workflows/workflow_registry.py",
        "parent": "src.services.workflow_registry.app.workflows.workflow_registry",
        "dependencies": [],
        "dependents": [
          "src.services.workflow_registry.app.workflows.workflow_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Run the speculative accelerator as a standalone service."
      },
      "src.services.workflow_registry.app.workflows.workflow_registry.update": {
        "name": "src.services.workflow_registry.app.workflows.workflow_registry.update",
        "type": "function",
        "service": "src",
        "file_path": "src/services/workflow_registry/app/workflows/workflow_registry.py",
        "parent": "src.services.workflow_registry.app.workflows.workflow_registry",
        "dependencies": [],
        "dependents": [
          "src.services.workflow_registry.app.workflows.workflow_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Update metrics with new request data."
      },
      "src.services.workflow_registry.app.workflows.workflow_registry.as_dict": {
        "name": "src.services.workflow_registry.app.workflows.workflow_registry.as_dict",
        "type": "function",
        "service": "src",
        "file_path": "src/services/workflow_registry/app/workflows/workflow_registry.py",
        "parent": "src.services.workflow_registry.app.workflows.workflow_registry",
        "dependencies": [],
        "dependents": [
          "src.services.workflow_registry.app.workflows.workflow_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Convert metrics to a dictionary for reporting."
      },
      "src.services.workflow_registry.app.workflows.workflow_registry.__init__": {
        "name": "src.services.workflow_registry.app.workflows.workflow_registry.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/workflow_registry/app/workflows/workflow_registry.py",
        "parent": "src.services.workflow_registry.app.workflows.workflow_registry",
        "dependencies": [],
        "dependents": [
          "src.services.workflow_registry.app.workflows.workflow_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the accelerator with the given configuration."
      },
      "src.services.workflow_registry.app.workflows.workflow_registry._load_config": {
        "name": "src.services.workflow_registry.app.workflows.workflow_registry._load_config",
        "type": "function",
        "service": "src",
        "file_path": "src/services/workflow_registry/app/workflows/workflow_registry.py",
        "parent": "src.services.workflow_registry.app.workflows.workflow_registry",
        "dependencies": [],
        "dependents": [
          "src.services.workflow_registry.app.workflows.workflow_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Load and validate the configuration file."
      },
      "src.services.workflow_registry.app.workflows.workflow_registry._validate_dependencies": {
        "name": "src.services.workflow_registry.app.workflows.workflow_registry._validate_dependencies",
        "type": "function",
        "service": "src",
        "file_path": "src/services/workflow_registry/app/workflows/workflow_registry.py",
        "parent": "src.services.workflow_registry.app.workflows.workflow_registry",
        "dependencies": [],
        "dependents": [
          "src.services.workflow_registry.app.workflows.workflow_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Validate that required dependencies are installed."
      },
      "src.services.workflow_registry.app.workflows.workflow_registry._build_speculative_config": {
        "name": "src.services.workflow_registry.app.workflows.workflow_registry._build_speculative_config",
        "type": "function",
        "service": "src",
        "file_path": "src/services/workflow_registry/app/workflows/workflow_registry.py",
        "parent": "src.services.workflow_registry.app.workflows.workflow_registry",
        "dependencies": [],
        "dependents": [
          "src.services.workflow_registry.app.workflows.workflow_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Build the speculative decoding configuration for vLLM."
      },
      "src.services.workflow_registry.app.workflows.workflow_registry._init_engine": {
        "name": "src.services.workflow_registry.app.workflows.workflow_registry._init_engine",
        "type": "function",
        "service": "src",
        "file_path": "src/services/workflow_registry/app/workflows/workflow_registry.py",
        "parent": "src.services.workflow_registry.app.workflows.workflow_registry",
        "dependencies": [],
        "dependents": [
          "src.services.workflow_registry.app.workflows.workflow_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the vLLM engine with Arctic Inference configuration."
      },
      "src.services.workflow_registry.app.workflows.workflow_registry.get_metrics": {
        "name": "src.services.workflow_registry.app.workflows.workflow_registry.get_metrics",
        "type": "function",
        "service": "src",
        "file_path": "src/services/workflow_registry/app/workflows/workflow_registry.py",
        "parent": "src.services.workflow_registry.app.workflows.workflow_registry",
        "dependencies": [],
        "dependents": [
          "src.services.workflow_registry.app.workflows.workflow_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get current performance metrics."
      },
      "src.services.ast_code_generator.app.ast_code_generator": {
        "name": "src.services.ast_code_generator.app.ast_code_generator",
        "type": "module",
        "service": "src",
        "file_path": "src/services/ast_code_generator/app/ast_code_generator.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.ast_code_generator.app.ast_code_generator._generate_function_stub": {
        "name": "src.services.ast_code_generator.app.ast_code_generator._generate_function_stub",
        "type": "function",
        "service": "src",
        "file_path": "src/services/ast_code_generator/app/ast_code_generator.py",
        "parent": "src.services.ast_code_generator.app.ast_code_generator",
        "dependencies": [],
        "dependents": [
          "src.services.ast_code_generator.app.ast_code_generator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.ast_code_generator.app.ast_code_generator._optimize_ast": {
        "name": "src.services.ast_code_generator.app.ast_code_generator._optimize_ast",
        "type": "function",
        "service": "src",
        "file_path": "src/services/ast_code_generator/app/ast_code_generator.py",
        "parent": "src.services.ast_code_generator.app.ast_code_generator",
        "dependencies": [],
        "dependents": [
          "src.services.ast_code_generator.app.ast_code_generator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Apply optimizations to the AST."
      },
      "src.services.ast_code_generator.app.ast_code_generator._apply_style": {
        "name": "src.services.ast_code_generator.app.ast_code_generator._apply_style",
        "type": "function",
        "service": "src",
        "file_path": "src/services/ast_code_generator/app/ast_code_generator.py",
        "parent": "src.services.ast_code_generator.app.ast_code_generator",
        "dependencies": [],
        "dependents": [
          "src.services.ast_code_generator.app.ast_code_generator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Apply style formatting to the code."
      },
      "src.services.ast_code_generator.app.ast_code_generator._add_comments": {
        "name": "src.services.ast_code_generator.app.ast_code_generator._add_comments",
        "type": "function",
        "service": "src",
        "file_path": "src/services/ast_code_generator/app/ast_code_generator.py",
        "parent": "src.services.ast_code_generator.app.ast_code_generator",
        "dependencies": [],
        "dependents": [
          "src.services.ast_code_generator.app.ast_code_generator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Add helpful comments to the code."
      },
      "src.services.ast_code_generator.app.ast_code_generator.CodeGenerator": {
        "name": "src.services.ast_code_generator.app.ast_code_generator.CodeGenerator",
        "type": "class",
        "service": "src",
        "file_path": "src/services/ast_code_generator/app/ast_code_generator.py",
        "parent": "src.services.ast_code_generator.app.ast_code_generator",
        "dependencies": [],
        "dependents": [
          "src.services.ast_code_generator.app.ast_code_generator"
        ],
        "methods": [
          "__init__",
          "generate",
          "generate_best_effort"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Generates final code from internal program representation."
      },
      "src.services.ast_code_generator.app.ast_code_generator.ASTCodeGenerator": {
        "name": "src.services.ast_code_generator.app.ast_code_generator.ASTCodeGenerator",
        "type": "class",
        "service": "src",
        "file_path": "src/services/ast_code_generator/app/ast_code_generator.py",
        "parent": "src.services.ast_code_generator.app.ast_code_generator",
        "dependencies": [],
        "dependents": [
          "src.services.ast_code_generator.app.ast_code_generator"
        ],
        "methods": [
          "__init__",
          "generate",
          "generate_best_effort",
          "_generate_from_ast",
          "_generate_body",
          "_generate_expression",
          "__init__",
          "_add_safety_measures"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Generates code from program ASTs."
      },
      "src.services.ast_code_generator.app.ast_code_generator.__init__": {
        "name": "src.services.ast_code_generator.app.ast_code_generator.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/ast_code_generator/app/ast_code_generator.py",
        "parent": "src.services.ast_code_generator.app.ast_code_generator",
        "dependencies": [],
        "dependents": [
          "src.services.ast_code_generator.app.ast_code_generator",
          "src.services.ast_code_generator.app.ast_code_generator",
          "src.services.ast_code_generator.app.ast_code_generator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the AST code generator."
      },
      "src.services.ast_code_generator.app.ast_code_generator.generate": {
        "name": "src.services.ast_code_generator.app.ast_code_generator.generate",
        "type": "function",
        "service": "src",
        "file_path": "src/services/ast_code_generator/app/ast_code_generator.py",
        "parent": "src.services.ast_code_generator.app.ast_code_generator",
        "dependencies": [],
        "dependents": [
          "src.services.ast_code_generator.app.ast_code_generator",
          "src.services.ast_code_generator.app.ast_code_generator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Generate code from a synthesis result."
      },
      "src.services.ast_code_generator.app.ast_code_generator.generate_best_effort": {
        "name": "src.services.ast_code_generator.app.ast_code_generator.generate_best_effort",
        "type": "function",
        "service": "src",
        "file_path": "src/services/ast_code_generator/app/ast_code_generator.py",
        "parent": "src.services.ast_code_generator.app.ast_code_generator",
        "dependencies": [],
        "dependents": [
          "src.services.ast_code_generator.app.ast_code_generator",
          "src.services.ast_code_generator.app.ast_code_generator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Generate best-effort code from a failed synthesis result."
      },
      "src.services.ast_code_generator.app.ast_code_generator._generate_from_ast": {
        "name": "src.services.ast_code_generator.app.ast_code_generator._generate_from_ast",
        "type": "function",
        "service": "src",
        "file_path": "src/services/ast_code_generator/app/ast_code_generator.py",
        "parent": "src.services.ast_code_generator.app.ast_code_generator",
        "dependencies": [],
        "dependents": [
          "src.services.ast_code_generator.app.ast_code_generator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Generate code from the AST."
      },
      "src.services.ast_code_generator.app.ast_code_generator._generate_body": {
        "name": "src.services.ast_code_generator.app.ast_code_generator._generate_body",
        "type": "function",
        "service": "src",
        "file_path": "src/services/ast_code_generator/app/ast_code_generator.py",
        "parent": "src.services.ast_code_generator.app.ast_code_generator",
        "dependencies": [],
        "dependents": [
          "src.services.ast_code_generator.app.ast_code_generator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Generate code for the function body."
      },
      "src.services.ast_code_generator.app.ast_code_generator._generate_expression": {
        "name": "src.services.ast_code_generator.app.ast_code_generator._generate_expression",
        "type": "function",
        "service": "src",
        "file_path": "src/services/ast_code_generator/app/ast_code_generator.py",
        "parent": "src.services.ast_code_generator.app.ast_code_generator",
        "dependencies": [],
        "dependents": [
          "src.services.ast_code_generator.app.ast_code_generator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Generate code for an expression."
      },
      "src.services.ast_code_generator.app.ast_code_generator._add_safety_measures": {
        "name": "src.services.ast_code_generator.app.ast_code_generator._add_safety_measures",
        "type": "function",
        "service": "src",
        "file_path": "src/services/ast_code_generator/app/ast_code_generator.py",
        "parent": "src.services.ast_code_generator.app.ast_code_generator",
        "dependencies": [],
        "dependents": [
          "src.services.ast_code_generator.app.ast_code_generator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Add error handling and safety measures to the code."
      },
      "src.services.ast_code_generator.app.ast_utils": {
        "name": "src.services.ast_code_generator.app.ast_utils",
        "type": "module",
        "service": "src",
        "file_path": "src/services/ast_code_generator/app/ast_utils.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.ast_code_generator.app.ast_utils.generate_function_stub": {
        "name": "src.services.ast_code_generator.app.ast_utils.generate_function_stub",
        "type": "function",
        "service": "src",
        "file_path": "src/services/ast_code_generator/app/ast_utils.py",
        "parent": "src.services.ast_code_generator.app.ast_utils",
        "dependencies": [],
        "dependents": [
          "src.services.ast_code_generator.app.ast_utils"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.ast_code_generator.app.ast_utils.optimize_ast": {
        "name": "src.services.ast_code_generator.app.ast_utils.optimize_ast",
        "type": "function",
        "service": "src",
        "file_path": "src/services/ast_code_generator/app/ast_utils.py",
        "parent": "src.services.ast_code_generator.app.ast_utils",
        "dependencies": [],
        "dependents": [
          "src.services.ast_code_generator.app.ast_utils"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Apply optimizations to the AST."
      },
      "src.services.ast_code_generator.app.ast_utils.apply_style": {
        "name": "src.services.ast_code_generator.app.ast_utils.apply_style",
        "type": "function",
        "service": "src",
        "file_path": "src/services/ast_code_generator/app/ast_utils.py",
        "parent": "src.services.ast_code_generator.app.ast_utils",
        "dependencies": [],
        "dependents": [
          "src.services.ast_code_generator.app.ast_utils"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Apply style formatting to the code."
      },
      "src.services.ast_code_generator.app.ast_utils.add_comments": {
        "name": "src.services.ast_code_generator.app.ast_utils.add_comments",
        "type": "function",
        "service": "src",
        "file_path": "src/services/ast_code_generator/app/ast_utils.py",
        "parent": "src.services.ast_code_generator.app.ast_utils",
        "dependencies": [],
        "dependents": [
          "src.services.ast_code_generator.app.ast_utils"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Add helpful comments to the code."
      },
      "src.services.constraint_relaxer.app.config": {
        "name": "src.services.constraint_relaxer.app.config",
        "type": "module",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/config.py",
        "parent": null,
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.main"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Configuration for the Constraint Relaxer Service."
      },
      "src.services.constraint_relaxer.app.config.AppConfig": {
        "name": "src.services.constraint_relaxer.app.config.AppConfig",
        "type": "class",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/config.py",
        "parent": "src.services.constraint_relaxer.app.config",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.config"
        ],
        "methods": [
          "__init__"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Configuration class for the Constraint Relaxer Service."
      },
      "src.services.constraint_relaxer.app.config.__init__": {
        "name": "src.services.constraint_relaxer.app.config.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/config.py",
        "parent": "src.services.constraint_relaxer.app.config",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.config"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize configuration from environment variables with defaults."
      },
      "src.services.constraint_relaxer.app.client": {
        "name": "src.services.constraint_relaxer.app.client",
        "type": "module",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/client.py",
        "parent": null,
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.main"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event bus client for connecting to Apache Pulsar."
      },
      "src.services.constraint_relaxer.app.client.EventBusClient": {
        "name": "src.services.constraint_relaxer.app.client.EventBusClient",
        "type": "class",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/client.py",
        "parent": "src.services.constraint_relaxer.app.client",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.client"
        ],
        "methods": [
          "__init__"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Client for interacting with the Apache Pulsar event bus."
      },
      "src.services.constraint_relaxer.app.client.__init__": {
        "name": "src.services.constraint_relaxer.app.client.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/client.py",
        "parent": "src.services.constraint_relaxer.app.client",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.client"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the event bus client."
      },
      "src.services.constraint_relaxer.app.__init__": {
        "name": "src.services.constraint_relaxer.app.__init__",
        "type": "module",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.constraint_relaxer.app.__init__.is_int_value": {
        "name": "src.services.constraint_relaxer.app.__init__.is_int_value",
        "type": "function",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/__init__.py",
        "parent": "src.services.constraint_relaxer.app.__init__",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.__init__"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Validate if a value is an integer."
      },
      "src.services.constraint_relaxer.app.__init__.is_int": {
        "name": "src.services.constraint_relaxer.app.__init__.is_int",
        "type": "function",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/__init__.py",
        "parent": "src.services.constraint_relaxer.app.__init__",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.__init__"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Validate if a value is an integer."
      },
      "src.services.constraint_relaxer.app.__init__.is_real": {
        "name": "src.services.constraint_relaxer.app.__init__.is_real",
        "type": "function",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/__init__.py",
        "parent": "src.services.constraint_relaxer.app.__init__",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.__init__"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Validate if a value is a real number (float or int)."
      },
      "src.services.constraint_relaxer.app.__init__.And": {
        "name": "src.services.constraint_relaxer.app.__init__.And",
        "type": "class",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/__init__.py",
        "parent": "src.services.constraint_relaxer.app.__init__",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.__init__"
        ],
        "methods": [
          "__init__",
          "evaluate"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Logical AND operator for constraints."
      },
      "src.services.constraint_relaxer.app.__init__.Or": {
        "name": "src.services.constraint_relaxer.app.__init__.Or",
        "type": "class",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/__init__.py",
        "parent": "src.services.constraint_relaxer.app.__init__",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.__init__"
        ],
        "methods": [
          "__init__",
          "evaluate"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Logical OR operator for constraints."
      },
      "src.services.constraint_relaxer.app.__init__.Not": {
        "name": "src.services.constraint_relaxer.app.__init__.Not",
        "type": "class",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/__init__.py",
        "parent": "src.services.constraint_relaxer.app.__init__",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.__init__"
        ],
        "methods": [
          "__init__",
          "evaluate"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Logical NOT operator for constraints."
      },
      "src.services.constraint_relaxer.app.__init__.Int": {
        "name": "src.services.constraint_relaxer.app.__init__.Int",
        "type": "class",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/__init__.py",
        "parent": "src.services.constraint_relaxer.app.__init__",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.__init__"
        ],
        "methods": [
          "__init__",
          "validate"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Integer type constraint."
      },
      "src.services.constraint_relaxer.app.__init__.Real": {
        "name": "src.services.constraint_relaxer.app.__init__.Real",
        "type": "class",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/__init__.py",
        "parent": "src.services.constraint_relaxer.app.__init__",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.__init__"
        ],
        "methods": [
          "__init__",
          "validate"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Real number type constraint."
      },
      "src.services.constraint_relaxer.app.__init__.Bool": {
        "name": "src.services.constraint_relaxer.app.__init__.Bool",
        "type": "class",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/__init__.py",
        "parent": "src.services.constraint_relaxer.app.__init__",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.__init__"
        ],
        "methods": [
          "validate"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Boolean type constraint."
      },
      "src.services.constraint_relaxer.app.__init__.Solver": {
        "name": "src.services.constraint_relaxer.app.__init__.Solver",
        "type": "class",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/__init__.py",
        "parent": "src.services.constraint_relaxer.app.__init__",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.__init__"
        ],
        "methods": [
          "__init__",
          "add_constraint",
          "solve"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Constraint solver for validation."
      },
      "src.services.constraint_relaxer.app.__init__.__init__": {
        "name": "src.services.constraint_relaxer.app.__init__.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/__init__.py",
        "parent": "src.services.constraint_relaxer.app.__init__",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.__init__",
          "src.services.constraint_relaxer.app.__init__",
          "src.services.constraint_relaxer.app.__init__",
          "src.services.constraint_relaxer.app.__init__",
          "src.services.constraint_relaxer.app.__init__",
          "src.services.constraint_relaxer.app.__init__"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.constraint_relaxer.app.__init__.evaluate": {
        "name": "src.services.constraint_relaxer.app.__init__.evaluate",
        "type": "function",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/__init__.py",
        "parent": "src.services.constraint_relaxer.app.__init__",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.__init__",
          "src.services.constraint_relaxer.app.__init__",
          "src.services.constraint_relaxer.app.__init__"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.constraint_relaxer.app.__init__.validate": {
        "name": "src.services.constraint_relaxer.app.__init__.validate",
        "type": "function",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/__init__.py",
        "parent": "src.services.constraint_relaxer.app.__init__",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.__init__",
          "src.services.constraint_relaxer.app.__init__",
          "src.services.constraint_relaxer.app.__init__"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.constraint_relaxer.app.__init__.add_constraint": {
        "name": "src.services.constraint_relaxer.app.__init__.add_constraint",
        "type": "function",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/__init__.py",
        "parent": "src.services.constraint_relaxer.app.__init__",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.__init__"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.constraint_relaxer.app.__init__.solve": {
        "name": "src.services.constraint_relaxer.app.__init__.solve",
        "type": "function",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/__init__.py",
        "parent": "src.services.constraint_relaxer.app.__init__",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.__init__"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Solve the constraints given the context."
      },
      "src.services.constraint_relaxer.app.constraint_relaxer": {
        "name": "src.services.constraint_relaxer.app.constraint_relaxer",
        "type": "module",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/constraint_relaxer.py",
        "parent": null,
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.main"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Advanced Model-Based Constraint Relaxation Engine."
      },
      "src.services.constraint_relaxer.app.constraint_relaxer.ModelBasedConstraintRelaxer": {
        "name": "src.services.constraint_relaxer.app.constraint_relaxer.ModelBasedConstraintRelaxer",
        "type": "class",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/constraint_relaxer.py",
        "parent": "src.services.constraint_relaxer.app.constraint_relaxer",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.constraint_relaxer"
        ],
        "methods": [
          "__init__",
          "_select_relaxation_strategy",
          "_count_variables",
          "_constraint_to_z3",
          "_parse_constraint_string"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Advanced constraint relaxer that uses model-guided techniques to intelligently"
      },
      "src.services.constraint_relaxer.app.constraint_relaxer.__init__": {
        "name": "src.services.constraint_relaxer.app.constraint_relaxer.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/constraint_relaxer.py",
        "parent": "src.services.constraint_relaxer.app.constraint_relaxer",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.constraint_relaxer"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the model-based constraint relaxer with advanced parameters."
      },
      "src.services.constraint_relaxer.app.constraint_relaxer._select_relaxation_strategy": {
        "name": "src.services.constraint_relaxer.app.constraint_relaxer._select_relaxation_strategy",
        "type": "function",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/constraint_relaxer.py",
        "parent": "src.services.constraint_relaxer.app.constraint_relaxer",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.constraint_relaxer"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Select the most appropriate relaxation strategy based on the specification."
      },
      "src.services.constraint_relaxer.app.constraint_relaxer._count_variables": {
        "name": "src.services.constraint_relaxer.app.constraint_relaxer._count_variables",
        "type": "function",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/constraint_relaxer.py",
        "parent": "src.services.constraint_relaxer.app.constraint_relaxer",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.constraint_relaxer"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Count the number of unique variables in a specification."
      },
      "src.services.constraint_relaxer.app.constraint_relaxer._constraint_to_z3": {
        "name": "src.services.constraint_relaxer.app.constraint_relaxer._constraint_to_z3",
        "type": "function",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/constraint_relaxer.py",
        "parent": "src.services.constraint_relaxer.app.constraint_relaxer",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.constraint_relaxer"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Convert a constraint to Z3 format."
      },
      "src.services.constraint_relaxer.app.constraint_relaxer._parse_constraint_string": {
        "name": "src.services.constraint_relaxer.app.constraint_relaxer._parse_constraint_string",
        "type": "function",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/constraint_relaxer.py",
        "parent": "src.services.constraint_relaxer.app.constraint_relaxer",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.constraint_relaxer"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Parse a constraint string into a Z3 formula."
      },
      "src.services.constraint_relaxer.app.main": {
        "name": "src.services.constraint_relaxer.app.main",
        "type": "module",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/main.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Model-Based Constraint Relaxer Service"
      },
      "src.services.constraint_relaxer.app.main.ConstraintRelaxerService": {
        "name": "src.services.constraint_relaxer.app.main.ConstraintRelaxerService",
        "type": "class",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/main.py",
        "parent": "src.services.constraint_relaxer.app.main",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.main"
        ],
        "methods": [
          "__init__",
          "_handle_sigterm",
          "_deserialize_spec",
          "_deserialize_verification_result",
          "_serialize_spec"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Main service class for the Model-Based Constraint Relaxer container."
      },
      "src.services.constraint_relaxer.app.main.__init__": {
        "name": "src.services.constraint_relaxer.app.main.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/main.py",
        "parent": "src.services.constraint_relaxer.app.main",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.main"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the service."
      },
      "src.services.constraint_relaxer.app.main._handle_sigterm": {
        "name": "src.services.constraint_relaxer.app.main._handle_sigterm",
        "type": "function",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/main.py",
        "parent": "src.services.constraint_relaxer.app.main",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.main"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Handle termination signals."
      },
      "src.services.constraint_relaxer.app.main._deserialize_spec": {
        "name": "src.services.constraint_relaxer.app.main._deserialize_spec",
        "type": "function",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/main.py",
        "parent": "src.services.constraint_relaxer.app.main",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.main"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Deserialize formal specification from JSON data."
      },
      "src.services.constraint_relaxer.app.main._deserialize_verification_result": {
        "name": "src.services.constraint_relaxer.app.main._deserialize_verification_result",
        "type": "function",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/main.py",
        "parent": "src.services.constraint_relaxer.app.main",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.main"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Deserialize verification result from JSON data."
      },
      "src.services.constraint_relaxer.app.main._serialize_spec": {
        "name": "src.services.constraint_relaxer.app.main._serialize_spec",
        "type": "function",
        "service": "src",
        "file_path": "src/services/constraint_relaxer/app/main.py",
        "parent": "src.services.constraint_relaxer.app.main",
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.main"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Serialize formal specification to JSON data."
      },
      "src.services.shared.utils.z3_utils": {
        "name": "src.services.shared.utils.z3_utils",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/utils/z3_utils.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Utilities for working with Z3 solver."
      },
      "src.services.shared.utils.z3_utils._solver": {
        "name": "src.services.shared.utils.z3_utils._solver",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/utils/z3_utils.py",
        "parent": "src.services.shared.utils.z3_utils",
        "dependencies": [],
        "dependents": [
          "src.services.shared.utils.z3_utils"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.utils.z3_utils._check_sat": {
        "name": "src.services.shared.utils.z3_utils._check_sat",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/utils/z3_utils.py",
        "parent": "src.services.shared.utils.z3_utils",
        "dependencies": [],
        "dependents": [
          "src.services.shared.utils.z3_utils"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.utils.z3_utils._check_unsat": {
        "name": "src.services.shared.utils.z3_utils._check_unsat",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/utils/z3_utils.py",
        "parent": "src.services.shared.utils.z3_utils",
        "dependencies": [],
        "dependents": [
          "src.services.shared.utils.z3_utils"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.utils.z3_utils._is_expr_ref": {
        "name": "src.services.shared.utils.z3_utils._is_expr_ref",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/utils/z3_utils.py",
        "parent": "src.services.shared.utils.z3_utils",
        "dependencies": [],
        "dependents": [
          "src.services.shared.utils.z3_utils"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.utils.z3_utils._is_const": {
        "name": "src.services.shared.utils.z3_utils._is_const",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/utils/z3_utils.py",
        "parent": "src.services.shared.utils.z3_utils",
        "dependencies": [],
        "dependents": [
          "src.services.shared.utils.z3_utils"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.utils.z3_utils._is_bool": {
        "name": "src.services.shared.utils.z3_utils._is_bool",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/utils/z3_utils.py",
        "parent": "src.services.shared.utils.z3_utils",
        "dependencies": [],
        "dependents": [
          "src.services.shared.utils.z3_utils"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.utils.z3_utils._is_int_value": {
        "name": "src.services.shared.utils.z3_utils._is_int_value",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/utils/z3_utils.py",
        "parent": "src.services.shared.utils.z3_utils",
        "dependencies": [],
        "dependents": [
          "src.services.shared.utils.z3_utils"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.utils.z3_utils._is_real": {
        "name": "src.services.shared.utils.z3_utils._is_real",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/utils/z3_utils.py",
        "parent": "src.services.shared.utils.z3_utils",
        "dependencies": [],
        "dependents": [
          "src.services.shared.utils.z3_utils"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.utils.z3_utils._create_bool": {
        "name": "src.services.shared.utils.z3_utils._create_bool",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/utils/z3_utils.py",
        "parent": "src.services.shared.utils.z3_utils",
        "dependencies": [],
        "dependents": [
          "src.services.shared.utils.z3_utils"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.utils.z3_utils._is_true": {
        "name": "src.services.shared.utils.z3_utils._is_true",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/utils/z3_utils.py",
        "parent": "src.services.shared.utils.z3_utils",
        "dependencies": [],
        "dependents": [
          "src.services.shared.utils.z3_utils"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.utils.z3_utils._optimize": {
        "name": "src.services.shared.utils.z3_utils._optimize",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/utils/z3_utils.py",
        "parent": "src.services.shared.utils.z3_utils",
        "dependencies": [],
        "dependents": [
          "src.services.shared.utils.z3_utils"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.utils.z3_utils._is_eq": {
        "name": "src.services.shared.utils.z3_utils._is_eq",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/utils/z3_utils.py",
        "parent": "src.services.shared.utils.z3_utils",
        "dependencies": [],
        "dependents": [
          "src.services.shared.utils.z3_utils"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.utils.z3_utils._is_arith": {
        "name": "src.services.shared.utils.z3_utils._is_arith",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/utils/z3_utils.py",
        "parent": "src.services.shared.utils.z3_utils",
        "dependencies": [],
        "dependents": [
          "src.services.shared.utils.z3_utils"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.utils.z3_utils._is_and": {
        "name": "src.services.shared.utils.z3_utils._is_and",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/utils/z3_utils.py",
        "parent": "src.services.shared.utils.z3_utils",
        "dependencies": [],
        "dependents": [
          "src.services.shared.utils.z3_utils"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.utils.z3_utils._and": {
        "name": "src.services.shared.utils.z3_utils._and",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/utils/z3_utils.py",
        "parent": "src.services.shared.utils.z3_utils",
        "dependencies": [],
        "dependents": [
          "src.services.shared.utils.z3_utils"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.utils.z3_utils._is_app": {
        "name": "src.services.shared.utils.z3_utils._is_app",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/utils/z3_utils.py",
        "parent": "src.services.shared.utils.z3_utils",
        "dependencies": [],
        "dependents": [
          "src.services.shared.utils.z3_utils"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.utils.z3_utils.get_model": {
        "name": "src.services.shared.utils.z3_utils.get_model",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/utils/z3_utils.py",
        "parent": "src.services.shared.utils.z3_utils",
        "dependencies": [],
        "dependents": [
          "src.services.shared.utils.z3_utils"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get a model for a set of constraints if satisfiable."
      },
      "src.services.shared.utils.z3_utils.extract_variables": {
        "name": "src.services.shared.utils.z3_utils.extract_variables",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/utils/z3_utils.py",
        "parent": "src.services.shared.utils.z3_utils",
        "dependencies": [],
        "dependents": [
          "src.services.shared.utils.z3_utils"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Extract all variables from a Z3 expression."
      },
      "src.services.shared.utils.z3_utils.is_satisfiable": {
        "name": "src.services.shared.utils.z3_utils.is_satisfiable",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/utils/z3_utils.py",
        "parent": "src.services.shared.utils.z3_utils",
        "dependencies": [],
        "dependents": [
          "src.services.shared.utils.z3_utils"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Check if a set of constraints is satisfiable."
      },
      "src.services.shared.utils.z3_utils.get_unsat_core": {
        "name": "src.services.shared.utils.z3_utils.get_unsat_core",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/utils/z3_utils.py",
        "parent": "src.services.shared.utils.z3_utils",
        "dependencies": [],
        "dependents": [
          "src.services.shared.utils.z3_utils"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get the indices of constraints in the UNSAT core."
      },
      "src.services.shared.utils.z3_utils.optimize_constraints": {
        "name": "src.services.shared.utils.z3_utils.optimize_constraints",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/utils/z3_utils.py",
        "parent": "src.services.shared.utils.z3_utils",
        "dependencies": [],
        "dependents": [
          "src.services.shared.utils.z3_utils"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Use Z3 optimizer to find the maximum number of satisfiable constraints."
      },
      "src.services.shared.utils.z3_utils.relax_constraint": {
        "name": "src.services.shared.utils.z3_utils.relax_constraint",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/utils/z3_utils.py",
        "parent": "src.services.shared.utils.z3_utils",
        "dependencies": [],
        "dependents": [
          "src.services.shared.utils.z3_utils"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Try to relax a constraint to make it easier to satisfy."
      },
      "src.services.shared.utils.__init__": {
        "name": "src.services.shared.utils.__init__",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/utils/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.models.event_avro": {
        "name": "src.services.shared.models.event_avro",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/models/event_avro.py",
        "parent": null,
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.tests.event_avro_test",
          "src.services.shared.models.tests.test_event_converter"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Avro-compatible event model for Apache Pulsar integration."
      },
      "src.services.shared.models.event_avro.EventAvro": {
        "name": "src.services.shared.models.event_avro.EventAvro",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/event_avro.py",
        "parent": "src.services.shared.models.event_avro",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.event_avro"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Avro-compatible event model for Apache Pulsar."
      },
      "src.services.shared.models.event_avro.Meta": {
        "name": "src.services.shared.models.event_avro.Meta",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/event_avro.py",
        "parent": "src.services.shared.models.event_avro",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.event_avro"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Avro schema metadata."
      },
      "src.services.shared.models.enums": {
        "name": "src.services.shared.models.enums",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/models/enums.py",
        "parent": null,
        "dependencies": [],
        "dependents": [
          "src.orchestration.orchestration",
          "src.services.component_factory.component_factory",
          "src.services.meta_learner.meta_learner",
          "src.services.meta_learner.main",
          "src.services.agents.app.agent_workflow",
          "src.services.agents.app.models.events",
          "infra.registration.registration",
          "infra.registration.registration"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Enumeration types for system-wide constants and identifiers."
      },
      "src.services.shared.models.enums.is_failure_event": {
        "name": "src.services.shared.models.enums.is_failure_event",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/enums.py",
        "parent": "src.services.shared.models.enums",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.enums"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Check if an event type represents a failure."
      },
      "src.services.shared.models.enums.get_retry_event_type": {
        "name": "src.services.shared.models.enums.get_retry_event_type",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/enums.py",
        "parent": "src.services.shared.models.enums",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.enums"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get the retry event type for a failed event."
      },
      "src.services.shared.models.enums.Components": {
        "name": "src.services.shared.models.enums.Components",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/enums.py",
        "parent": "src.services.shared.models.enums",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.enums"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Constants for component identification"
      },
      "src.services.shared.models.enums.Events": {
        "name": "src.services.shared.models.enums.Events",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/enums.py",
        "parent": "src.services.shared.models.enums",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.enums"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Constants for event types and topics"
      },
      "src.services.shared.models.enums.EventPriority": {
        "name": "src.services.shared.models.enums.EventPriority",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/enums.py",
        "parent": "src.services.shared.models.enums",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.enums"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event priority levels."
      },
      "src.services.shared.models.enums.EventType": {
        "name": "src.services.shared.models.enums.EventType",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/enums.py",
        "parent": "src.services.shared.models.enums",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.enums"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Standardized event types for the system."
      },
      "src.services.shared.models.enums.Database": {
        "name": "src.services.shared.models.enums.Database",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/enums.py",
        "parent": "src.services.shared.models.enums",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.enums"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Constants for database configuration"
      },
      "src.services.shared.models.enums.DatabaseConfig": {
        "name": "src.services.shared.models.enums.DatabaseConfig",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/enums.py",
        "parent": "src.services.shared.models.enums",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.enums"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Database configuration constants"
      },
      "src.services.shared.models.enums.Paths": {
        "name": "src.services.shared.models.enums.Paths",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/enums.py",
        "parent": "src.services.shared.models.enums",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.enums"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Constants for file and directory paths"
      },
      "src.services.shared.models.enums.Techniques": {
        "name": "src.services.shared.models.enums.Techniques",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/enums.py",
        "parent": "src.services.shared.models.enums",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.enums"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Constants for neural code generation techniques"
      },
      "src.services.shared.models.enums.ModelConfig": {
        "name": "src.services.shared.models.enums.ModelConfig",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/enums.py",
        "parent": "src.services.shared.models.enums",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.enums"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Constants for model configuration"
      },
      "src.services.shared.models.enums.Metrics": {
        "name": "src.services.shared.models.enums.Metrics",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/enums.py",
        "parent": "src.services.shared.models.enums",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.enums"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Constants for metrics collection"
      },
      "src.services.shared.models.enums.MetricsConfig": {
        "name": "src.services.shared.models.enums.MetricsConfig",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/enums.py",
        "parent": "src.services.shared.models.enums",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.enums"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Configuration for metrics collection"
      },
      "src.services.shared.models.enums.DeploymentConfig": {
        "name": "src.services.shared.models.enums.DeploymentConfig",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/enums.py",
        "parent": "src.services.shared.models.enums",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.enums"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Constants for deployment configuration"
      },
      "src.services.shared.models.enums.ErrorCodes": {
        "name": "src.services.shared.models.enums.ErrorCodes",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/enums.py",
        "parent": "src.services.shared.models.enums",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.enums"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Constants for error and status codes"
      },
      "src.services.shared.models.enums.Constants": {
        "name": "src.services.shared.models.enums.Constants",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/enums.py",
        "parent": "src.services.shared.models.enums",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.enums"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Container for all system constants"
      },
      "src.services.shared.models.enums.ProcessingMode": {
        "name": "src.services.shared.models.enums.ProcessingMode",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/enums.py",
        "parent": "src.services.shared.models.enums",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.enums"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Processing modes for query handling"
      },
      "src.services.shared.models.enums.TaskStatus": {
        "name": "src.services.shared.models.enums.TaskStatus",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/enums.py",
        "parent": "src.services.shared.models.enums",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.enums"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Status of a task in the system"
      },
      "src.services.shared.models.enums.TaskPriority": {
        "name": "src.services.shared.models.enums.TaskPriority",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/enums.py",
        "parent": "src.services.shared.models.enums",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.enums"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Priority levels for tasks"
      },
      "src.services.shared.models.enums.ProjectType": {
        "name": "src.services.shared.models.enums.ProjectType",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/enums.py",
        "parent": "src.services.shared.models.enums",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.enums"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Project types."
      },
      "src.services.shared.models.enums.ProjectStatus": {
        "name": "src.services.shared.models.enums.ProjectStatus",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/enums.py",
        "parent": "src.services.shared.models.enums",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.enums"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Project status."
      },
      "src.services.shared.models.enums.SynthesisStrategy": {
        "name": "src.services.shared.models.enums.SynthesisStrategy",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/enums.py",
        "parent": "src.services.shared.models.enums",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.enums",
          "src.services.shared.models.enums"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Types of synthesis strategies."
      },
      "src.services.shared.models.enums.DisclosureLevel": {
        "name": "src.services.shared.models.enums.DisclosureLevel",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/enums.py",
        "parent": "src.services.shared.models.enums",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.enums",
          "src.services.shared.models.enums"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Progressive disclosure levels for code synthesis."
      },
      "src.services.shared.models.enums.HealthStatus": {
        "name": "src.services.shared.models.enums.HealthStatus",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/enums.py",
        "parent": "src.services.shared.models.enums",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.enums"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Health status constants."
      },
      "src.services.shared.models.enums.VerificationResult": {
        "name": "src.services.shared.models.enums.VerificationResult",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/enums.py",
        "parent": "src.services.shared.models.enums",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.enums"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Result of verification process."
      },
      "src.services.shared.models.domain": {
        "name": "src.services.shared.models.domain",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/models/domain.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.models.domain.CodeGenerationRequestedEvent": {
        "name": "src.services.shared.models.domain.CodeGenerationRequestedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/domain.py",
        "parent": "src.services.shared.models.domain",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.domain"
        ],
        "methods": [
          "create"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event for requesting code generation."
      },
      "src.services.shared.models.domain.CodeGenerationCompletedEvent": {
        "name": "src.services.shared.models.domain.CodeGenerationCompletedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/domain.py",
        "parent": "src.services.shared.models.domain",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.domain"
        ],
        "methods": [
          "create"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event for completed code generation."
      },
      "src.services.shared.models.domain.CodeGenerationFailedEvent": {
        "name": "src.services.shared.models.domain.CodeGenerationFailedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/domain.py",
        "parent": "src.services.shared.models.domain",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.domain"
        ],
        "methods": [
          "create"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event for failed code generation."
      },
      "src.services.shared.models.domain.KnowledgeQueryRequestedEvent": {
        "name": "src.services.shared.models.domain.KnowledgeQueryRequestedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/domain.py",
        "parent": "src.services.shared.models.domain",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.domain"
        ],
        "methods": [
          "create"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event for requesting a knowledge base query."
      },
      "src.services.shared.models.domain.KnowledgeQueryCompletedEvent": {
        "name": "src.services.shared.models.domain.KnowledgeQueryCompletedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/domain.py",
        "parent": "src.services.shared.models.domain",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.domain"
        ],
        "methods": [
          "create"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event for completed knowledge base query."
      },
      "src.services.shared.models.domain.KnowledgeUpdatedEvent": {
        "name": "src.services.shared.models.domain.KnowledgeUpdatedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/domain.py",
        "parent": "src.services.shared.models.domain",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.domain"
        ],
        "methods": [
          "create"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event for knowledge base updates."
      },
      "src.services.shared.models.domain.SpecSheetCreatedEvent": {
        "name": "src.services.shared.models.domain.SpecSheetCreatedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/domain.py",
        "parent": "src.services.shared.models.domain",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.domain"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event for spec sheet creation."
      },
      "src.services.shared.models.domain.SpecSheetUpdatedEvent": {
        "name": "src.services.shared.models.domain.SpecSheetUpdatedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/domain.py",
        "parent": "src.services.shared.models.domain",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.domain"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event for spec sheet updates."
      },
      "src.services.shared.models.domain.SpecSheetDeletedEvent": {
        "name": "src.services.shared.models.domain.SpecSheetDeletedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/domain.py",
        "parent": "src.services.shared.models.domain",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.domain"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event for spec sheet deletion."
      },
      "src.services.shared.models.domain.SpecSheetPublishedEvent": {
        "name": "src.services.shared.models.domain.SpecSheetPublishedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/domain.py",
        "parent": "src.services.shared.models.domain",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.domain"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event for spec sheet publication."
      },
      "src.services.shared.models.domain.SpecSheetDeprecatedEvent": {
        "name": "src.services.shared.models.domain.SpecSheetDeprecatedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/domain.py",
        "parent": "src.services.shared.models.domain",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.domain"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event for spec sheet deprecation."
      },
      "src.services.shared.models.domain.SpecSheetArchivedEvent": {
        "name": "src.services.shared.models.domain.SpecSheetArchivedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/domain.py",
        "parent": "src.services.shared.models.domain",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.domain"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event for spec sheet archival."
      },
      "src.services.shared.models.domain.SpecInstanceCreatedEvent": {
        "name": "src.services.shared.models.domain.SpecInstanceCreatedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/domain.py",
        "parent": "src.services.shared.models.domain",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.domain"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event for spec instance creation."
      },
      "src.services.shared.models.domain.SpecInstanceUpdatedEvent": {
        "name": "src.services.shared.models.domain.SpecInstanceUpdatedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/domain.py",
        "parent": "src.services.shared.models.domain",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.domain"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event for spec instance updates."
      },
      "src.services.shared.models.domain.SpecInstanceCompletedEvent": {
        "name": "src.services.shared.models.domain.SpecInstanceCompletedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/domain.py",
        "parent": "src.services.shared.models.domain",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.domain"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event for spec instance completion."
      },
      "src.services.shared.models.domain.SpecInstanceValidatedEvent": {
        "name": "src.services.shared.models.domain.SpecInstanceValidatedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/domain.py",
        "parent": "src.services.shared.models.domain",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.domain"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event for spec instance validation."
      },
      "src.services.shared.models.domain.SpecInstanceDeletedEvent": {
        "name": "src.services.shared.models.domain.SpecInstanceDeletedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/domain.py",
        "parent": "src.services.shared.models.domain",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.domain"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event for spec instance deletion."
      },
      "src.services.shared.models.domain.create": {
        "name": "src.services.shared.models.domain.create",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/domain.py",
        "parent": "src.services.shared.models.domain",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.domain",
          "src.services.shared.models.domain",
          "src.services.shared.models.domain",
          "src.services.shared.models.domain",
          "src.services.shared.models.domain",
          "src.services.shared.models.domain"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Factory method to create a knowledge updated event."
      },
      "src.services.shared.models.events": {
        "name": "src.services.shared.models.events",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/models/events.py",
        "parent": null,
        "dependencies": [],
        "dependents": [
          "src.orchestration.orchestration",
          "src.orchestration.orchestration",
          "src.orchestration.orchestration",
          "src.orchestration.orchestration",
          "src.orchestration.orchestration",
          "src.services.shared.models.tests.event_avro_test",
          "src.services.shared.models.tests.test_event_converter",
          "src.services.shared.models.tests.test_event_converter",
          "src.services.shared.models.tests.test_event_converter",
          "infra.pulsar.event_client"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event models for the system's event-driven architecture."
      },
      "src.services.shared.models.events.CodeGenerationRequestPayload": {
        "name": "src.services.shared.models.events.CodeGenerationRequestPayload",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/events.py",
        "parent": "src.services.shared.models.events",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.events"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Payload model for code generation requests."
      },
      "src.services.shared.models.events.CodeGenerationCompletedPayload": {
        "name": "src.services.shared.models.events.CodeGenerationCompletedPayload",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/events.py",
        "parent": "src.services.shared.models.events",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.events"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Payload model for completed code generation."
      },
      "src.services.shared.models.events.CodeGenerationFailedPayload": {
        "name": "src.services.shared.models.events.CodeGenerationFailedPayload",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/events.py",
        "parent": "src.services.shared.models.events",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.events"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Payload model for failed code generation."
      },
      "src.services.shared.models.events.KnowledgeQueryPayload": {
        "name": "src.services.shared.models.events.KnowledgeQueryPayload",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/events.py",
        "parent": "src.services.shared.models.events",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.events"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Payload model for knowledge query requests."
      },
      "src.services.shared.models.events.KnowledgeQueryCompletedPayload": {
        "name": "src.services.shared.models.events.KnowledgeQueryCompletedPayload",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/events.py",
        "parent": "src.services.shared.models.events",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.events"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Payload model for completed knowledge queries."
      },
      "src.services.shared.models.events.KnowledgeUpdatedPayload": {
        "name": "src.services.shared.models.events.KnowledgeUpdatedPayload",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/events.py",
        "parent": "src.services.shared.models.events",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.events"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Payload model for knowledge update events."
      },
      "src.services.shared.models.events.SpecSheetEvent": {
        "name": "src.services.shared.models.events.SpecSheetEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/events.py",
        "parent": "src.services.shared.models.events",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.events"
        ],
        "methods": [
          "ensure_payload_consistency"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Base class for spec sheet-related events"
      },
      "src.services.shared.models.events.SpecInstanceEvent": {
        "name": "src.services.shared.models.events.SpecInstanceEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/events.py",
        "parent": "src.services.shared.models.events",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.events"
        ],
        "methods": [
          "ensure_payload_consistency"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Base class for spec sheet instance-related events"
      },
      "src.services.shared.models.events.CodeGenerationRequestedEvent": {
        "name": "src.services.shared.models.events.CodeGenerationRequestedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/events.py",
        "parent": "src.services.shared.models.events",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.events"
        ],
        "methods": [
          "create"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event for requesting code generation."
      },
      "src.services.shared.models.events.CodeGenerationCompletedEvent": {
        "name": "src.services.shared.models.events.CodeGenerationCompletedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/events.py",
        "parent": "src.services.shared.models.events",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.events"
        ],
        "methods": [
          "create"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event for completed code generation."
      },
      "src.services.shared.models.events.CodeGenerationFailedEvent": {
        "name": "src.services.shared.models.events.CodeGenerationFailedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/events.py",
        "parent": "src.services.shared.models.events",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.events"
        ],
        "methods": [
          "create"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event for failed code generation."
      },
      "src.services.shared.models.events.KnowledgeQueryRequestedEvent": {
        "name": "src.services.shared.models.events.KnowledgeQueryRequestedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/events.py",
        "parent": "src.services.shared.models.events",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.events"
        ],
        "methods": [
          "create"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event for requesting a knowledge base query."
      },
      "src.services.shared.models.events.KnowledgeQueryCompletedEvent": {
        "name": "src.services.shared.models.events.KnowledgeQueryCompletedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/events.py",
        "parent": "src.services.shared.models.events",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.events"
        ],
        "methods": [
          "create"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event for completed knowledge base query."
      },
      "src.services.shared.models.events.KnowledgeUpdatedEvent": {
        "name": "src.services.shared.models.events.KnowledgeUpdatedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/events.py",
        "parent": "src.services.shared.models.events",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.events"
        ],
        "methods": [
          "create"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event for knowledge base updates."
      },
      "src.services.shared.models.events.SpecSheetCreatedEvent": {
        "name": "src.services.shared.models.events.SpecSheetCreatedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/events.py",
        "parent": "src.services.shared.models.events",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.events"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event for spec sheet creation."
      },
      "src.services.shared.models.events.SpecSheetUpdatedEvent": {
        "name": "src.services.shared.models.events.SpecSheetUpdatedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/events.py",
        "parent": "src.services.shared.models.events",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.events"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event for spec sheet updates."
      },
      "src.services.shared.models.events.SpecSheetDeletedEvent": {
        "name": "src.services.shared.models.events.SpecSheetDeletedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/events.py",
        "parent": "src.services.shared.models.events",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.events"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event for spec sheet deletion."
      },
      "src.services.shared.models.events.ensure_payload_consistency": {
        "name": "src.services.shared.models.events.ensure_payload_consistency",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/events.py",
        "parent": "src.services.shared.models.events",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.events",
          "src.services.shared.models.events"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Ensure that instance data is consistent with payload."
      },
      "src.services.shared.models.events.create": {
        "name": "src.services.shared.models.events.create",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/events.py",
        "parent": "src.services.shared.models.events",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.events",
          "src.services.shared.models.events",
          "src.services.shared.models.events",
          "src.services.shared.models.events",
          "src.services.shared.models.events",
          "src.services.shared.models.events"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Factory method to create a knowledge updated event."
      },
      "src.services.shared.models.constants": {
        "name": "src.services.shared.models.constants",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/models/constants.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.models.constants.DatabaseConfig": {
        "name": "src.services.shared.models.constants.DatabaseConfig",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/constants.py",
        "parent": "src.services.shared.models.constants",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.constants"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Database configuration constants"
      },
      "src.services.shared.models.constants.Paths": {
        "name": "src.services.shared.models.constants.Paths",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/constants.py",
        "parent": "src.services.shared.models.constants",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.constants"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Constants for file and directory paths"
      },
      "src.services.shared.models.constants.ModelConfig": {
        "name": "src.services.shared.models.constants.ModelConfig",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/constants.py",
        "parent": "src.services.shared.models.constants",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.constants"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Constants for model configuration"
      },
      "src.services.shared.models.constants.MetricsConfig": {
        "name": "src.services.shared.models.constants.MetricsConfig",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/constants.py",
        "parent": "src.services.shared.models.constants",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.constants"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Configuration for metrics collection"
      },
      "src.services.shared.models.constants.DeploymentConfig": {
        "name": "src.services.shared.models.constants.DeploymentConfig",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/constants.py",
        "parent": "src.services.shared.models.constants",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.constants"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Constants for deployment configuration"
      },
      "src.services.shared.models.constants.Constants": {
        "name": "src.services.shared.models.constants.Constants",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/constants.py",
        "parent": "src.services.shared.models.constants",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.constants"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Container for all system constants"
      },
      "src.services.shared.models.schema_registry": {
        "name": "src.services.shared.models.schema_registry",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/models/schema_registry.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Apache Pulsar Schema Registry integration."
      },
      "src.services.shared.models.schema_registry.SchemaRegistryClient": {
        "name": "src.services.shared.models.schema_registry.SchemaRegistryClient",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/schema_registry.py",
        "parent": "src.services.shared.models.schema_registry",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.schema_registry"
        ],
        "methods": [
          "__init__",
          "register_schema",
          "get_schema",
          "get_latest_schema",
          "check_schema_compatibility"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Client for the Apache Pulsar Schema Registry."
      },
      "src.services.shared.models.schema_registry.register_model_schema": {
        "name": "src.services.shared.models.schema_registry.register_model_schema",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/schema_registry.py",
        "parent": "src.services.shared.models.schema_registry",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.schema_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Register a model's schema with the registry."
      },
      "src.services.shared.models.schema_registry.register_all_models": {
        "name": "src.services.shared.models.schema_registry.register_all_models",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/schema_registry.py",
        "parent": "src.services.shared.models.schema_registry",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.schema_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Register all model schemas with the registry."
      },
      "src.services.shared.models.schema_registry.__init__": {
        "name": "src.services.shared.models.schema_registry.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/schema_registry.py",
        "parent": "src.services.shared.models.schema_registry",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.schema_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the schema registry client."
      },
      "src.services.shared.models.schema_registry.register_schema": {
        "name": "src.services.shared.models.schema_registry.register_schema",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/schema_registry.py",
        "parent": "src.services.shared.models.schema_registry",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.schema_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Register a schema with the registry."
      },
      "src.services.shared.models.schema_registry.get_schema": {
        "name": "src.services.shared.models.schema_registry.get_schema",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/schema_registry.py",
        "parent": "src.services.shared.models.schema_registry",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.schema_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get a schema by ID."
      },
      "src.services.shared.models.schema_registry.get_latest_schema": {
        "name": "src.services.shared.models.schema_registry.get_latest_schema",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/schema_registry.py",
        "parent": "src.services.shared.models.schema_registry",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.schema_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get the latest schema for a subject."
      },
      "src.services.shared.models.schema_registry.check_schema_compatibility": {
        "name": "src.services.shared.models.schema_registry.check_schema_compatibility",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/schema_registry.py",
        "parent": "src.services.shared.models.schema_registry",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.schema_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Check if a schema is compatible with the latest registered schema."
      },
      "src.services.shared.models.__init__": {
        "name": "src.services.shared.models.__init__",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/models/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event models and schema registration for Apache Pulsar."
      },
      "src.services.shared.models.telemetry": {
        "name": "src.services.shared.models.telemetry",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/models/telemetry.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Telemetry manager for collecting metrics across the system."
      },
      "src.services.shared.models.telemetry.TelemetryManager": {
        "name": "src.services.shared.models.telemetry.TelemetryManager",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/telemetry.py",
        "parent": "src.services.shared.models.telemetry",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.telemetry"
        ],
        "methods": [
          "get_instance",
          "__init__",
          "record_metric",
          "get_metrics",
          "reset",
          "get_summary"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Singleton class for managing telemetry across the system."
      },
      "src.services.shared.models.telemetry.get_instance": {
        "name": "src.services.shared.models.telemetry.get_instance",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/telemetry.py",
        "parent": "src.services.shared.models.telemetry",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.telemetry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get the singleton instance."
      },
      "src.services.shared.models.telemetry.__init__": {
        "name": "src.services.shared.models.telemetry.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/telemetry.py",
        "parent": "src.services.shared.models.telemetry",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.telemetry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the telemetry manager."
      },
      "src.services.shared.models.telemetry.record_metric": {
        "name": "src.services.shared.models.telemetry.record_metric",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/telemetry.py",
        "parent": "src.services.shared.models.telemetry",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.telemetry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Record a metric with the given name and value."
      },
      "src.services.shared.models.telemetry.get_metrics": {
        "name": "src.services.shared.models.telemetry.get_metrics",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/telemetry.py",
        "parent": "src.services.shared.models.telemetry",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.telemetry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get metrics by name or all metrics if no name is provided."
      },
      "src.services.shared.models.telemetry.reset": {
        "name": "src.services.shared.models.telemetry.reset",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/telemetry.py",
        "parent": "src.services.shared.models.telemetry",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.telemetry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Reset all metrics."
      },
      "src.services.shared.models.telemetry.get_summary": {
        "name": "src.services.shared.models.telemetry.get_summary",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/telemetry.py",
        "parent": "src.services.shared.models.telemetry",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.telemetry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get a summary of all metrics."
      },
      "src.services.shared.models.types": {
        "name": "src.services.shared.models.types",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/models/types.py",
        "parent": null,
        "dependencies": [],
        "dependents": [
          "src.services.meta_learner.main",
          "src.services.verifier.statistical_verifier",
          "src.services.verifier.statistical_verifier",
          "src.services.verifier.statistical_verifier",
          "src.services.constraint_relaxer.app.constraint_relaxer"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Type definitions for the constraint relaxation system."
      },
      "src.services.shared.models.types.VerificationResult": {
        "name": "src.services.shared.models.types.VerificationResult",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/types.py",
        "parent": "src.services.shared.models.types",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.types"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Result of verification process."
      },
      "src.services.shared.models.types.FormalSpecification": {
        "name": "src.services.shared.models.types.FormalSpecification",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/types.py",
        "parent": "src.services.shared.models.types",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.types"
        ],
        "methods": [
          "is_decomposable",
          "model_copy"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Represents a formal specification parsed from requirements."
      },
      "src.services.shared.models.types.VerificationReport": {
        "name": "src.services.shared.models.types.VerificationReport",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/types.py",
        "parent": "src.services.shared.models.types",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.types"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Report from the verification process."
      },
      "src.services.shared.models.types.ConstraintRelaxationRequest": {
        "name": "src.services.shared.models.types.ConstraintRelaxationRequest",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/types.py",
        "parent": "src.services.shared.models.types",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.types"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Request for constraint relaxation."
      },
      "src.services.shared.models.types.ConstraintRelaxationResponse": {
        "name": "src.services.shared.models.types.ConstraintRelaxationResponse",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/types.py",
        "parent": "src.services.shared.models.types",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.types"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Response with relaxed constraints."
      },
      "src.services.shared.models.types.is_decomposable": {
        "name": "src.services.shared.models.types.is_decomposable",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/types.py",
        "parent": "src.services.shared.models.types",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.types"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Check if this specification can be decomposed for incremental synthesis."
      },
      "src.services.shared.models.types.model_copy": {
        "name": "src.services.shared.models.types.model_copy",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/types.py",
        "parent": "src.services.shared.models.types",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.types"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Create a deep copy of this specification with optional updates."
      },
      "src.services.shared.models.messages": {
        "name": "src.services.shared.models.messages",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/models/messages.py",
        "parent": null,
        "dependencies": [],
        "dependents": [
          "src.services.constraint_relaxer.app.constraint_relaxer"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Messaging models for communication between system components."
      },
      "src.services.shared.models.messages.Pattern": {
        "name": "src.services.shared.models.messages.Pattern",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/messages.py",
        "parent": "src.services.shared.models.messages",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.messages"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Pattern match result"
      },
      "src.services.shared.models.messages.IntentAnalysis": {
        "name": "src.services.shared.models.messages.IntentAnalysis",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/messages.py",
        "parent": "src.services.shared.models.messages",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.messages"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Intent analysis results"
      },
      "src.services.shared.models.messages.ErrorResponse": {
        "name": "src.services.shared.models.messages.ErrorResponse",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/messages.py",
        "parent": "src.services.shared.models.messages",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.messages"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Error response"
      },
      "src.services.shared.models.messages.QueryResponse": {
        "name": "src.services.shared.models.messages.QueryResponse",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/messages.py",
        "parent": "src.services.shared.models.messages",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.messages"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Response to query request"
      },
      "src.services.shared.models.messages.HealthResponse": {
        "name": "src.services.shared.models.messages.HealthResponse",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/messages.py",
        "parent": "src.services.shared.models.messages",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.messages"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Health check response"
      },
      "src.services.shared.models.messages.PatternCreateRequest": {
        "name": "src.services.shared.models.messages.PatternCreateRequest",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/messages.py",
        "parent": "src.services.shared.models.messages",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.messages"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Request to create a new pattern"
      },
      "src.services.shared.models.messages.PatternResponse": {
        "name": "src.services.shared.models.messages.PatternResponse",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/messages.py",
        "parent": "src.services.shared.models.messages",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.messages"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Response after pattern creation"
      },
      "src.services.shared.models.messages.PatternListResponse": {
        "name": "src.services.shared.models.messages.PatternListResponse",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/messages.py",
        "parent": "src.services.shared.models.messages",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.messages"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Response with list of patterns"
      },
      "src.services.shared.models.messages.QueryRequest": {
        "name": "src.services.shared.models.messages.QueryRequest",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/messages.py",
        "parent": "src.services.shared.models.messages",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.messages"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Query request from user or system"
      },
      "src.services.shared.models.messages.SymbolicTestResult": {
        "name": "src.services.shared.models.messages.SymbolicTestResult",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/messages.py",
        "parent": "src.services.shared.models.messages",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.messages"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Result of symbolic execution testing."
      },
      "src.services.shared.models.messages.InterfaceVerificationResult": {
        "name": "src.services.shared.models.messages.InterfaceVerificationResult",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/messages.py",
        "parent": "src.services.shared.models.messages",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.messages"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Result of interface contract verification."
      },
      "src.services.shared.models.messages.Task": {
        "name": "src.services.shared.models.messages.Task",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/messages.py",
        "parent": "src.services.shared.models.messages",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.messages"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Task object containing all metadata needed for processing"
      },
      "src.services.shared.models.messages.Meta": {
        "name": "src.services.shared.models.messages.Meta",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/messages.py",
        "parent": "src.services.shared.models.messages",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.messages"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Avro schema metadata."
      },
      "src.services.shared.models.projects": {
        "name": "src.services.shared.models.projects",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/models/projects.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Project management models for the code generation system."
      },
      "src.services.shared.models.projects.TechnologyStack": {
        "name": "src.services.shared.models.projects.TechnologyStack",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/projects.py",
        "parent": "src.services.shared.models.projects",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.projects"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Technology stack for a project."
      },
      "src.services.shared.models.projects.Requirement": {
        "name": "src.services.shared.models.projects.Requirement",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/projects.py",
        "parent": "src.services.shared.models.projects",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.projects"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Project requirement."
      },
      "src.services.shared.models.projects.ProjectCreatedMessage": {
        "name": "src.services.shared.models.projects.ProjectCreatedMessage",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/projects.py",
        "parent": "src.services.shared.models.projects",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.projects"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Message sent when a project is created."
      },
      "src.services.shared.models.projects.ProjectAnalysisRequestMessage": {
        "name": "src.services.shared.models.projects.ProjectAnalysisRequestMessage",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/projects.py",
        "parent": "src.services.shared.models.projects",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.projects"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Message requesting project requirements analysis."
      },
      "src.services.shared.models.base": {
        "name": "src.services.shared.models.base",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/models/base.py",
        "parent": null,
        "dependencies": [],
        "dependents": [
          "src.orchestration.orchestration",
          "src.services.component_factory.component_factory",
          "src.services.meta_learner.meta_learner",
          "src.services.meta_learner.main",
          "src.services.neural_code_generator.enhanced_neural_code_generator",
          "src.services.verifier.statistical_verifier",
          "src.services.synthesis_engine.synthesis_engine",
          "src.services.constraint_relaxer.app.client",
          "src.services.constraint_relaxer.app.constraint_relaxer",
          "src.services.shared.models.types",
          "src.services.shared.models.specifications",
          "src.services.agents.app.event_service",
          "src.services.agents.app.models.events",
          "infra.registration.registration"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Base models for Apache Pulsar integration with Avro schema serialization."
      },
      "src.services.shared.models.base.PulsarAvroBaseModel": {
        "name": "src.services.shared.models.base.PulsarAvroBaseModel",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/base.py",
        "parent": "src.services.shared.models.base",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.base"
        ],
        "methods": [
          "get_schema_subject",
          "schema_version",
          "to_avro_dict",
          "serialize",
          "deserialize",
          "from_avro_dict"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Base model with Avro and Pulsar support for all models in the system."
      },
      "src.services.shared.models.base.EventPayload": {
        "name": "src.services.shared.models.base.EventPayload",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/base.py",
        "parent": "src.services.shared.models.base",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.base"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Base class for all event payloads."
      },
      "src.services.shared.models.base.BaseEvent": {
        "name": "src.services.shared.models.base.BaseEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/base.py",
        "parent": "src.services.shared.models.base",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.base"
        ],
        "methods": [
          "validate_event_type",
          "validate_priority",
          "validate_timestamp"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Base event class for all events in the system."
      },
      "src.services.shared.models.base.BaseMessage": {
        "name": "src.services.shared.models.base.BaseMessage",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/base.py",
        "parent": "src.services.shared.models.base",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.base"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Base class for all message schemas."
      },
      "src.services.shared.models.base.BaseComponent": {
        "name": "src.services.shared.models.base.BaseComponent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/base.py",
        "parent": "src.services.shared.models.base",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.base"
        ],
        "methods": [
          "__init__",
          "initialize",
          "component_name",
          "schema_version",
          "get_param",
          "model_dump"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Base class for all system services built on Pydantic."
      },
      "src.services.shared.models.base.ConfigurableComponent": {
        "name": "src.services.shared.models.base.ConfigurableComponent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/base.py",
        "parent": "src.services.shared.models.base",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.base"
        ],
        "methods": [
          "configure"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "A component that can be configured dynamically."
      },
      "src.services.shared.models.base.get_schema_subject": {
        "name": "src.services.shared.models.base.get_schema_subject",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/base.py",
        "parent": "src.services.shared.models.base",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.base"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get the schema subject for Avro registry."
      },
      "src.services.shared.models.base.schema_version": {
        "name": "src.services.shared.models.base.schema_version",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/base.py",
        "parent": "src.services.shared.models.base",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.base",
          "src.services.shared.models.base"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Return schema version for compatibility checks."
      },
      "src.services.shared.models.base.to_avro_dict": {
        "name": "src.services.shared.models.base.to_avro_dict",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/base.py",
        "parent": "src.services.shared.models.base",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.base"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Convert to a dictionary with Avro-compatible format."
      },
      "src.services.shared.models.base.serialize": {
        "name": "src.services.shared.models.base.serialize",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/base.py",
        "parent": "src.services.shared.models.base",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.base"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Serialize to binary using Fast Avro."
      },
      "src.services.shared.models.base.deserialize": {
        "name": "src.services.shared.models.base.deserialize",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/base.py",
        "parent": "src.services.shared.models.base",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.base"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Deserialize from binary using Fast Avro."
      },
      "src.services.shared.models.base.from_avro_dict": {
        "name": "src.services.shared.models.base.from_avro_dict",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/base.py",
        "parent": "src.services.shared.models.base",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.base"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Create an instance from an Avro dictionary."
      },
      "src.services.shared.models.base.Meta": {
        "name": "src.services.shared.models.base.Meta",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/base.py",
        "parent": "src.services.shared.models.base",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.base"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Avro schema metadata"
      },
      "src.services.shared.models.base.validate_event_type": {
        "name": "src.services.shared.models.base.validate_event_type",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/base.py",
        "parent": "src.services.shared.models.base",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.base"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.models.base.validate_priority": {
        "name": "src.services.shared.models.base.validate_priority",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/base.py",
        "parent": "src.services.shared.models.base",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.base"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.models.base.validate_timestamp": {
        "name": "src.services.shared.models.base.validate_timestamp",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/base.py",
        "parent": "src.services.shared.models.base",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.base"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.models.base.__init__": {
        "name": "src.services.shared.models.base.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/base.py",
        "parent": "src.services.shared.models.base",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.base"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the component with parameters."
      },
      "src.services.shared.models.base.initialize": {
        "name": "src.services.shared.models.base.initialize",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/base.py",
        "parent": "src.services.shared.models.base",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.base"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Additional initialization logic after parameters are set."
      },
      "src.services.shared.models.base.component_name": {
        "name": "src.services.shared.models.base.component_name",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/base.py",
        "parent": "src.services.shared.models.base",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.base"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get the name of this component."
      },
      "src.services.shared.models.base.get_param": {
        "name": "src.services.shared.models.base.get_param",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/base.py",
        "parent": "src.services.shared.models.base",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.base"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get a parameter value with a default."
      },
      "src.services.shared.models.base.model_dump": {
        "name": "src.services.shared.models.base.model_dump",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/base.py",
        "parent": "src.services.shared.models.base",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.base"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Override model_dump to include extra params."
      },
      "src.services.shared.models.base.configure": {
        "name": "src.services.shared.models.base.configure",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/base.py",
        "parent": "src.services.shared.models.base",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.base"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Update the component configuration."
      },
      "src.services.shared.models.specifications": {
        "name": "src.services.shared.models.specifications",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/models/specifications.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Specification sheet models for code generation requirements."
      },
      "src.services.shared.models.specifications.FieldDefinition": {
        "name": "src.services.shared.models.specifications.FieldDefinition",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/specifications.py",
        "parent": "src.services.shared.models.specifications",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.specifications"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Field definition in a spec sheet."
      },
      "src.services.shared.models.specifications.SectionDefinition": {
        "name": "src.services.shared.models.specifications.SectionDefinition",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/specifications.py",
        "parent": "src.services.shared.models.specifications",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.specifications"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Section definition in a spec sheet."
      },
      "src.services.shared.models.specifications.SpecSheetDefinition": {
        "name": "src.services.shared.models.specifications.SpecSheetDefinition",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/specifications.py",
        "parent": "src.services.shared.models.specifications",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.specifications"
        ],
        "methods": [
          "to_avro",
          "_make_avro_compatible"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Template for a specification sheet."
      },
      "src.services.shared.models.specifications.FieldValue": {
        "name": "src.services.shared.models.specifications.FieldValue",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/specifications.py",
        "parent": "src.services.shared.models.specifications",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.specifications"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Field value in a completed spec sheet."
      },
      "src.services.shared.models.specifications.SectionValues": {
        "name": "src.services.shared.models.specifications.SectionValues",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/specifications.py",
        "parent": "src.services.shared.models.specifications",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.specifications"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Section values in a completed spec sheet."
      },
      "src.services.shared.models.specifications.SpecSheet": {
        "name": "src.services.shared.models.specifications.SpecSheet",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/specifications.py",
        "parent": "src.services.shared.models.specifications",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.specifications"
        ],
        "methods": [
          "to_avro",
          "_make_avro_compatible"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Completed specification sheet."
      },
      "src.services.shared.models.specifications.SpecSheetGenerationRequestMessage": {
        "name": "src.services.shared.models.specifications.SpecSheetGenerationRequestMessage",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/specifications.py",
        "parent": "src.services.shared.models.specifications",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.specifications"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Message requesting spec sheet generation."
      },
      "src.services.shared.models.specifications.SpecSheetCompletionRequestMessage": {
        "name": "src.services.shared.models.specifications.SpecSheetCompletionRequestMessage",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/specifications.py",
        "parent": "src.services.shared.models.specifications",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.specifications"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Message requesting AI completion of a spec sheet."
      },
      "src.services.shared.models.specifications.SpecSheetDefinitionRequest": {
        "name": "src.services.shared.models.specifications.SpecSheetDefinitionRequest",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/specifications.py",
        "parent": "src.services.shared.models.specifications",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.specifications"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Request for a spec sheet definition matching specific criteria."
      },
      "src.services.shared.models.specifications.SpecSheetDefinitionResponse": {
        "name": "src.services.shared.models.specifications.SpecSheetDefinitionResponse",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/specifications.py",
        "parent": "src.services.shared.models.specifications",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.specifications"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Response with the best matching spec sheet definition."
      },
      "src.services.shared.models.specifications.to_avro": {
        "name": "src.services.shared.models.specifications.to_avro",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/specifications.py",
        "parent": "src.services.shared.models.specifications",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.specifications",
          "src.services.shared.models.specifications"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Convert to Avro-compatible dict."
      },
      "src.services.shared.models.specifications._make_avro_compatible": {
        "name": "src.services.shared.models.specifications._make_avro_compatible",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/specifications.py",
        "parent": "src.services.shared.models.specifications",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.specifications",
          "src.services.shared.models.specifications"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Convert Python values to Avro-compatible values."
      },
      "src.services.shared.models.validation": {
        "name": "src.services.shared.models.validation",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/models/validation.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Validation result models for data validation operations."
      },
      "src.services.shared.models.validation.ValidationResult": {
        "name": "src.services.shared.models.validation.ValidationResult",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/validation.py",
        "parent": "src.services.shared.models.validation",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.validation"
        ],
        "methods": [
          "error_message",
          "with_error",
          "merge"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Result of a validation operation."
      },
      "src.services.shared.models.validation.error_message": {
        "name": "src.services.shared.models.validation.error_message",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/validation.py",
        "parent": "src.services.shared.models.validation",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.validation"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get a combined error message."
      },
      "src.services.shared.models.validation.with_error": {
        "name": "src.services.shared.models.validation.with_error",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/validation.py",
        "parent": "src.services.shared.models.validation",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.validation"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Factory method to create a validation result with an error."
      },
      "src.services.shared.models.validation.merge": {
        "name": "src.services.shared.models.validation.merge",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/validation.py",
        "parent": "src.services.shared.models.validation",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.validation"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Factory method to merge multiple validation results."
      },
      "src.services.shared.models.synthesis": {
        "name": "src.services.shared.models.synthesis",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/models/synthesis.py",
        "parent": null,
        "dependencies": [],
        "dependents": [
          "src.services.meta_learner.main",
          "src.services.verifier.statistical_verifier"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Code synthesis models and result representation."
      },
      "src.services.shared.models.synthesis.SynthesisResult": {
        "name": "src.services.shared.models.synthesis.SynthesisResult",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/synthesis.py",
        "parent": "src.services.shared.models.synthesis",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.synthesis"
        ],
        "methods": [
          "to_dict",
          "confidence",
          "ast",
          "create",
          "combine",
          "with_code"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Represents the result of a code synthesis operation."
      },
      "src.services.shared.models.synthesis.to_dict": {
        "name": "src.services.shared.models.synthesis.to_dict",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/synthesis.py",
        "parent": "src.services.shared.models.synthesis",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.synthesis"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Convert the model to a dictionary with JSON-compatible types."
      },
      "src.services.shared.models.synthesis.confidence": {
        "name": "src.services.shared.models.synthesis.confidence",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/synthesis.py",
        "parent": "src.services.shared.models.synthesis",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.synthesis"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Alias for confidence_score for backward compatibility."
      },
      "src.services.shared.models.synthesis.ast": {
        "name": "src.services.shared.models.synthesis.ast",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/synthesis.py",
        "parent": "src.services.shared.models.synthesis",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.synthesis"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Alternative access for AST (aliases to program_ast)."
      },
      "src.services.shared.models.synthesis.create": {
        "name": "src.services.shared.models.synthesis.create",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/synthesis.py",
        "parent": "src.services.shared.models.synthesis",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.synthesis"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Create a SynthesisResult with backward compatibility for field names."
      },
      "src.services.shared.models.synthesis.combine": {
        "name": "src.services.shared.models.synthesis.combine",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/synthesis.py",
        "parent": "src.services.shared.models.synthesis",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.synthesis"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Combine this result with other component results into a new combined result."
      },
      "src.services.shared.models.synthesis.with_code": {
        "name": "src.services.shared.models.synthesis.with_code",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/synthesis.py",
        "parent": "src.services.shared.models.synthesis",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.synthesis"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Create a new SynthesisResult with the provided code."
      },
      "src.services.shared.concurrency.concurrency": {
        "name": "src.services.shared.concurrency.concurrency",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/concurrency/concurrency.py",
        "parent": null,
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Concurrency utility for the Program Synthesis System."
      },
      "src.services.shared.concurrency.concurrency.TaskPriority": {
        "name": "src.services.shared.concurrency.concurrency.TaskPriority",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/concurrency/concurrency.py",
        "parent": "src.services.shared.concurrency.concurrency",
        "dependencies": [],
        "dependents": [
          "src.services.shared.concurrency.concurrency"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Priority levels for concurrent tasks."
      },
      "src.services.shared.concurrency.concurrency.TaskInfo": {
        "name": "src.services.shared.concurrency.concurrency.TaskInfo",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/concurrency/concurrency.py",
        "parent": "src.services.shared.concurrency.concurrency",
        "dependencies": [],
        "dependents": [
          "src.services.shared.concurrency.concurrency"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Information about a task in the task pool."
      },
      "src.services.shared.concurrency.concurrency.TaskPool": {
        "name": "src.services.shared.concurrency.concurrency.TaskPool",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/concurrency/concurrency.py",
        "parent": "src.services.shared.concurrency.concurrency",
        "dependencies": [],
        "dependents": [
          "src.services.shared.concurrency.concurrency"
        ],
        "methods": [
          "__init__",
          "submit",
          "get_task_info",
          "get_result",
          "cancel_task",
          "wait_for_tasks",
          "shutdown"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Manages a pool of concurrent tasks with priority scheduling."
      },
      "src.services.shared.concurrency.concurrency.AsyncTaskManager": {
        "name": "src.services.shared.concurrency.concurrency.AsyncTaskManager",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/concurrency/concurrency.py",
        "parent": "src.services.shared.concurrency.concurrency",
        "dependencies": [],
        "dependents": [
          "src.services.shared.concurrency.concurrency"
        ],
        "methods": [
          "__init__"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Manages asynchronous tasks with priority scheduling."
      },
      "src.services.shared.concurrency.concurrency.ParallelExecutor": {
        "name": "src.services.shared.concurrency.concurrency.ParallelExecutor",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/concurrency/concurrency.py",
        "parent": "src.services.shared.concurrency.concurrency",
        "dependencies": [],
        "dependents": [
          "src.services.shared.concurrency.concurrency"
        ],
        "methods": [
          "__init__",
          "map",
          "execute_all",
          "shutdown"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Executes functions in parallel with automatic parallelism detection."
      },
      "src.services.shared.concurrency.concurrency.parallel_context": {
        "name": "src.services.shared.concurrency.concurrency.parallel_context",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/concurrency/concurrency.py",
        "parent": "src.services.shared.concurrency.concurrency",
        "dependencies": [],
        "dependents": [
          "src.services.shared.concurrency.concurrency"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Context manager for parallel execution."
      },
      "src.services.shared.concurrency.concurrency.run_parallel": {
        "name": "src.services.shared.concurrency.concurrency.run_parallel",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/concurrency/concurrency.py",
        "parent": "src.services.shared.concurrency.concurrency",
        "dependencies": [],
        "dependents": [
          "src.services.shared.concurrency.concurrency"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Run a function on a list of items in parallel."
      },
      "src.services.shared.concurrency.concurrency.__init__": {
        "name": "src.services.shared.concurrency.concurrency.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/concurrency/concurrency.py",
        "parent": "src.services.shared.concurrency.concurrency",
        "dependencies": [],
        "dependents": [
          "src.services.shared.concurrency.concurrency",
          "src.services.shared.concurrency.concurrency",
          "src.services.shared.concurrency.concurrency"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the parallel executor."
      },
      "src.services.shared.concurrency.concurrency.submit": {
        "name": "src.services.shared.concurrency.concurrency.submit",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/concurrency/concurrency.py",
        "parent": "src.services.shared.concurrency.concurrency",
        "dependencies": [],
        "dependents": [
          "src.services.shared.concurrency.concurrency"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Submit a task to the pool."
      },
      "src.services.shared.concurrency.concurrency.get_task_info": {
        "name": "src.services.shared.concurrency.concurrency.get_task_info",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/concurrency/concurrency.py",
        "parent": "src.services.shared.concurrency.concurrency",
        "dependencies": [],
        "dependents": [
          "src.services.shared.concurrency.concurrency"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get information about a task."
      },
      "src.services.shared.concurrency.concurrency.get_result": {
        "name": "src.services.shared.concurrency.concurrency.get_result",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/concurrency/concurrency.py",
        "parent": "src.services.shared.concurrency.concurrency",
        "dependencies": [],
        "dependents": [
          "src.services.shared.concurrency.concurrency"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get the result of a task, waiting if necessary."
      },
      "src.services.shared.concurrency.concurrency.cancel_task": {
        "name": "src.services.shared.concurrency.concurrency.cancel_task",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/concurrency/concurrency.py",
        "parent": "src.services.shared.concurrency.concurrency",
        "dependencies": [],
        "dependents": [
          "src.services.shared.concurrency.concurrency"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Cancel a task if possible."
      },
      "src.services.shared.concurrency.concurrency.wait_for_tasks": {
        "name": "src.services.shared.concurrency.concurrency.wait_for_tasks",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/concurrency/concurrency.py",
        "parent": "src.services.shared.concurrency.concurrency",
        "dependencies": [],
        "dependents": [
          "src.services.shared.concurrency.concurrency"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Wait for multiple tasks to complete."
      },
      "src.services.shared.concurrency.concurrency.shutdown": {
        "name": "src.services.shared.concurrency.concurrency.shutdown",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/concurrency/concurrency.py",
        "parent": "src.services.shared.concurrency.concurrency",
        "dependencies": [],
        "dependents": [
          "src.services.shared.concurrency.concurrency",
          "src.services.shared.concurrency.concurrency"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Shut down the executor."
      },
      "src.services.shared.concurrency.concurrency.map": {
        "name": "src.services.shared.concurrency.concurrency.map",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/concurrency/concurrency.py",
        "parent": "src.services.shared.concurrency.concurrency",
        "dependencies": [],
        "dependents": [
          "src.services.shared.concurrency.concurrency"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Apply a function to each item in a list in parallel."
      },
      "src.services.shared.concurrency.concurrency.execute_all": {
        "name": "src.services.shared.concurrency.concurrency.execute_all",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/concurrency/concurrency.py",
        "parent": "src.services.shared.concurrency.concurrency",
        "dependencies": [],
        "dependents": [
          "src.services.shared.concurrency.concurrency"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Execute a list of tasks in parallel."
      },
      "src.services.shared.concurrency.concurrency.task_done_callback": {
        "name": "src.services.shared.concurrency.concurrency.task_done_callback",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/concurrency/concurrency.py",
        "parent": "src.services.shared.concurrency.concurrency",
        "dependencies": [],
        "dependents": [
          "src.services.shared.concurrency.concurrency"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.concurrency.concurrency.process_chunk": {
        "name": "src.services.shared.concurrency.concurrency.process_chunk",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/concurrency/concurrency.py",
        "parent": "src.services.shared.concurrency.concurrency",
        "dependencies": [],
        "dependents": [
          "src.services.shared.concurrency.concurrency"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.concurrency.__init__": {
        "name": "src.services.shared.concurrency.__init__",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/concurrency/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.pulsar.__init__": {
        "name": "src.services.shared.pulsar.__init__",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/pulsar/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.pulsar.event_bus": {
        "name": "src.services.shared.pulsar.event_bus",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/pulsar/event_bus.py",
        "parent": null,
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.client"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Pulsar Event Bus Implementation Module."
      },
      "src.services.shared.pulsar.event_bus.EventBus": {
        "name": "src.services.shared.pulsar.event_bus.EventBus",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/pulsar/event_bus.py",
        "parent": "src.services.shared.pulsar.event_bus",
        "dependencies": [],
        "dependents": [
          "src.services.shared.pulsar.event_bus"
        ],
        "methods": [
          "subscribe"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Abstract interface for an Event Bus."
      },
      "src.services.shared.pulsar.event_bus.PulsarEventBus": {
        "name": "src.services.shared.pulsar.event_bus.PulsarEventBus",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/pulsar/event_bus.py",
        "parent": "src.services.shared.pulsar.event_bus",
        "dependencies": [],
        "dependents": [
          "src.services.shared.pulsar.event_bus"
        ],
        "methods": [
          "__init__",
          "subscribe",
          "_create_event"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Pulsar implementation of the EventBus interface."
      },
      "src.services.shared.pulsar.event_bus.subscribe": {
        "name": "src.services.shared.pulsar.event_bus.subscribe",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/pulsar/event_bus.py",
        "parent": "src.services.shared.pulsar.event_bus",
        "dependencies": [],
        "dependents": [
          "src.services.shared.pulsar.event_bus",
          "src.services.shared.pulsar.event_bus"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Subscribe to events from the bus."
      },
      "src.services.shared.pulsar.event_bus.__init__": {
        "name": "src.services.shared.pulsar.event_bus.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/pulsar/event_bus.py",
        "parent": "src.services.shared.pulsar.event_bus",
        "dependencies": [],
        "dependents": [
          "src.services.shared.pulsar.event_bus"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the Pulsar Event Bus."
      },
      "src.services.shared.pulsar.event_bus._create_event": {
        "name": "src.services.shared.pulsar.event_bus._create_event",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/pulsar/event_bus.py",
        "parent": "src.services.shared.pulsar.event_bus",
        "dependencies": [],
        "dependents": [
          "src.services.shared.pulsar.event_bus"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Create an event dictionary with standard fields."
      },
      "src.services.shared.pulsar.event_listener": {
        "name": "src.services.shared.pulsar.event_listener",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/pulsar/event_listener.py",
        "parent": null,
        "dependencies": [],
        "dependents": [
          "src.orchestration.orchestration",
          "src.services.meta_learner.main"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Secure event listener for the event-driven neural code generator system."
      },
      "src.services.shared.pulsar.event_listener.EventVerificationError": {
        "name": "src.services.shared.pulsar.event_listener.EventVerificationError",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/pulsar/event_listener.py",
        "parent": "src.services.shared.pulsar.event_listener",
        "dependencies": [],
        "dependents": [
          "src.services.shared.pulsar.event_listener"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Exception raised when event verification fails."
      },
      "src.services.shared.pulsar.event_listener.SecureEventListener": {
        "name": "src.services.shared.pulsar.event_listener.SecureEventListener",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/pulsar/event_listener.py",
        "parent": "src.services.shared.pulsar.event_listener",
        "dependencies": [],
        "dependents": [
          "src.services.shared.pulsar.event_listener"
        ],
        "methods": [
          "__init__",
          "_get_topic_names",
          "_verify_signature",
          "register_handler"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Secure event listener for Apache Pulsar."
      },
      "src.services.shared.pulsar.event_listener.__init__": {
        "name": "src.services.shared.pulsar.event_listener.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/pulsar/event_listener.py",
        "parent": "src.services.shared.pulsar.event_listener",
        "dependencies": [],
        "dependents": [
          "src.services.shared.pulsar.event_listener"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the secure event listener."
      },
      "src.services.shared.pulsar.event_listener._get_topic_names": {
        "name": "src.services.shared.pulsar.event_listener._get_topic_names",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/pulsar/event_listener.py",
        "parent": "src.services.shared.pulsar.event_listener",
        "dependencies": [],
        "dependents": [
          "src.services.shared.pulsar.event_listener"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get the full topic names for all event types."
      },
      "src.services.shared.pulsar.event_listener._verify_signature": {
        "name": "src.services.shared.pulsar.event_listener._verify_signature",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/pulsar/event_listener.py",
        "parent": "src.services.shared.pulsar.event_listener",
        "dependencies": [],
        "dependents": [
          "src.services.shared.pulsar.event_listener"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Verify the HMAC signature of event data."
      },
      "src.services.shared.pulsar.event_listener.register_handler": {
        "name": "src.services.shared.pulsar.event_listener.register_handler",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/pulsar/event_listener.py",
        "parent": "src.services.shared.pulsar.event_listener",
        "dependencies": [],
        "dependents": [
          "src.services.shared.pulsar.event_listener"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Register a handler for a specific event type."
      },
      "src.services.shared.pulsar.event_emitter": {
        "name": "src.services.shared.pulsar.event_emitter",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/pulsar/event_emitter.py",
        "parent": null,
        "dependencies": [],
        "dependents": [
          "src.orchestration.orchestration",
          "src.services.meta_learner.main",
          "infra.registration.registration"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Secure event emitter for the event-driven neural code generator system."
      },
      "src.services.shared.pulsar.event_emitter.SecureEventEmitter": {
        "name": "src.services.shared.pulsar.event_emitter.SecureEventEmitter",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/pulsar/event_emitter.py",
        "parent": "src.services.shared.pulsar.event_emitter",
        "dependencies": [],
        "dependents": [
          "src.services.shared.pulsar.event_emitter"
        ],
        "methods": [
          "__init__",
          "_get_topic_name",
          "_get_producer",
          "_sign_message",
          "_add_signature",
          "emit",
          "close"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Secure event emitter for Apache Pulsar."
      },
      "src.services.shared.pulsar.event_emitter.__init__": {
        "name": "src.services.shared.pulsar.event_emitter.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/pulsar/event_emitter.py",
        "parent": "src.services.shared.pulsar.event_emitter",
        "dependencies": [],
        "dependents": [
          "src.services.shared.pulsar.event_emitter"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the secure event emitter."
      },
      "src.services.shared.pulsar.event_emitter._get_topic_name": {
        "name": "src.services.shared.pulsar.event_emitter._get_topic_name",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/pulsar/event_emitter.py",
        "parent": "src.services.shared.pulsar.event_emitter",
        "dependencies": [],
        "dependents": [
          "src.services.shared.pulsar.event_emitter"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get the full topic name for an event type."
      },
      "src.services.shared.pulsar.event_emitter._get_producer": {
        "name": "src.services.shared.pulsar.event_emitter._get_producer",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/pulsar/event_emitter.py",
        "parent": "src.services.shared.pulsar.event_emitter",
        "dependencies": [],
        "dependents": [
          "src.services.shared.pulsar.event_emitter"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get or create a producer for a topic."
      },
      "src.services.shared.pulsar.event_emitter._sign_message": {
        "name": "src.services.shared.pulsar.event_emitter._sign_message",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/pulsar/event_emitter.py",
        "parent": "src.services.shared.pulsar.event_emitter",
        "dependencies": [],
        "dependents": [
          "src.services.shared.pulsar.event_emitter"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Sign a message using HMAC-SHA256."
      },
      "src.services.shared.pulsar.event_emitter._add_signature": {
        "name": "src.services.shared.pulsar.event_emitter._add_signature",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/pulsar/event_emitter.py",
        "parent": "src.services.shared.pulsar.event_emitter",
        "dependencies": [],
        "dependents": [
          "src.services.shared.pulsar.event_emitter"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Add a signature to event data for zero-trust verification."
      },
      "src.services.shared.pulsar.event_emitter.emit": {
        "name": "src.services.shared.pulsar.event_emitter.emit",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/pulsar/event_emitter.py",
        "parent": "src.services.shared.pulsar.event_emitter",
        "dependencies": [],
        "dependents": [
          "src.services.shared.pulsar.event_emitter"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Emit an event to the appropriate topic."
      },
      "src.services.shared.pulsar.event_emitter.close": {
        "name": "src.services.shared.pulsar.event_emitter.close",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/pulsar/event_emitter.py",
        "parent": "src.services.shared.pulsar.event_emitter",
        "dependencies": [],
        "dependents": [
          "src.services.shared.pulsar.event_emitter"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Close the Pulsar client and all producers."
      },
      "src.services.shared.pulsar.client_factory": {
        "name": "src.services.shared.pulsar.client_factory",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/pulsar/client_factory.py",
        "parent": null,
        "dependencies": [],
        "dependents": [
          "infra.registration.registration"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.pulsar.client_factory.create_pulsar_client": {
        "name": "src.services.shared.pulsar.client_factory.create_pulsar_client",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/pulsar/client_factory.py",
        "parent": "src.services.shared.pulsar.client_factory",
        "dependencies": [],
        "dependents": [
          "src.services.shared.pulsar.client_factory"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Create a Pulsar client according to official Pulsar documentation."
      },
      "src.services.shared.monitoring.metrics": {
        "name": "src.services.shared.monitoring.metrics",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/monitoring/metrics.py",
        "parent": null,
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor",
          "src.api_gateway.neural_interpretor.app.intent_analyzer"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.monitoring.metrics.set_metrics_collector": {
        "name": "src.services.shared.monitoring.metrics.set_metrics_collector",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/metrics.py",
        "parent": "src.services.shared.monitoring.metrics",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.metrics"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Set the global metrics collector instance."
      },
      "src.services.shared.monitoring.metrics.get_metrics_collector": {
        "name": "src.services.shared.monitoring.metrics.get_metrics_collector",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/metrics.py",
        "parent": "src.services.shared.monitoring.metrics",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.metrics"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get the global metrics collector instance."
      },
      "src.services.shared.monitoring.metrics.track_inference_time": {
        "name": "src.services.shared.monitoring.metrics.track_inference_time",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/metrics.py",
        "parent": "src.services.shared.monitoring.metrics",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.metrics"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Decorator to track the execution time of inference functions."
      },
      "src.services.shared.monitoring.metrics._record_success": {
        "name": "src.services.shared.monitoring.metrics._record_success",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/metrics.py",
        "parent": "src.services.shared.monitoring.metrics",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.metrics"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Record successful execution metrics."
      },
      "src.services.shared.monitoring.metrics._record_error": {
        "name": "src.services.shared.monitoring.metrics._record_error",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/metrics.py",
        "parent": "src.services.shared.monitoring.metrics",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.metrics"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Record error metrics."
      },
      "src.services.shared.monitoring.metrics.sync_wrapper": {
        "name": "src.services.shared.monitoring.metrics.sync_wrapper",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/metrics.py",
        "parent": "src.services.shared.monitoring.metrics",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.metrics"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.monitoring.embedding_client": {
        "name": "src.services.shared.monitoring.embedding_client",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/monitoring/embedding_client.py",
        "parent": null,
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.intent_analyzer"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.monitoring.embedding_client.EmbeddingClient": {
        "name": "src.services.shared.monitoring.embedding_client.EmbeddingClient",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/monitoring/embedding_client.py",
        "parent": "src.services.shared.monitoring.embedding_client",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.embedding_client"
        ],
        "methods": [
          "__init__",
          "_initialize_models",
          "_simulate_embedding"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Client for generating text embeddings for semantic analysis."
      },
      "src.services.shared.monitoring.embedding_client.__init__": {
        "name": "src.services.shared.monitoring.embedding_client.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/embedding_client.py",
        "parent": "src.services.shared.monitoring.embedding_client",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.embedding_client",
          "src.services.shared.monitoring.embedding_client"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.monitoring.embedding_client.Timer": {
        "name": "src.services.shared.monitoring.embedding_client.Timer",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/monitoring/embedding_client.py",
        "parent": "src.services.shared.monitoring.embedding_client",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.embedding_client"
        ],
        "methods": [
          "__init__",
          "start",
          "stop",
          "duration"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "A simple timer class for measuring execution time."
      },
      "src.services.shared.monitoring.embedding_client._initialize_models": {
        "name": "src.services.shared.monitoring.embedding_client._initialize_models",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/embedding_client.py",
        "parent": "src.services.shared.monitoring.embedding_client",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.embedding_client"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize embedding models based on configuration."
      },
      "src.services.shared.monitoring.embedding_client._simulate_embedding": {
        "name": "src.services.shared.monitoring.embedding_client._simulate_embedding",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/embedding_client.py",
        "parent": "src.services.shared.monitoring.embedding_client",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.embedding_client"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Simulate an embedding for testing purposes."
      },
      "src.services.shared.monitoring.embedding_client.start": {
        "name": "src.services.shared.monitoring.embedding_client.start",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/embedding_client.py",
        "parent": "src.services.shared.monitoring.embedding_client",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.embedding_client"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Start the timer."
      },
      "src.services.shared.monitoring.embedding_client.stop": {
        "name": "src.services.shared.monitoring.embedding_client.stop",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/embedding_client.py",
        "parent": "src.services.shared.monitoring.embedding_client",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.embedding_client"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Stop the timer and return the duration."
      },
      "src.services.shared.monitoring.embedding_client.duration": {
        "name": "src.services.shared.monitoring.embedding_client.duration",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/embedding_client.py",
        "parent": "src.services.shared.monitoring.embedding_client",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.embedding_client"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Return the duration in seconds."
      },
      "src.services.shared.monitoring.__init__": {
        "name": "src.services.shared.monitoring.__init__",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/monitoring/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.monitoring.health_monitor": {
        "name": "src.services.shared.monitoring.health_monitor",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/monitoring/health_monitor.py",
        "parent": null,
        "dependencies": [],
        "dependents": [
          "infra.registration.registration"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Health monitoring system for microservices."
      },
      "src.services.shared.monitoring.health_monitor.HealthStatus": {
        "name": "src.services.shared.monitoring.health_monitor.HealthStatus",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/monitoring/health_monitor.py",
        "parent": "src.services.shared.monitoring.health_monitor",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.health_monitor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Health status constants."
      },
      "src.services.shared.monitoring.health_monitor.HealthMonitor": {
        "name": "src.services.shared.monitoring.health_monitor.HealthMonitor",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/monitoring/health_monitor.py",
        "parent": "src.services.shared.monitoring.health_monitor",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.health_monitor"
        ],
        "methods": [
          "__init__",
          "register_dependency",
          "register_subsystem",
          "get_detailed_status",
          "is_healthy",
          "is_available"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Health monitor for microservices."
      },
      "src.services.shared.monitoring.health_monitor.start_server": {
        "name": "src.services.shared.monitoring.health_monitor.start_server",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/health_monitor.py",
        "parent": "src.services.shared.monitoring.health_monitor",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.health_monitor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Start the health check server with service registry integration."
      },
      "src.services.shared.monitoring.health_monitor.__init__": {
        "name": "src.services.shared.monitoring.health_monitor.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/health_monitor.py",
        "parent": "src.services.shared.monitoring.health_monitor",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.health_monitor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the health monitor."
      },
      "src.services.shared.monitoring.health_monitor.register_dependency": {
        "name": "src.services.shared.monitoring.health_monitor.register_dependency",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/health_monitor.py",
        "parent": "src.services.shared.monitoring.health_monitor",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.health_monitor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Register a dependency to check."
      },
      "src.services.shared.monitoring.health_monitor.register_subsystem": {
        "name": "src.services.shared.monitoring.health_monitor.register_subsystem",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/health_monitor.py",
        "parent": "src.services.shared.monitoring.health_monitor",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.health_monitor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Register a subsystem to check."
      },
      "src.services.shared.monitoring.health_monitor.get_detailed_status": {
        "name": "src.services.shared.monitoring.health_monitor.get_detailed_status",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/health_monitor.py",
        "parent": "src.services.shared.monitoring.health_monitor",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.health_monitor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get detailed health status for all components."
      },
      "src.services.shared.monitoring.health_monitor.is_healthy": {
        "name": "src.services.shared.monitoring.health_monitor.is_healthy",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/health_monitor.py",
        "parent": "src.services.shared.monitoring.health_monitor",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.health_monitor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Check if service is healthy."
      },
      "src.services.shared.monitoring.health_monitor.is_available": {
        "name": "src.services.shared.monitoring.health_monitor.is_available",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/health_monitor.py",
        "parent": "src.services.shared.monitoring.health_monitor",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.health_monitor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Check if service is available (healthy or degraded)."
      },
      "src.services.shared.monitoring.healthcheck": {
        "name": "src.services.shared.monitoring.healthcheck",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/monitoring/healthcheck.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Health check API for Neural Code Generator."
      },
      "src.services.shared.monitoring.healthcheck.HealthStatus": {
        "name": "src.services.shared.monitoring.healthcheck.HealthStatus",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/monitoring/healthcheck.py",
        "parent": "src.services.shared.monitoring.healthcheck",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.healthcheck"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Health status response model."
      },
      "src.services.shared.monitoring.healthcheck.update_stats": {
        "name": "src.services.shared.monitoring.healthcheck.update_stats",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/healthcheck.py",
        "parent": "src.services.shared.monitoring.healthcheck",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.healthcheck"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Update the request statistics."
      },
      "src.services.shared.monitoring.healthcheck.start_server": {
        "name": "src.services.shared.monitoring.healthcheck.start_server",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/healthcheck.py",
        "parent": "src.services.shared.monitoring.healthcheck",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.healthcheck"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Start the health check server."
      },
      "src.services.shared.monitoring.metrics_collector": {
        "name": "src.services.shared.monitoring.metrics_collector",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/monitoring/metrics_collector.py",
        "parent": null,
        "dependencies": [],
        "dependents": [
          "src.services.aggregators.app.response_aggregator",
          "infra.registration.registration"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Prometheus metrics collector for the neural code generator system."
      },
      "src.services.shared.monitoring.metrics_collector.MetricsCollector": {
        "name": "src.services.shared.monitoring.metrics_collector.MetricsCollector",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/monitoring/metrics_collector.py",
        "parent": "src.services.shared.monitoring.metrics_collector",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.metrics_collector"
        ],
        "methods": [
          "__init__",
          "_init_metrics",
          "record_request",
          "start_request_timer",
          "record_tokens",
          "record_confidence",
          "record_code_length",
          "record_cache_hit",
          "record_cache_miss",
          "record_component_status",
          "update_gpu_memory_usage",
          "start_model_loading_timer",
          "record_event_emitted",
          "record_event_received",
          "start_event_processing_timer",
          "set_component_up",
          "record_error",
          "start_vector_db_timer",
          "record_vector_db_operation"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Prometheus metrics collector for the neural code generator system."
      },
      "src.services.shared.monitoring.metrics_collector.__init__": {
        "name": "src.services.shared.monitoring.metrics_collector.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/metrics_collector.py",
        "parent": "src.services.shared.monitoring.metrics_collector",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.metrics_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the metrics collector."
      },
      "src.services.shared.monitoring.metrics_collector._init_metrics": {
        "name": "src.services.shared.monitoring.metrics_collector._init_metrics",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/metrics_collector.py",
        "parent": "src.services.shared.monitoring.metrics_collector",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.metrics_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize Prometheus metrics."
      },
      "src.services.shared.monitoring.metrics_collector.record_request": {
        "name": "src.services.shared.monitoring.metrics_collector.record_request",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/metrics_collector.py",
        "parent": "src.services.shared.monitoring.metrics_collector",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.metrics_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Record a code generation request."
      },
      "src.services.shared.monitoring.metrics_collector.start_request_timer": {
        "name": "src.services.shared.monitoring.metrics_collector.start_request_timer",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/metrics_collector.py",
        "parent": "src.services.shared.monitoring.metrics_collector",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.metrics_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Start a timer for a code generation request."
      },
      "src.services.shared.monitoring.metrics_collector.record_tokens": {
        "name": "src.services.shared.monitoring.metrics_collector.record_tokens",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/metrics_collector.py",
        "parent": "src.services.shared.monitoring.metrics_collector",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.metrics_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Record the number of tokens in a request or response."
      },
      "src.services.shared.monitoring.metrics_collector.record_confidence": {
        "name": "src.services.shared.monitoring.metrics_collector.record_confidence",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/metrics_collector.py",
        "parent": "src.services.shared.monitoring.metrics_collector",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.metrics_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Record the confidence score of a generation result."
      },
      "src.services.shared.monitoring.metrics_collector.record_code_length": {
        "name": "src.services.shared.monitoring.metrics_collector.record_code_length",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/metrics_collector.py",
        "parent": "src.services.shared.monitoring.metrics_collector",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.metrics_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Record the length of generated code."
      },
      "src.services.shared.monitoring.metrics_collector.record_cache_hit": {
        "name": "src.services.shared.monitoring.metrics_collector.record_cache_hit",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/metrics_collector.py",
        "parent": "src.services.shared.monitoring.metrics_collector",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.metrics_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Record a cache hit."
      },
      "src.services.shared.monitoring.metrics_collector.record_cache_miss": {
        "name": "src.services.shared.monitoring.metrics_collector.record_cache_miss",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/metrics_collector.py",
        "parent": "src.services.shared.monitoring.metrics_collector",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.metrics_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Record a cache miss."
      },
      "src.services.shared.monitoring.metrics_collector.record_component_status": {
        "name": "src.services.shared.monitoring.metrics_collector.record_component_status",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/metrics_collector.py",
        "parent": "src.services.shared.monitoring.metrics_collector",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.metrics_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Record a component status (e.g., started, stopped, initializing)."
      },
      "src.services.shared.monitoring.metrics_collector.update_gpu_memory_usage": {
        "name": "src.services.shared.monitoring.metrics_collector.update_gpu_memory_usage",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/metrics_collector.py",
        "parent": "src.services.shared.monitoring.metrics_collector",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.metrics_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Update GPU memory usage."
      },
      "src.services.shared.monitoring.metrics_collector.start_model_loading_timer": {
        "name": "src.services.shared.monitoring.metrics_collector.start_model_loading_timer",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/metrics_collector.py",
        "parent": "src.services.shared.monitoring.metrics_collector",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.metrics_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Start a timer for model loading."
      },
      "src.services.shared.monitoring.metrics_collector.record_event_emitted": {
        "name": "src.services.shared.monitoring.metrics_collector.record_event_emitted",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/metrics_collector.py",
        "parent": "src.services.shared.monitoring.metrics_collector",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.metrics_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Record an emitted event."
      },
      "src.services.shared.monitoring.metrics_collector.record_event_received": {
        "name": "src.services.shared.monitoring.metrics_collector.record_event_received",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/metrics_collector.py",
        "parent": "src.services.shared.monitoring.metrics_collector",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.metrics_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Record a received event."
      },
      "src.services.shared.monitoring.metrics_collector.start_event_processing_timer": {
        "name": "src.services.shared.monitoring.metrics_collector.start_event_processing_timer",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/metrics_collector.py",
        "parent": "src.services.shared.monitoring.metrics_collector",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.metrics_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Start a timer for event processing."
      },
      "src.services.shared.monitoring.metrics_collector.set_component_up": {
        "name": "src.services.shared.monitoring.metrics_collector.set_component_up",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/metrics_collector.py",
        "parent": "src.services.shared.monitoring.metrics_collector",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.metrics_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Set whether the component is up."
      },
      "src.services.shared.monitoring.metrics_collector.record_error": {
        "name": "src.services.shared.monitoring.metrics_collector.record_error",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/metrics_collector.py",
        "parent": "src.services.shared.monitoring.metrics_collector",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.metrics_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Record an error."
      },
      "src.services.shared.monitoring.metrics_collector.start_vector_db_timer": {
        "name": "src.services.shared.monitoring.metrics_collector.start_vector_db_timer",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/metrics_collector.py",
        "parent": "src.services.shared.monitoring.metrics_collector",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.metrics_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Start a timer for a vector database operation."
      },
      "src.services.shared.monitoring.metrics_collector.record_vector_db_operation": {
        "name": "src.services.shared.monitoring.metrics_collector.record_vector_db_operation",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/metrics_collector.py",
        "parent": "src.services.shared.monitoring.metrics_collector",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.metrics_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Record a vector database operation."
      },
      "src.services.shared.monitoring.circuit_breaker": {
        "name": "src.services.shared.monitoring.circuit_breaker",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/monitoring/circuit_breaker.py",
        "parent": null,
        "dependencies": [],
        "dependents": [
          "infra.registration.registration"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Circuit Breaker implementation for the Program Synthesis System."
      },
      "src.services.shared.monitoring.circuit_breaker.CircuitState": {
        "name": "src.services.shared.monitoring.circuit_breaker.CircuitState",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/monitoring/circuit_breaker.py",
        "parent": "src.services.shared.monitoring.circuit_breaker",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.circuit_breaker"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "States of the circuit breaker."
      },
      "src.services.shared.monitoring.circuit_breaker.CircuitBreakerError": {
        "name": "src.services.shared.monitoring.circuit_breaker.CircuitBreakerError",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/monitoring/circuit_breaker.py",
        "parent": "src.services.shared.monitoring.circuit_breaker",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.circuit_breaker"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Exception raised when the circuit breaker is open."
      },
      "src.services.shared.monitoring.circuit_breaker.CircuitBreaker": {
        "name": "src.services.shared.monitoring.circuit_breaker.CircuitBreaker",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/monitoring/circuit_breaker.py",
        "parent": "src.services.shared.monitoring.circuit_breaker",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.circuit_breaker"
        ],
        "methods": [
          "__init__",
          "is_open",
          "get_state",
          "get_metrics",
          "__str__"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Circuit Breaker implementation to prevent cascading failures."
      },
      "src.services.shared.monitoring.circuit_breaker.circuit_breaker": {
        "name": "src.services.shared.monitoring.circuit_breaker.circuit_breaker",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/circuit_breaker.py",
        "parent": "src.services.shared.monitoring.circuit_breaker",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.circuit_breaker"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Decorator to apply circuit breaker pattern to synchronous functions."
      },
      "src.services.shared.monitoring.circuit_breaker.async_circuit_breaker": {
        "name": "src.services.shared.monitoring.circuit_breaker.async_circuit_breaker",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/circuit_breaker.py",
        "parent": "src.services.shared.monitoring.circuit_breaker",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.circuit_breaker"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Decorator to apply circuit breaker pattern to asynchronous functions."
      },
      "src.services.shared.monitoring.circuit_breaker.create_circuit_breaker_from_config": {
        "name": "src.services.shared.monitoring.circuit_breaker.create_circuit_breaker_from_config",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/circuit_breaker.py",
        "parent": "src.services.shared.monitoring.circuit_breaker",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.circuit_breaker"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Create a circuit breaker instance from configuration."
      },
      "src.services.shared.monitoring.circuit_breaker.__init__": {
        "name": "src.services.shared.monitoring.circuit_breaker.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/circuit_breaker.py",
        "parent": "src.services.shared.monitoring.circuit_breaker",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.circuit_breaker"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the circuit breaker."
      },
      "src.services.shared.monitoring.circuit_breaker.is_open": {
        "name": "src.services.shared.monitoring.circuit_breaker.is_open",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/circuit_breaker.py",
        "parent": "src.services.shared.monitoring.circuit_breaker",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.circuit_breaker"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Check if the circuit is currently open."
      },
      "src.services.shared.monitoring.circuit_breaker.get_state": {
        "name": "src.services.shared.monitoring.circuit_breaker.get_state",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/circuit_breaker.py",
        "parent": "src.services.shared.monitoring.circuit_breaker",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.circuit_breaker"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get the current circuit state."
      },
      "src.services.shared.monitoring.circuit_breaker.get_metrics": {
        "name": "src.services.shared.monitoring.circuit_breaker.get_metrics",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/circuit_breaker.py",
        "parent": "src.services.shared.monitoring.circuit_breaker",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.circuit_breaker"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get circuit breaker metrics."
      },
      "src.services.shared.monitoring.circuit_breaker.__str__": {
        "name": "src.services.shared.monitoring.circuit_breaker.__str__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/circuit_breaker.py",
        "parent": "src.services.shared.monitoring.circuit_breaker",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.circuit_breaker"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "String representation of the circuit breaker."
      },
      "src.services.shared.monitoring.circuit_breaker.decorator": {
        "name": "src.services.shared.monitoring.circuit_breaker.decorator",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/circuit_breaker.py",
        "parent": "src.services.shared.monitoring.circuit_breaker",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.circuit_breaker",
          "src.services.shared.monitoring.circuit_breaker"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.monitoring.circuit_breaker.wrapper": {
        "name": "src.services.shared.monitoring.circuit_breaker.wrapper",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/monitoring/circuit_breaker.py",
        "parent": "src.services.shared.monitoring.circuit_breaker",
        "dependencies": [],
        "dependents": [
          "src.services.shared.monitoring.circuit_breaker"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.logging.__init__": {
        "name": "src.services.shared.logging.__init__",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/logging/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.logging.logger": {
        "name": "src.services.shared.logging.logger",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/logging/logger.py",
        "parent": null,
        "dependencies": [],
        "dependents": [
          "src.services.meta_learner.main",
          "src.services.knowledge_base.vector_db_service",
          "src.services.ast_code_generator.app.ast_code_generator",
          "src.services.spec_registry.app.spec_registry",
          "src.services.aggregators.app.response_aggregator",
          "src.api_gateway.neural_interpretor.app.nueral_interpretor",
          "infra.registration.registration"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Dedicated logging service that subscribes to log events and stores them in MongoDB."
      },
      "src.services.shared.logging.logger.LoggerService": {
        "name": "src.services.shared.logging.logger.LoggerService",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/logging/logger.py",
        "parent": "src.services.shared.logging.logger",
        "dependencies": [],
        "dependents": [
          "src.services.shared.logging.logger"
        ],
        "methods": [
          "__init__"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Service that subscribes to log events and stores them in MongoDB."
      },
      "src.services.shared.logging.logger.__init__": {
        "name": "src.services.shared.logging.logger.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/logging/logger.py",
        "parent": "src.services.shared.logging.logger",
        "dependencies": [],
        "dependents": [
          "src.services.shared.logging.logger"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the logger service."
      },
      "src.services.shared.logging.db_handler": {
        "name": "src.services.shared.logging.db_handler",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/logging/db_handler.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.logging.db_handler.PulsarLogHandler": {
        "name": "src.services.shared.logging.db_handler.PulsarLogHandler",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/logging/db_handler.py",
        "parent": "src.services.shared.logging.db_handler",
        "dependencies": [],
        "dependents": [
          "src.services.shared.logging.db_handler"
        ],
        "methods": [
          "__init__",
          "_connect",
          "emit",
          "format",
          "format_message",
          "close"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Logging handler that publishes log messages to Pulsar."
      },
      "src.services.shared.logging.db_handler.__init__": {
        "name": "src.services.shared.logging.db_handler.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/logging/db_handler.py",
        "parent": "src.services.shared.logging.db_handler",
        "dependencies": [],
        "dependents": [
          "src.services.shared.logging.db_handler"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the handler."
      },
      "src.services.shared.logging.db_handler._connect": {
        "name": "src.services.shared.logging.db_handler._connect",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/logging/db_handler.py",
        "parent": "src.services.shared.logging.db_handler",
        "dependencies": [],
        "dependents": [
          "src.services.shared.logging.db_handler"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Connect to Pulsar."
      },
      "src.services.shared.logging.db_handler.emit": {
        "name": "src.services.shared.logging.db_handler.emit",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/logging/db_handler.py",
        "parent": "src.services.shared.logging.db_handler",
        "dependencies": [],
        "dependents": [
          "src.services.shared.logging.db_handler"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Emit a log record to Pulsar."
      },
      "src.services.shared.logging.db_handler.format": {
        "name": "src.services.shared.logging.db_handler.format",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/logging/db_handler.py",
        "parent": "src.services.shared.logging.db_handler",
        "dependencies": [],
        "dependents": [
          "src.services.shared.logging.db_handler"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Format the log record as a dictionary."
      },
      "src.services.shared.logging.db_handler.format_message": {
        "name": "src.services.shared.logging.db_handler.format_message",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/logging/db_handler.py",
        "parent": "src.services.shared.logging.db_handler",
        "dependencies": [],
        "dependents": [
          "src.services.shared.logging.db_handler"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Format the log message."
      },
      "src.services.shared.logging.db_handler.close": {
        "name": "src.services.shared.logging.db_handler.close",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/logging/db_handler.py",
        "parent": "src.services.shared.logging.db_handler",
        "dependencies": [],
        "dependents": [
          "src.services.shared.logging.db_handler"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Close the handler."
      },
      "src.services.shared.validation.validator": {
        "name": "src.services.shared.validation.validator",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/validation/validator.py",
        "parent": null,
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor",
          "src.api_gateway.neural_interpretor.app.nueral_interpretor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Validation utility for the Program Synthesis System."
      },
      "src.services.shared.validation.validator.ValidationResult": {
        "name": "src.services.shared.validation.validator.ValidationResult",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/validation/validator.py",
        "parent": "src.services.shared.validation.validator",
        "dependencies": [],
        "dependents": [
          "src.services.shared.validation.validator"
        ],
        "methods": [
          "__init__",
          "__bool__",
          "add_error",
          "add_errors",
          "merge",
          "error_message"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Result of a validation operation."
      },
      "src.services.shared.validation.validator.ValidationError": {
        "name": "src.services.shared.validation.validator.ValidationError",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/validation/validator.py",
        "parent": "src.services.shared.validation.validator",
        "dependencies": [],
        "dependents": [
          "src.services.shared.validation.validator"
        ],
        "methods": [
          "__init__"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Exception raised for validation errors."
      },
      "src.services.shared.validation.validator.Validator": {
        "name": "src.services.shared.validation.validator.Validator",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/validation/validator.py",
        "parent": "src.services.shared.validation.validator",
        "dependencies": [],
        "dependents": [
          "src.services.shared.validation.validator"
        ],
        "methods": [
          "__init__",
          "validate",
          "__call__"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Base class for validators."
      },
      "src.services.shared.validation.validator.TypeValidator": {
        "name": "src.services.shared.validation.validator.TypeValidator",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/validation/validator.py",
        "parent": "src.services.shared.validation.validator",
        "dependencies": [],
        "dependents": [
          "src.services.shared.validation.validator"
        ],
        "methods": [
          "__init__",
          "validate"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Validates that a value is of the expected type."
      },
      "src.services.shared.validation.validator.StringValidator": {
        "name": "src.services.shared.validation.validator.StringValidator",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/validation/validator.py",
        "parent": "src.services.shared.validation.validator",
        "dependencies": [],
        "dependents": [
          "src.services.shared.validation.validator"
        ],
        "methods": [
          "__init__",
          "validate"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Validates string values."
      },
      "src.services.shared.validation.validator.NumberValidator": {
        "name": "src.services.shared.validation.validator.NumberValidator",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/validation/validator.py",
        "parent": "src.services.shared.validation.validator",
        "dependencies": [],
        "dependents": [
          "src.services.shared.validation.validator"
        ],
        "methods": [
          "__init__",
          "validate"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Validates numeric values."
      },
      "src.services.shared.validation.validator.validate_input": {
        "name": "src.services.shared.validation.validator.validate_input",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/validation/validator.py",
        "parent": "src.services.shared.validation.validator",
        "dependencies": [],
        "dependents": [
          "src.services.shared.validation.validator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Decorator to validate function input arguments using specified validators."
      },
      "src.services.shared.validation.validator.__init__": {
        "name": "src.services.shared.validation.validator.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/validation/validator.py",
        "parent": "src.services.shared.validation.validator",
        "dependencies": [],
        "dependents": [
          "src.services.shared.validation.validator",
          "src.services.shared.validation.validator",
          "src.services.shared.validation.validator",
          "src.services.shared.validation.validator",
          "src.services.shared.validation.validator",
          "src.services.shared.validation.validator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the validator."
      },
      "src.services.shared.validation.validator.__bool__": {
        "name": "src.services.shared.validation.validator.__bool__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/validation/validator.py",
        "parent": "src.services.shared.validation.validator",
        "dependencies": [],
        "dependents": [
          "src.services.shared.validation.validator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Convert to boolean (True if valid)."
      },
      "src.services.shared.validation.validator.add_error": {
        "name": "src.services.shared.validation.validator.add_error",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/validation/validator.py",
        "parent": "src.services.shared.validation.validator",
        "dependencies": [],
        "dependents": [
          "src.services.shared.validation.validator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Add an error message."
      },
      "src.services.shared.validation.validator.add_errors": {
        "name": "src.services.shared.validation.validator.add_errors",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/validation/validator.py",
        "parent": "src.services.shared.validation.validator",
        "dependencies": [],
        "dependents": [
          "src.services.shared.validation.validator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Add multiple error messages."
      },
      "src.services.shared.validation.validator.merge": {
        "name": "src.services.shared.validation.validator.merge",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/validation/validator.py",
        "parent": "src.services.shared.validation.validator",
        "dependencies": [],
        "dependents": [
          "src.services.shared.validation.validator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Merge with another validation result."
      },
      "src.services.shared.validation.validator.error_message": {
        "name": "src.services.shared.validation.validator.error_message",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/validation/validator.py",
        "parent": "src.services.shared.validation.validator",
        "dependencies": [],
        "dependents": [
          "src.services.shared.validation.validator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get a combined error message."
      },
      "src.services.shared.validation.validator.validate": {
        "name": "src.services.shared.validation.validator.validate",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/validation/validator.py",
        "parent": "src.services.shared.validation.validator",
        "dependencies": [],
        "dependents": [
          "src.services.shared.validation.validator",
          "src.services.shared.validation.validator",
          "src.services.shared.validation.validator",
          "src.services.shared.validation.validator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Validate a numeric value."
      },
      "src.services.shared.validation.validator.__call__": {
        "name": "src.services.shared.validation.validator.__call__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/validation/validator.py",
        "parent": "src.services.shared.validation.validator",
        "dependencies": [],
        "dependents": [
          "src.services.shared.validation.validator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Call the validator."
      },
      "src.services.shared.validation.validator.decorator": {
        "name": "src.services.shared.validation.validator.decorator",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/validation/validator.py",
        "parent": "src.services.shared.validation.validator",
        "dependencies": [],
        "dependents": [
          "src.services.shared.validation.validator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.validation.validator.wrapper": {
        "name": "src.services.shared.validation.validator.wrapper",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/validation/validator.py",
        "parent": "src.services.shared.validation.validator",
        "dependencies": [],
        "dependents": [
          "src.services.shared.validation.validator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.validation.__init__": {
        "name": "src.services.shared.validation.__init__",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/validation/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.models.tests.__init__": {
        "name": "src.services.shared.models.tests.__init__",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/models/tests/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.models.tests.event_avro_test": {
        "name": "src.services.shared.models.tests.event_avro_test",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/models/tests/event_avro_test.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.models.tests.event_avro_test.test_event_model_validation": {
        "name": "src.services.shared.models.tests.event_avro_test.test_event_model_validation",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/tests/event_avro_test.py",
        "parent": "src.services.shared.models.tests.event_avro_test",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.tests.event_avro_test"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Test validation of Event model."
      },
      "src.services.shared.models.tests.event_avro_test.test_avro_serialization": {
        "name": "src.services.shared.models.tests.event_avro_test.test_avro_serialization",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/tests/event_avro_test.py",
        "parent": "src.services.shared.models.tests.event_avro_test",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.tests.event_avro_test"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Test serialization to/from Avro."
      },
      "src.services.shared.models.tests.test_event_converter": {
        "name": "src.services.shared.models.tests.test_event_converter",
        "type": "module",
        "service": "src",
        "file_path": "src/services/shared/models/tests/test_event_converter.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.models.tests.test_event_converter.TestEnum": {
        "name": "src.services.shared.models.tests.test_event_converter.TestEnum",
        "type": "class",
        "service": "src",
        "file_path": "src/services/shared/models/tests/test_event_converter.py",
        "parent": "src.services.shared.models.tests.test_event_converter",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.tests.test_event_converter"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.shared.models.tests.test_event_converter.test_to_avro_basic": {
        "name": "src.services.shared.models.tests.test_event_converter.test_to_avro_basic",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/tests/test_event_converter.py",
        "parent": "src.services.shared.models.tests.test_event_converter",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.tests.test_event_converter"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Test basic conversion to Avro."
      },
      "src.services.shared.models.tests.test_event_converter.test_from_avro_basic": {
        "name": "src.services.shared.models.tests.test_event_converter.test_from_avro_basic",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/tests/test_event_converter.py",
        "parent": "src.services.shared.models.tests.test_event_converter",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.tests.test_event_converter"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Test basic conversion from Avro."
      },
      "src.services.shared.models.tests.test_event_converter.test_ensure_avro_compatible": {
        "name": "src.services.shared.models.tests.test_event_converter.test_ensure_avro_compatible",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/tests/test_event_converter.py",
        "parent": "src.services.shared.models.tests.test_event_converter",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.tests.test_event_converter"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Test conversion of complex structures to Avro-compatible types."
      },
      "src.services.shared.models.tests.test_event_converter.test_roundtrip": {
        "name": "src.services.shared.models.tests.test_event_converter.test_roundtrip",
        "type": "function",
        "service": "src",
        "file_path": "src/services/shared/models/tests/test_event_converter.py",
        "parent": "src.services.shared.models.tests.test_event_converter",
        "dependencies": [],
        "dependents": [
          "src.services.shared.models.tests.test_event_converter"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Test roundtrip conversion."
      },
      "src.services.agents.app.event_service": {
        "name": "src.services.agents.app.event_service",
        "type": "module",
        "service": "src",
        "file_path": "src/services/agents/app/event_service.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.agents.app.event_service.AgentEventService": {
        "name": "src.services.agents.app.event_service.AgentEventService",
        "type": "class",
        "service": "src",
        "file_path": "src/services/agents/app/event_service.py",
        "parent": "src.services.agents.app.event_service",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.event_service"
        ],
        "methods": [
          "__init__",
          "register_handler"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Service for handling event communication for the agent template system."
      },
      "src.services.agents.app.event_service.__init__": {
        "name": "src.services.agents.app.event_service.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/agents/app/event_service.py",
        "parent": "src.services.agents.app.event_service",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.event_service"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.agents.app.event_service.register_handler": {
        "name": "src.services.agents.app.event_service.register_handler",
        "type": "function",
        "service": "src",
        "file_path": "src/services/agents/app/event_service.py",
        "parent": "src.services.agents.app.event_service",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.event_service"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Register a handler for a specific event type."
      },
      "src.services.agents.app.__init__": {
        "name": "src.services.agents.app.__init__",
        "type": "module",
        "service": "src",
        "file_path": "src/services/agents/app/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.agents.app.agent_generator": {
        "name": "src.services.agents.app.agent_generator",
        "type": "module",
        "service": "src",
        "file_path": "src/services/agents/app/agent_generator.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.agents.app.agent_generator.AgentGenerator": {
        "name": "src.services.agents.app.agent_generator.AgentGenerator",
        "type": "class",
        "service": "src",
        "file_path": "src/services/agents/app/agent_generator.py",
        "parent": "src.services.agents.app.agent_generator",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.agent_generator"
        ],
        "methods": [
          "__init__",
          "get_instance",
          "list_instances"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Service for generating agent implementations from templates."
      },
      "src.services.agents.app.agent_generator.__init__": {
        "name": "src.services.agents.app.agent_generator.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/agents/app/agent_generator.py",
        "parent": "src.services.agents.app.agent_generator",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.agent_generator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.agents.app.agent_generator.get_instance": {
        "name": "src.services.agents.app.agent_generator.get_instance",
        "type": "function",
        "service": "src",
        "file_path": "src/services/agents/app/agent_generator.py",
        "parent": "src.services.agents.app.agent_generator",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.agent_generator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get an agent instance by ID."
      },
      "src.services.agents.app.agent_generator.list_instances": {
        "name": "src.services.agents.app.agent_generator.list_instances",
        "type": "function",
        "service": "src",
        "file_path": "src/services/agents/app/agent_generator.py",
        "parent": "src.services.agents.app.agent_generator",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.agent_generator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "List agent instances, optionally filtered by template ID."
      },
      "src.services.agents.app.agent_workflow": {
        "name": "src.services.agents.app.agent_workflow",
        "type": "module",
        "service": "src",
        "file_path": "src/services/agents/app/agent_workflow.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.agents.app.agent_template": {
        "name": "src.services.agents.app.agent_template",
        "type": "module",
        "service": "src",
        "file_path": "src/services/agents/app/agent_template.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.agents.app.agent_template.TemplateService": {
        "name": "src.services.agents.app.agent_template.TemplateService",
        "type": "class",
        "service": "src",
        "file_path": "src/services/agents/app/agent_template.py",
        "parent": "src.services.agents.app.agent_template",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.agent_template"
        ],
        "methods": [
          "__init__",
          "_load_templates",
          "_save_template",
          "get_template",
          "list_templates",
          "delete_template"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Service for managing agent templates."
      },
      "src.services.agents.app.agent_template.__init__": {
        "name": "src.services.agents.app.agent_template.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/agents/app/agent_template.py",
        "parent": "src.services.agents.app.agent_template",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.agent_template"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.agents.app.agent_template._load_templates": {
        "name": "src.services.agents.app.agent_template._load_templates",
        "type": "function",
        "service": "src",
        "file_path": "src/services/agents/app/agent_template.py",
        "parent": "src.services.agents.app.agent_template",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.agent_template"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Load templates from storage."
      },
      "src.services.agents.app.agent_template._save_template": {
        "name": "src.services.agents.app.agent_template._save_template",
        "type": "function",
        "service": "src",
        "file_path": "src/services/agents/app/agent_template.py",
        "parent": "src.services.agents.app.agent_template",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.agent_template"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Save a template to storage."
      },
      "src.services.agents.app.agent_template.get_template": {
        "name": "src.services.agents.app.agent_template.get_template",
        "type": "function",
        "service": "src",
        "file_path": "src/services/agents/app/agent_template.py",
        "parent": "src.services.agents.app.agent_template",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.agent_template"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get a template by ID."
      },
      "src.services.agents.app.agent_template.list_templates": {
        "name": "src.services.agents.app.agent_template.list_templates",
        "type": "function",
        "service": "src",
        "file_path": "src/services/agents/app/agent_template.py",
        "parent": "src.services.agents.app.agent_template",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.agent_template"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "List all templates."
      },
      "src.services.agents.app.agent_template.delete_template": {
        "name": "src.services.agents.app.agent_template.delete_template",
        "type": "function",
        "service": "src",
        "file_path": "src/services/agents/app/agent_template.py",
        "parent": "src.services.agents.app.agent_template",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.agent_template"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Delete a template."
      },
      "src.services.agents.app.block_registry": {
        "name": "src.services.agents.app.block_registry",
        "type": "module",
        "service": "src",
        "file_path": "src/services/agents/app/block_registry.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.agents.app.block_registry.BlockRegistry": {
        "name": "src.services.agents.app.block_registry.BlockRegistry",
        "type": "class",
        "service": "src",
        "file_path": "src/services/agents/app/block_registry.py",
        "parent": "src.services.agents.app.block_registry",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.block_registry"
        ],
        "methods": [
          "__init__",
          "_load_blocks",
          "_save_block",
          "get_block",
          "list_blocks",
          "delete_block"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Registry service for storing and retrieving agent blocks."
      },
      "src.services.agents.app.block_registry.__init__": {
        "name": "src.services.agents.app.block_registry.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/agents/app/block_registry.py",
        "parent": "src.services.agents.app.block_registry",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.block_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.agents.app.block_registry._load_blocks": {
        "name": "src.services.agents.app.block_registry._load_blocks",
        "type": "function",
        "service": "src",
        "file_path": "src/services/agents/app/block_registry.py",
        "parent": "src.services.agents.app.block_registry",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.block_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Load blocks from storage."
      },
      "src.services.agents.app.block_registry._save_block": {
        "name": "src.services.agents.app.block_registry._save_block",
        "type": "function",
        "service": "src",
        "file_path": "src/services/agents/app/block_registry.py",
        "parent": "src.services.agents.app.block_registry",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.block_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Save a block to storage."
      },
      "src.services.agents.app.block_registry.get_block": {
        "name": "src.services.agents.app.block_registry.get_block",
        "type": "function",
        "service": "src",
        "file_path": "src/services/agents/app/block_registry.py",
        "parent": "src.services.agents.app.block_registry",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.block_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get a block by ID."
      },
      "src.services.agents.app.block_registry.list_blocks": {
        "name": "src.services.agents.app.block_registry.list_blocks",
        "type": "function",
        "service": "src",
        "file_path": "src/services/agents/app/block_registry.py",
        "parent": "src.services.agents.app.block_registry",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.block_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "List blocks, optionally filtered by type and tags."
      },
      "src.services.agents.app.block_registry.delete_block": {
        "name": "src.services.agents.app.block_registry.delete_block",
        "type": "function",
        "service": "src",
        "file_path": "src/services/agents/app/block_registry.py",
        "parent": "src.services.agents.app.block_registry",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.block_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Delete a block."
      },
      "src.services.agents.app.models.events": {
        "name": "src.services.agents.app.models.events",
        "type": "module",
        "service": "src",
        "file_path": "src/services/agents/app/models/events.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.agents.app.models.events.AgentBlockCreatedEvent": {
        "name": "src.services.agents.app.models.events.AgentBlockCreatedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/agents/app/models/events.py",
        "parent": "src.services.agents.app.models.events",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.models.events"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.agents.app.models.events.AgentBlockUpdatedEvent": {
        "name": "src.services.agents.app.models.events.AgentBlockUpdatedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/agents/app/models/events.py",
        "parent": "src.services.agents.app.models.events",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.models.events"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.agents.app.models.events.AgentTemplateCreatedEvent": {
        "name": "src.services.agents.app.models.events.AgentTemplateCreatedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/agents/app/models/events.py",
        "parent": "src.services.agents.app.models.events",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.models.events"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.agents.app.models.events.AgentTemplateUpdatedEvent": {
        "name": "src.services.agents.app.models.events.AgentTemplateUpdatedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/agents/app/models/events.py",
        "parent": "src.services.agents.app.models.events",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.models.events"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.agents.app.models.events.AgentInstanceCreatedEvent": {
        "name": "src.services.agents.app.models.events.AgentInstanceCreatedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/agents/app/models/events.py",
        "parent": "src.services.agents.app.models.events",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.models.events"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.agents.app.models.events.AgentInstanceStartedEvent": {
        "name": "src.services.agents.app.models.events.AgentInstanceStartedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/agents/app/models/events.py",
        "parent": "src.services.agents.app.models.events",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.models.events"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.agents.app.models.events.AgentInstanceCompletedEvent": {
        "name": "src.services.agents.app.models.events.AgentInstanceCompletedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/agents/app/models/events.py",
        "parent": "src.services.agents.app.models.events",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.models.events"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.agents.app.models.events.AgentInstanceFailedEvent": {
        "name": "src.services.agents.app.models.events.AgentInstanceFailedEvent",
        "type": "class",
        "service": "src",
        "file_path": "src/services/agents/app/models/events.py",
        "parent": "src.services.agents.app.models.events",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.models.events"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.agents.app.models.__init__": {
        "name": "src.services.agents.app.models.__init__",
        "type": "module",
        "service": "src",
        "file_path": "src/services/agents/app/models/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.agents.app.models.agent_blocks": {
        "name": "src.services.agents.app.models.agent_blocks",
        "type": "module",
        "service": "src",
        "file_path": "src/services/agents/app/models/agent_blocks.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.agents.app.models.agent_blocks.BlockType": {
        "name": "src.services.agents.app.models.agent_blocks.BlockType",
        "type": "class",
        "service": "src",
        "file_path": "src/services/agents/app/models/agent_blocks.py",
        "parent": "src.services.agents.app.models.agent_blocks",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.models.agent_blocks"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.agents.app.models.agent_blocks.InputParameter": {
        "name": "src.services.agents.app.models.agent_blocks.InputParameter",
        "type": "class",
        "service": "src",
        "file_path": "src/services/agents/app/models/agent_blocks.py",
        "parent": "src.services.agents.app.models.agent_blocks",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.models.agent_blocks"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.agents.app.models.agent_blocks.OutputParameter": {
        "name": "src.services.agents.app.models.agent_blocks.OutputParameter",
        "type": "class",
        "service": "src",
        "file_path": "src/services/agents/app/models/agent_blocks.py",
        "parent": "src.services.agents.app.models.agent_blocks",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.models.agent_blocks"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.agents.app.models.agent_blocks.BlockMetadata": {
        "name": "src.services.agents.app.models.agent_blocks.BlockMetadata",
        "type": "class",
        "service": "src",
        "file_path": "src/services/agents/app/models/agent_blocks.py",
        "parent": "src.services.agents.app.models.agent_blocks",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.models.agent_blocks"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.agents.app.models.agent_blocks.AgentBlock": {
        "name": "src.services.agents.app.models.agent_blocks.AgentBlock",
        "type": "class",
        "service": "src",
        "file_path": "src/services/agents/app/models/agent_blocks.py",
        "parent": "src.services.agents.app.models.agent_blocks",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.models.agent_blocks"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.agents.app.models.agent_blocks.AgentTemplate": {
        "name": "src.services.agents.app.models.agent_blocks.AgentTemplate",
        "type": "class",
        "service": "src",
        "file_path": "src/services/agents/app/models/agent_blocks.py",
        "parent": "src.services.agents.app.models.agent_blocks",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.models.agent_blocks"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.agents.app.models.agent_blocks.AgentInstance": {
        "name": "src.services.agents.app.models.agent_blocks.AgentInstance",
        "type": "class",
        "service": "src",
        "file_path": "src/services/agents/app/models/agent_blocks.py",
        "parent": "src.services.agents.app.models.agent_blocks",
        "dependencies": [],
        "dependents": [
          "src.services.agents.app.models.agent_blocks"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.spec_registry.app.spec_registry": {
        "name": "src.services.spec_registry.app.spec_registry",
        "type": "module",
        "service": "src",
        "file_path": "src/services/spec_registry/app/spec_registry.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.spec_registry.app.spec_registry.SpecRegistry": {
        "name": "src.services.spec_registry.app.spec_registry.SpecRegistry",
        "type": "class",
        "service": "src",
        "file_path": "src/services/spec_registry/app/spec_registry.py",
        "parent": "src.services.spec_registry.app.spec_registry",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.spec_registry"
        ],
        "methods": [
          "__init__",
          "_init_validators",
          "get_fields_for_spec_type",
          "_get_fields_for_spec_type",
          "_get_container_field_definitions",
          "_get_api_field_definitions",
          "_get_database_field_definitions",
          "_validate_spec",
          "_validate_required",
          "_validate_min_length",
          "_validate_max_length",
          "_validate_min_value",
          "_validate_max_value",
          "_validate_pattern",
          "_validate_string",
          "_validate_int",
          "_validate_float",
          "_validate_boolean",
          "_validate_list",
          "_validate_json",
          "_validate_code",
          "_validate_datetime",
          "_validate_reference"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Registry for managing specification sheets."
      },
      "src.services.spec_registry.app.spec_registry.__init__": {
        "name": "src.services.spec_registry.app.spec_registry.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/spec_registry.py",
        "parent": "src.services.spec_registry.app.spec_registry",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.spec_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the spec registry."
      },
      "src.services.spec_registry.app.spec_registry._init_validators": {
        "name": "src.services.spec_registry.app.spec_registry._init_validators",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/spec_registry.py",
        "parent": "src.services.spec_registry.app.spec_registry",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.spec_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the validators for spec sheets."
      },
      "src.services.spec_registry.app.spec_registry.get_fields_for_spec_type": {
        "name": "src.services.spec_registry.app.spec_registry.get_fields_for_spec_type",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/spec_registry.py",
        "parent": "src.services.spec_registry.app.spec_registry",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.spec_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get the field definitions for a spec type."
      },
      "src.services.spec_registry.app.spec_registry._get_fields_for_spec_type": {
        "name": "src.services.spec_registry.app.spec_registry._get_fields_for_spec_type",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/spec_registry.py",
        "parent": "src.services.spec_registry.app.spec_registry",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.spec_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get the field definitions for a spec type."
      },
      "src.services.spec_registry.app.spec_registry._get_container_field_definitions": {
        "name": "src.services.spec_registry.app.spec_registry._get_container_field_definitions",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/spec_registry.py",
        "parent": "src.services.spec_registry.app.spec_registry",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.spec_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get field definitions for container spec type."
      },
      "src.services.spec_registry.app.spec_registry._get_api_field_definitions": {
        "name": "src.services.spec_registry.app.spec_registry._get_api_field_definitions",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/spec_registry.py",
        "parent": "src.services.spec_registry.app.spec_registry",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.spec_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get field definitions for API spec type."
      },
      "src.services.spec_registry.app.spec_registry._get_database_field_definitions": {
        "name": "src.services.spec_registry.app.spec_registry._get_database_field_definitions",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/spec_registry.py",
        "parent": "src.services.spec_registry.app.spec_registry",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.spec_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get field definitions for database spec type."
      },
      "src.services.spec_registry.app.spec_registry._validate_spec": {
        "name": "src.services.spec_registry.app.spec_registry._validate_spec",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/spec_registry.py",
        "parent": "src.services.spec_registry.app.spec_registry",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.spec_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Validate all fields in a spec sheet."
      },
      "src.services.spec_registry.app.spec_registry._validate_required": {
        "name": "src.services.spec_registry.app.spec_registry._validate_required",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/spec_registry.py",
        "parent": "src.services.spec_registry.app.spec_registry",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.spec_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Validate that a required field has a value."
      },
      "src.services.spec_registry.app.spec_registry._validate_min_length": {
        "name": "src.services.spec_registry.app.spec_registry._validate_min_length",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/spec_registry.py",
        "parent": "src.services.spec_registry.app.spec_registry",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.spec_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Validate minimum length."
      },
      "src.services.spec_registry.app.spec_registry._validate_max_length": {
        "name": "src.services.spec_registry.app.spec_registry._validate_max_length",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/spec_registry.py",
        "parent": "src.services.spec_registry.app.spec_registry",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.spec_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Validate maximum length."
      },
      "src.services.spec_registry.app.spec_registry._validate_min_value": {
        "name": "src.services.spec_registry.app.spec_registry._validate_min_value",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/spec_registry.py",
        "parent": "src.services.spec_registry.app.spec_registry",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.spec_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Validate minimum value."
      },
      "src.services.spec_registry.app.spec_registry._validate_max_value": {
        "name": "src.services.spec_registry.app.spec_registry._validate_max_value",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/spec_registry.py",
        "parent": "src.services.spec_registry.app.spec_registry",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.spec_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Validate maximum value."
      },
      "src.services.spec_registry.app.spec_registry._validate_pattern": {
        "name": "src.services.spec_registry.app.spec_registry._validate_pattern",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/spec_registry.py",
        "parent": "src.services.spec_registry.app.spec_registry",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.spec_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Validate against a regex pattern."
      },
      "src.services.spec_registry.app.spec_registry._validate_string": {
        "name": "src.services.spec_registry.app.spec_registry._validate_string",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/spec_registry.py",
        "parent": "src.services.spec_registry.app.spec_registry",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.spec_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Validate string type."
      },
      "src.services.spec_registry.app.spec_registry._validate_int": {
        "name": "src.services.spec_registry.app.spec_registry._validate_int",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/spec_registry.py",
        "parent": "src.services.spec_registry.app.spec_registry",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.spec_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Validate integer type."
      },
      "src.services.spec_registry.app.spec_registry._validate_float": {
        "name": "src.services.spec_registry.app.spec_registry._validate_float",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/spec_registry.py",
        "parent": "src.services.spec_registry.app.spec_registry",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.spec_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Validate float type."
      },
      "src.services.spec_registry.app.spec_registry._validate_boolean": {
        "name": "src.services.spec_registry.app.spec_registry._validate_boolean",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/spec_registry.py",
        "parent": "src.services.spec_registry.app.spec_registry",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.spec_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Validate boolean type."
      },
      "src.services.spec_registry.app.spec_registry._validate_list": {
        "name": "src.services.spec_registry.app.spec_registry._validate_list",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/spec_registry.py",
        "parent": "src.services.spec_registry.app.spec_registry",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.spec_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Validate list type."
      },
      "src.services.spec_registry.app.spec_registry._validate_json": {
        "name": "src.services.spec_registry.app.spec_registry._validate_json",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/spec_registry.py",
        "parent": "src.services.spec_registry.app.spec_registry",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.spec_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Validate JSON."
      },
      "src.services.spec_registry.app.spec_registry._validate_code": {
        "name": "src.services.spec_registry.app.spec_registry._validate_code",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/spec_registry.py",
        "parent": "src.services.spec_registry.app.spec_registry",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.spec_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Validate code."
      },
      "src.services.spec_registry.app.spec_registry._validate_datetime": {
        "name": "src.services.spec_registry.app.spec_registry._validate_datetime",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/spec_registry.py",
        "parent": "src.services.spec_registry.app.spec_registry",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.spec_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Validate datetime."
      },
      "src.services.spec_registry.app.spec_registry._validate_reference": {
        "name": "src.services.spec_registry.app.spec_registry._validate_reference",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/spec_registry.py",
        "parent": "src.services.spec_registry.app.spec_registry",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.spec_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Validate reference to another spec."
      },
      "src.services.spec_registry.app.models": {
        "name": "src.services.spec_registry.app.models",
        "type": "module",
        "service": "src",
        "file_path": "src/services/spec_registry/app/models.py",
        "parent": null,
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.spec_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.spec_registry.app.models.FieldType": {
        "name": "src.services.spec_registry.app.models.FieldType",
        "type": "class",
        "service": "src",
        "file_path": "src/services/spec_registry/app/models.py",
        "parent": "src.services.spec_registry.app.models",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.models"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.spec_registry.app.models.SpecStatus": {
        "name": "src.services.spec_registry.app.models.SpecStatus",
        "type": "class",
        "service": "src",
        "file_path": "src/services/spec_registry/app/models.py",
        "parent": "src.services.spec_registry.app.models",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.models"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.spec_registry.app.models.FieldConstraint": {
        "name": "src.services.spec_registry.app.models.FieldConstraint",
        "type": "class",
        "service": "src",
        "file_path": "src/services/spec_registry/app/models.py",
        "parent": "src.services.spec_registry.app.models",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.models"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.spec_registry.app.models.RequiredConstraint": {
        "name": "src.services.spec_registry.app.models.RequiredConstraint",
        "type": "class",
        "service": "src",
        "file_path": "src/services/spec_registry/app/models.py",
        "parent": "src.services.spec_registry.app.models",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.models"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.spec_registry.app.models.MinLengthConstraint": {
        "name": "src.services.spec_registry.app.models.MinLengthConstraint",
        "type": "class",
        "service": "src",
        "file_path": "src/services/spec_registry/app/models.py",
        "parent": "src.services.spec_registry.app.models",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.models"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.spec_registry.app.models.MaxLengthConstraint": {
        "name": "src.services.spec_registry.app.models.MaxLengthConstraint",
        "type": "class",
        "service": "src",
        "file_path": "src/services/spec_registry/app/models.py",
        "parent": "src.services.spec_registry.app.models",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.models"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.spec_registry.app.models.PatternConstraint": {
        "name": "src.services.spec_registry.app.models.PatternConstraint",
        "type": "class",
        "service": "src",
        "file_path": "src/services/spec_registry/app/models.py",
        "parent": "src.services.spec_registry.app.models",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.models"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.spec_registry.app.models.MinValueConstraint": {
        "name": "src.services.spec_registry.app.models.MinValueConstraint",
        "type": "class",
        "service": "src",
        "file_path": "src/services/spec_registry/app/models.py",
        "parent": "src.services.spec_registry.app.models",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.models"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.spec_registry.app.models.MaxValueConstraint": {
        "name": "src.services.spec_registry.app.models.MaxValueConstraint",
        "type": "class",
        "service": "src",
        "file_path": "src/services/spec_registry/app/models.py",
        "parent": "src.services.spec_registry.app.models",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.models"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.spec_registry.app.models.FieldDefinition": {
        "name": "src.services.spec_registry.app.models.FieldDefinition",
        "type": "class",
        "service": "src",
        "file_path": "src/services/spec_registry/app/models.py",
        "parent": "src.services.spec_registry.app.models",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.models"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.spec_registry.app.models.SpecTemplate": {
        "name": "src.services.spec_registry.app.models.SpecTemplate",
        "type": "class",
        "service": "src",
        "file_path": "src/services/spec_registry/app/models.py",
        "parent": "src.services.spec_registry.app.models",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.models"
        ],
        "methods": [
          "validate_field_names",
          "to_internal_format",
          "_constraint_to_string",
          "from_internal_format",
          "_string_to_constraint"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.spec_registry.app.models.Spec": {
        "name": "src.services.spec_registry.app.models.Spec",
        "type": "class",
        "service": "src",
        "file_path": "src/services/spec_registry/app/models.py",
        "parent": "src.services.spec_registry.app.models",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.models"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.spec_registry.app.models.ValidationResult": {
        "name": "src.services.spec_registry.app.models.ValidationResult",
        "type": "class",
        "service": "src",
        "file_path": "src/services/spec_registry/app/models.py",
        "parent": "src.services.spec_registry.app.models",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.models"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.spec_registry.app.models.validate_field_names": {
        "name": "src.services.spec_registry.app.models.validate_field_names",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/models.py",
        "parent": "src.services.spec_registry.app.models",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.models"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Ensure that field names are unique."
      },
      "src.services.spec_registry.app.models.to_internal_format": {
        "name": "src.services.spec_registry.app.models.to_internal_format",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/models.py",
        "parent": "src.services.spec_registry.app.models",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.models"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Convert to the internal format used by the spec registry."
      },
      "src.services.spec_registry.app.models._constraint_to_string": {
        "name": "src.services.spec_registry.app.models._constraint_to_string",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/models.py",
        "parent": "src.services.spec_registry.app.models",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.models"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Convert a constraint to its string representation."
      },
      "src.services.spec_registry.app.models.from_internal_format": {
        "name": "src.services.spec_registry.app.models.from_internal_format",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/models.py",
        "parent": "src.services.spec_registry.app.models",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.models"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Create a SpecTemplate from the internal format used by the spec registry."
      },
      "src.services.spec_registry.app.models._string_to_constraint": {
        "name": "src.services.spec_registry.app.models._string_to_constraint",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/models.py",
        "parent": "src.services.spec_registry.app.models",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.models"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Convert a constraint string to a FieldConstraint object."
      },
      "src.services.spec_registry.app.__init__": {
        "name": "src.services.spec_registry.app.__init__",
        "type": "module",
        "service": "src",
        "file_path": "src/services/spec_registry/app/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.spec_registry.app.spec_registry_event_adapter": {
        "name": "src.services.spec_registry.app.spec_registry_event_adapter",
        "type": "module",
        "service": "src",
        "file_path": "src/services/spec_registry/app/spec_registry_event_adapter.py",
        "parent": null,
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.main"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Simple in-memory repository for spec sheets when PostgreSQL is not available."
      },
      "src.services.spec_registry.app.postgre_spec_repo": {
        "name": "src.services.spec_registry.app.postgre_spec_repo",
        "type": "module",
        "service": "src",
        "file_path": "src/services/spec_registry/app/postgre_spec_repo.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.spec_registry.app.postgre_spec_repo.PostgreSQLSpecRepository": {
        "name": "src.services.spec_registry.app.postgre_spec_repo.PostgreSQLSpecRepository",
        "type": "class",
        "service": "src",
        "file_path": "src/services/spec_registry/app/postgre_spec_repo.py",
        "parent": "src.services.spec_registry.app.postgre_spec_repo",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.postgre_spec_repo"
        ],
        "methods": [
          "__init__",
          "_format_record"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "PostgreSQL/Supabase implementation of the storage repository for spec sheets."
      },
      "src.services.spec_registry.app.postgre_spec_repo.__init__": {
        "name": "src.services.spec_registry.app.postgre_spec_repo.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/postgre_spec_repo.py",
        "parent": "src.services.spec_registry.app.postgre_spec_repo",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.postgre_spec_repo"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the PostgreSQL repository."
      },
      "src.services.spec_registry.app.postgre_spec_repo._format_record": {
        "name": "src.services.spec_registry.app.postgre_spec_repo._format_record",
        "type": "function",
        "service": "src",
        "file_path": "src/services/spec_registry/app/postgre_spec_repo.py",
        "parent": "src.services.spec_registry.app.postgre_spec_repo",
        "dependencies": [],
        "dependents": [
          "src.services.spec_registry.app.postgre_spec_repo"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Format a database record to a dictionary."
      },
      "src.services.spec_registry.app.main": {
        "name": "src.services.spec_registry.app.main",
        "type": "module",
        "service": "src",
        "file_path": "src/services/spec_registry/app/main.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.aggregators.app.response_aggregator": {
        "name": "src.services.aggregators.app.response_aggregator",
        "type": "module",
        "service": "src",
        "file_path": "src/services/aggregators/app/response_aggregator.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.aggregators.app.response_aggregator.ResponseAggregator": {
        "name": "src.services.aggregators.app.response_aggregator.ResponseAggregator",
        "type": "class",
        "service": "src",
        "file_path": "src/services/aggregators/app/response_aggregator.py",
        "parent": "src.services.aggregators.app.response_aggregator",
        "dependencies": [],
        "dependents": [
          "src.services.aggregators.app.response_aggregator"
        ],
        "methods": [
          "__init__",
          "register_response_processor",
          "_get_response_event_types",
          "_initialize_request",
          "_aggregate_responses",
          "_record_service_failure",
          "_is_circuit_open"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Modern event-driven ResponseAggregator that aggregates responses from multiple services."
      },
      "src.services.aggregators.app.response_aggregator.__init__": {
        "name": "src.services.aggregators.app.response_aggregator.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/aggregators/app/response_aggregator.py",
        "parent": "src.services.aggregators.app.response_aggregator",
        "dependencies": [],
        "dependents": [
          "src.services.aggregators.app.response_aggregator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.aggregators.app.response_aggregator.register_response_processor": {
        "name": "src.services.aggregators.app.response_aggregator.register_response_processor",
        "type": "function",
        "service": "src",
        "file_path": "src/services/aggregators/app/response_aggregator.py",
        "parent": "src.services.aggregators.app.response_aggregator",
        "dependencies": [],
        "dependents": [
          "src.services.aggregators.app.response_aggregator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Register a custom processor for specific event types."
      },
      "src.services.aggregators.app.response_aggregator._get_response_event_types": {
        "name": "src.services.aggregators.app.response_aggregator._get_response_event_types",
        "type": "function",
        "service": "src",
        "file_path": "src/services/aggregators/app/response_aggregator.py",
        "parent": "src.services.aggregators.app.response_aggregator",
        "dependencies": [],
        "dependents": [
          "src.services.aggregators.app.response_aggregator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get the list of event types to subscribe to."
      },
      "src.services.aggregators.app.response_aggregator._initialize_request": {
        "name": "src.services.aggregators.app.response_aggregator._initialize_request",
        "type": "function",
        "service": "src",
        "file_path": "src/services/aggregators/app/response_aggregator.py",
        "parent": "src.services.aggregators.app.response_aggregator",
        "dependencies": [],
        "dependents": [
          "src.services.aggregators.app.response_aggregator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize a new request entry."
      },
      "src.services.aggregators.app.response_aggregator._aggregate_responses": {
        "name": "src.services.aggregators.app.response_aggregator._aggregate_responses",
        "type": "function",
        "service": "src",
        "file_path": "src/services/aggregators/app/response_aggregator.py",
        "parent": "src.services.aggregators.app.response_aggregator",
        "dependencies": [],
        "dependents": [
          "src.services.aggregators.app.response_aggregator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Aggregate multiple responses into a single result."
      },
      "src.services.aggregators.app.response_aggregator._record_service_failure": {
        "name": "src.services.aggregators.app.response_aggregator._record_service_failure",
        "type": "function",
        "service": "src",
        "file_path": "src/services/aggregators/app/response_aggregator.py",
        "parent": "src.services.aggregators.app.response_aggregator",
        "dependencies": [],
        "dependents": [
          "src.services.aggregators.app.response_aggregator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Record a service failure for circuit breaker."
      },
      "src.services.aggregators.app.response_aggregator._is_circuit_open": {
        "name": "src.services.aggregators.app.response_aggregator._is_circuit_open",
        "type": "function",
        "service": "src",
        "file_path": "src/services/aggregators/app/response_aggregator.py",
        "parent": "src.services.aggregators.app.response_aggregator",
        "dependencies": [],
        "dependents": [
          "src.services.aggregators.app.response_aggregator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Check if circuit breaker is open for a service."
      },
      "src.services.aggregators.app.__init__": {
        "name": "src.services.aggregators.app.__init__",
        "type": "module",
        "service": "src",
        "file_path": "src/services/aggregators/app/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.feedback_collector.app.__init__": {
        "name": "src.services.feedback_collector.app.__init__",
        "type": "module",
        "service": "src",
        "file_path": "src/services/feedback_collector/app/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.feedback_collector.app.feedback_collector": {
        "name": "src.services.feedback_collector.app.feedback_collector",
        "type": "module",
        "service": "src",
        "file_path": "src/services/feedback_collector/app/feedback_collector.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Feedback collection component for the Program Synthesis System."
      },
      "src.services.feedback_collector.app.feedback_collector._sanitize_context": {
        "name": "src.services.feedback_collector.app.feedback_collector._sanitize_context",
        "type": "function",
        "service": "src",
        "file_path": "src/services/feedback_collector/app/feedback_collector.py",
        "parent": "src.services.feedback_collector.app.feedback_collector",
        "dependencies": [],
        "dependents": [
          "src.services.feedback_collector.app.feedback_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Sanitize context data to remove sensitive information."
      },
      "src.services.feedback_collector.app.feedback_collector._categorize_error": {
        "name": "src.services.feedback_collector.app.feedback_collector._categorize_error",
        "type": "function",
        "service": "src",
        "file_path": "src/services/feedback_collector/app/feedback_collector.py",
        "parent": "src.services.feedback_collector.app.feedback_collector",
        "dependencies": [],
        "dependents": [
          "src.services.feedback_collector.app.feedback_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Categorize the type of verification error."
      },
      "src.services.feedback_collector.app.feedback_collector._check_type_violations": {
        "name": "src.services.feedback_collector.app.feedback_collector._check_type_violations",
        "type": "function",
        "service": "src",
        "file_path": "src/services/feedback_collector/app/feedback_collector.py",
        "parent": "src.services.feedback_collector.app.feedback_collector",
        "dependencies": [],
        "dependents": [
          "src.services.feedback_collector.app.feedback_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Check for type-related violations in counterexamples."
      },
      "src.services.feedback_collector.app.feedback_collector._extract_common_values": {
        "name": "src.services.feedback_collector.app.feedback_collector._extract_common_values",
        "type": "function",
        "service": "src",
        "file_path": "src/services/feedback_collector/app/feedback_collector.py",
        "parent": "src.services.feedback_collector.app.feedback_collector",
        "dependencies": [],
        "dependents": [
          "src.services.feedback_collector.app.feedback_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Extract common values from counterexamples that might indicate patterns."
      },
      "src.services.feedback_collector.app.feedback_collector._is_negative_feedback": {
        "name": "src.services.feedback_collector.app.feedback_collector._is_negative_feedback",
        "type": "function",
        "service": "src",
        "file_path": "src/services/feedback_collector/app/feedback_collector.py",
        "parent": "src.services.feedback_collector.app.feedback_collector",
        "dependencies": [],
        "dependents": [
          "src.services.feedback_collector.app.feedback_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Determine if user feedback is negative."
      },
      "src.services.feedback_collector.app.feedback_collector._check_boundary_violations": {
        "name": "src.services.feedback_collector.app.feedback_collector._check_boundary_violations",
        "type": "function",
        "service": "src",
        "file_path": "src/services/feedback_collector/app/feedback_collector.py",
        "parent": "src.services.feedback_collector.app.feedback_collector",
        "dependencies": [],
        "dependents": [
          "src.services.feedback_collector.app.feedback_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Check for boundary condition violations in counterexamples."
      },
      "src.services.feedback_collector.app.feedback_collector._extract_error_patterns": {
        "name": "src.services.feedback_collector.app.feedback_collector._extract_error_patterns",
        "type": "function",
        "service": "src",
        "file_path": "src/services/feedback_collector/app/feedback_collector.py",
        "parent": "src.services.feedback_collector.app.feedback_collector",
        "dependencies": [],
        "dependents": [
          "src.services.feedback_collector.app.feedback_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Extract patterns from verification failures."
      },
      "src.services.feedback_collector.app.feedback_collector._get_memory_usage": {
        "name": "src.services.feedback_collector.app.feedback_collector._get_memory_usage",
        "type": "function",
        "service": "src",
        "file_path": "src/services/feedback_collector/app/feedback_collector.py",
        "parent": "src.services.feedback_collector.app.feedback_collector",
        "dependencies": [],
        "dependents": [
          "src.services.feedback_collector.app.feedback_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get the current memory usage."
      },
      "src.services.feedback_collector.app.feedback_collector._get_system_load": {
        "name": "src.services.feedback_collector.app.feedback_collector._get_system_load",
        "type": "function",
        "service": "src",
        "file_path": "src/services/feedback_collector/app/feedback_collector.py",
        "parent": "src.services.feedback_collector.app.feedback_collector",
        "dependencies": [],
        "dependents": [
          "src.services.feedback_collector.app.feedback_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get the current system load average."
      },
      "src.services.feedback_collector.app.feedback_collector.get_feedback_statistics": {
        "name": "src.services.feedback_collector.app.feedback_collector.get_feedback_statistics",
        "type": "function",
        "service": "src",
        "file_path": "src/services/feedback_collector/app/feedback_collector.py",
        "parent": "src.services.feedback_collector.app.feedback_collector",
        "dependencies": [],
        "dependents": [
          "src.services.feedback_collector.app.feedback_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get statistics on collected feedback data."
      },
      "src.services.feedback_collector.app.feedback_collector.FeedbackCollector": {
        "name": "src.services.feedback_collector.app.feedback_collector.FeedbackCollector",
        "type": "class",
        "service": "src",
        "file_path": "src/services/feedback_collector/app/feedback_collector.py",
        "parent": "src.services.feedback_collector.app.feedback_collector",
        "dependencies": [],
        "dependents": [
          "src.services.feedback_collector.app.feedback_collector"
        ],
        "methods": [
          "__init__",
          "_initialize_storage",
          "record_success",
          "record_failure",
          "record_user_feedback",
          "export_feedback_for_training",
          "_store_feedback",
          "_maybe_compress_old_data",
          "_load_feedback_data",
          "_analyze_negative_feedback",
          "_analyze_failure_patterns",
          "_schedule_pattern_analysis"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Collects and analyzes feedback from synthesis processes."
      },
      "src.services.feedback_collector.app.feedback_collector.__init__": {
        "name": "src.services.feedback_collector.app.feedback_collector.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/feedback_collector/app/feedback_collector.py",
        "parent": "src.services.feedback_collector.app.feedback_collector",
        "dependencies": [],
        "dependents": [
          "src.services.feedback_collector.app.feedback_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the feedback collector with storage and analysis options."
      },
      "src.services.feedback_collector.app.feedback_collector._initialize_storage": {
        "name": "src.services.feedback_collector.app.feedback_collector._initialize_storage",
        "type": "function",
        "service": "src",
        "file_path": "src/services/feedback_collector/app/feedback_collector.py",
        "parent": "src.services.feedback_collector.app.feedback_collector",
        "dependencies": [],
        "dependents": [
          "src.services.feedback_collector.app.feedback_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the feedback storage system."
      },
      "src.services.feedback_collector.app.feedback_collector.record_success": {
        "name": "src.services.feedback_collector.app.feedback_collector.record_success",
        "type": "function",
        "service": "src",
        "file_path": "src/services/feedback_collector/app/feedback_collector.py",
        "parent": "src.services.feedback_collector.app.feedback_collector",
        "dependencies": [],
        "dependents": [
          "src.services.feedback_collector.app.feedback_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Record successful synthesis information for future learning."
      },
      "src.services.feedback_collector.app.feedback_collector.record_failure": {
        "name": "src.services.feedback_collector.app.feedback_collector.record_failure",
        "type": "function",
        "service": "src",
        "file_path": "src/services/feedback_collector/app/feedback_collector.py",
        "parent": "src.services.feedback_collector.app.feedback_collector",
        "dependencies": [],
        "dependents": [
          "src.services.feedback_collector.app.feedback_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Record failure information for analysis and improvement."
      },
      "src.services.feedback_collector.app.feedback_collector.record_user_feedback": {
        "name": "src.services.feedback_collector.app.feedback_collector.record_user_feedback",
        "type": "function",
        "service": "src",
        "file_path": "src/services/feedback_collector/app/feedback_collector.py",
        "parent": "src.services.feedback_collector.app.feedback_collector",
        "dependencies": [],
        "dependents": [
          "src.services.feedback_collector.app.feedback_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Record feedback from end-users about synthesis results."
      },
      "src.services.feedback_collector.app.feedback_collector.export_feedback_for_training": {
        "name": "src.services.feedback_collector.app.feedback_collector.export_feedback_for_training",
        "type": "function",
        "service": "src",
        "file_path": "src/services/feedback_collector/app/feedback_collector.py",
        "parent": "src.services.feedback_collector.app.feedback_collector",
        "dependencies": [],
        "dependents": [
          "src.services.feedback_collector.app.feedback_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Export feedback data in a format suitable for model training."
      },
      "src.services.feedback_collector.app.feedback_collector._store_feedback": {
        "name": "src.services.feedback_collector.app.feedback_collector._store_feedback",
        "type": "function",
        "service": "src",
        "file_path": "src/services/feedback_collector/app/feedback_collector.py",
        "parent": "src.services.feedback_collector.app.feedback_collector",
        "dependencies": [],
        "dependents": [
          "src.services.feedback_collector.app.feedback_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Store feedback data in the appropriate storage."
      },
      "src.services.feedback_collector.app.feedback_collector._maybe_compress_old_data": {
        "name": "src.services.feedback_collector.app.feedback_collector._maybe_compress_old_data",
        "type": "function",
        "service": "src",
        "file_path": "src/services/feedback_collector/app/feedback_collector.py",
        "parent": "src.services.feedback_collector.app.feedback_collector",
        "dependencies": [],
        "dependents": [
          "src.services.feedback_collector.app.feedback_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Check if we need to compress old feedback data and do so if needed."
      },
      "src.services.feedback_collector.app.feedback_collector._load_feedback_data": {
        "name": "src.services.feedback_collector.app.feedback_collector._load_feedback_data",
        "type": "function",
        "service": "src",
        "file_path": "src/services/feedback_collector/app/feedback_collector.py",
        "parent": "src.services.feedback_collector.app.feedback_collector",
        "dependencies": [],
        "dependents": [
          "src.services.feedback_collector.app.feedback_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Load feedback data of the specified type."
      },
      "src.services.feedback_collector.app.feedback_collector._analyze_negative_feedback": {
        "name": "src.services.feedback_collector.app.feedback_collector._analyze_negative_feedback",
        "type": "function",
        "service": "src",
        "file_path": "src/services/feedback_collector/app/feedback_collector.py",
        "parent": "src.services.feedback_collector.app.feedback_collector",
        "dependencies": [],
        "dependents": [
          "src.services.feedback_collector.app.feedback_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Analyze negative user feedback for insights."
      },
      "src.services.feedback_collector.app.feedback_collector._analyze_failure_patterns": {
        "name": "src.services.feedback_collector.app.feedback_collector._analyze_failure_patterns",
        "type": "function",
        "service": "src",
        "file_path": "src/services/feedback_collector/app/feedback_collector.py",
        "parent": "src.services.feedback_collector.app.feedback_collector",
        "dependencies": [],
        "dependents": [
          "src.services.feedback_collector.app.feedback_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Analyze failure patterns for insights."
      },
      "src.services.feedback_collector.app.feedback_collector._schedule_pattern_analysis": {
        "name": "src.services.feedback_collector.app.feedback_collector._schedule_pattern_analysis",
        "type": "function",
        "service": "src",
        "file_path": "src/services/feedback_collector/app/feedback_collector.py",
        "parent": "src.services.feedback_collector.app.feedback_collector",
        "dependencies": [],
        "dependents": [
          "src.services.feedback_collector.app.feedback_collector"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Schedule an asynchronous pattern analysis."
      },
      "src.services.llm_volume.training_data.__init__": {
        "name": "src.services.llm_volume.training_data.__init__",
        "type": "module",
        "service": "src",
        "file_path": "src/services/llm_volume/training_data/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.llm_volume.specs.__init__": {
        "name": "src.services.llm_volume.specs.__init__",
        "type": "module",
        "service": "src",
        "file_path": "src/services/llm_volume/specs/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.llm_volume.examples.__init__": {
        "name": "src.services.llm_volume.examples.__init__",
        "type": "module",
        "service": "src",
        "file_path": "src/services/llm_volume/examples/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.project_manager.app.__init__": {
        "name": "src.services.project_manager.app.__init__",
        "type": "module",
        "service": "src",
        "file_path": "src/services/project_manager/app/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.services.project_manager.app.project_manager": {
        "name": "src.services.project_manager.app.project_manager",
        "type": "module",
        "service": "src",
        "file_path": "src/services/project_manager/app/project_manager.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Project Manager - Manages projects and their associated spec sheets"
      },
      "src.services.project_manager.app.project_manager.ProjectManager": {
        "name": "src.services.project_manager.app.project_manager.ProjectManager",
        "type": "class",
        "service": "src",
        "file_path": "src/services/project_manager/app/project_manager.py",
        "parent": "src.services.project_manager.app.project_manager",
        "dependencies": [],
        "dependents": [
          "src.services.project_manager.app.project_manager"
        ],
        "methods": [
          "__init__",
          "_has_api_requirements",
          "_has_database_requirements",
          "_has_auth_requirements",
          "_has_microservice_requirements",
          "_has_event_driven_requirements",
          "_has_requirements_with_keywords",
          "_get_requirement_ids_by_keyword",
          "_estimate_api_endpoint_count",
          "_estimate_model_count",
          "_estimate_page_count",
          "_estimate_component_count",
          "_estimate_event_count",
          "_determine_database_type",
          "_determine_database_provider",
          "_determine_auth_type",
          "_determine_auth_provider",
          "_determine_styling_framework",
          "_determine_cloud_provider",
          "_recommend_technology_stack"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Manages projects and their associated spec sheets."
      },
      "src.services.project_manager.app.project_manager.__init__": {
        "name": "src.services.project_manager.app.project_manager.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/services/project_manager/app/project_manager.py",
        "parent": "src.services.project_manager.app.project_manager",
        "dependencies": [],
        "dependents": [
          "src.services.project_manager.app.project_manager"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the project manager."
      },
      "src.services.project_manager.app.project_manager._has_api_requirements": {
        "name": "src.services.project_manager.app.project_manager._has_api_requirements",
        "type": "function",
        "service": "src",
        "file_path": "src/services/project_manager/app/project_manager.py",
        "parent": "src.services.project_manager.app.project_manager",
        "dependencies": [],
        "dependents": [
          "src.services.project_manager.app.project_manager"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Check if the project has API requirements."
      },
      "src.services.project_manager.app.project_manager._has_database_requirements": {
        "name": "src.services.project_manager.app.project_manager._has_database_requirements",
        "type": "function",
        "service": "src",
        "file_path": "src/services/project_manager/app/project_manager.py",
        "parent": "src.services.project_manager.app.project_manager",
        "dependencies": [],
        "dependents": [
          "src.services.project_manager.app.project_manager"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Check if the project has database requirements."
      },
      "src.services.project_manager.app.project_manager._has_auth_requirements": {
        "name": "src.services.project_manager.app.project_manager._has_auth_requirements",
        "type": "function",
        "service": "src",
        "file_path": "src/services/project_manager/app/project_manager.py",
        "parent": "src.services.project_manager.app.project_manager",
        "dependencies": [],
        "dependents": [
          "src.services.project_manager.app.project_manager"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Check if the project has authentication requirements."
      },
      "src.services.project_manager.app.project_manager._has_microservice_requirements": {
        "name": "src.services.project_manager.app.project_manager._has_microservice_requirements",
        "type": "function",
        "service": "src",
        "file_path": "src/services/project_manager/app/project_manager.py",
        "parent": "src.services.project_manager.app.project_manager",
        "dependencies": [],
        "dependents": [
          "src.services.project_manager.app.project_manager"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Check if the project has microservice requirements."
      },
      "src.services.project_manager.app.project_manager._has_event_driven_requirements": {
        "name": "src.services.project_manager.app.project_manager._has_event_driven_requirements",
        "type": "function",
        "service": "src",
        "file_path": "src/services/project_manager/app/project_manager.py",
        "parent": "src.services.project_manager.app.project_manager",
        "dependencies": [],
        "dependents": [
          "src.services.project_manager.app.project_manager"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Check if the project has event-driven requirements."
      },
      "src.services.project_manager.app.project_manager._has_requirements_with_keywords": {
        "name": "src.services.project_manager.app.project_manager._has_requirements_with_keywords",
        "type": "function",
        "service": "src",
        "file_path": "src/services/project_manager/app/project_manager.py",
        "parent": "src.services.project_manager.app.project_manager",
        "dependencies": [],
        "dependents": [
          "src.services.project_manager.app.project_manager"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Check if project has requirements matching any of the keywords."
      },
      "src.services.project_manager.app.project_manager._get_requirement_ids_by_keyword": {
        "name": "src.services.project_manager.app.project_manager._get_requirement_ids_by_keyword",
        "type": "function",
        "service": "src",
        "file_path": "src/services/project_manager/app/project_manager.py",
        "parent": "src.services.project_manager.app.project_manager",
        "dependencies": [],
        "dependents": [
          "src.services.project_manager.app.project_manager"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get IDs of requirements matching any of the keywords."
      },
      "src.services.project_manager.app.project_manager._estimate_api_endpoint_count": {
        "name": "src.services.project_manager.app.project_manager._estimate_api_endpoint_count",
        "type": "function",
        "service": "src",
        "file_path": "src/services/project_manager/app/project_manager.py",
        "parent": "src.services.project_manager.app.project_manager",
        "dependencies": [],
        "dependents": [
          "src.services.project_manager.app.project_manager"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Estimate the number of API endpoints needed."
      },
      "src.services.project_manager.app.project_manager._estimate_model_count": {
        "name": "src.services.project_manager.app.project_manager._estimate_model_count",
        "type": "function",
        "service": "src",
        "file_path": "src/services/project_manager/app/project_manager.py",
        "parent": "src.services.project_manager.app.project_manager",
        "dependencies": [],
        "dependents": [
          "src.services.project_manager.app.project_manager"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Estimate the number of database models needed."
      },
      "src.services.project_manager.app.project_manager._estimate_page_count": {
        "name": "src.services.project_manager.app.project_manager._estimate_page_count",
        "type": "function",
        "service": "src",
        "file_path": "src/services/project_manager/app/project_manager.py",
        "parent": "src.services.project_manager.app.project_manager",
        "dependencies": [],
        "dependents": [
          "src.services.project_manager.app.project_manager"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Estimate the number of UI pages needed."
      },
      "src.services.project_manager.app.project_manager._estimate_component_count": {
        "name": "src.services.project_manager.app.project_manager._estimate_component_count",
        "type": "function",
        "service": "src",
        "file_path": "src/services/project_manager/app/project_manager.py",
        "parent": "src.services.project_manager.app.project_manager",
        "dependencies": [],
        "dependents": [
          "src.services.project_manager.app.project_manager"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Estimate the number of UI services needed."
      },
      "src.services.project_manager.app.project_manager._estimate_event_count": {
        "name": "src.services.project_manager.app.project_manager._estimate_event_count",
        "type": "function",
        "service": "src",
        "file_path": "src/services/project_manager/app/project_manager.py",
        "parent": "src.services.project_manager.app.project_manager",
        "dependencies": [],
        "dependents": [
          "src.services.project_manager.app.project_manager"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Estimate the number of events needed."
      },
      "src.services.project_manager.app.project_manager._determine_database_type": {
        "name": "src.services.project_manager.app.project_manager._determine_database_type",
        "type": "function",
        "service": "src",
        "file_path": "src/services/project_manager/app/project_manager.py",
        "parent": "src.services.project_manager.app.project_manager",
        "dependencies": [],
        "dependents": [
          "src.services.project_manager.app.project_manager"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Determine the type of database needed."
      },
      "src.services.project_manager.app.project_manager._determine_database_provider": {
        "name": "src.services.project_manager.app.project_manager._determine_database_provider",
        "type": "function",
        "service": "src",
        "file_path": "src/services/project_manager/app/project_manager.py",
        "parent": "src.services.project_manager.app.project_manager",
        "dependencies": [],
        "dependents": [
          "src.services.project_manager.app.project_manager"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Determine the database provider if specified."
      },
      "src.services.project_manager.app.project_manager._determine_auth_type": {
        "name": "src.services.project_manager.app.project_manager._determine_auth_type",
        "type": "function",
        "service": "src",
        "file_path": "src/services/project_manager/app/project_manager.py",
        "parent": "src.services.project_manager.app.project_manager",
        "dependencies": [],
        "dependents": [
          "src.services.project_manager.app.project_manager"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Determine the authentication type needed."
      },
      "src.services.project_manager.app.project_manager._determine_auth_provider": {
        "name": "src.services.project_manager.app.project_manager._determine_auth_provider",
        "type": "function",
        "service": "src",
        "file_path": "src/services/project_manager/app/project_manager.py",
        "parent": "src.services.project_manager.app.project_manager",
        "dependencies": [],
        "dependents": [
          "src.services.project_manager.app.project_manager"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Determine the auth provider if specified."
      },
      "src.services.project_manager.app.project_manager._determine_styling_framework": {
        "name": "src.services.project_manager.app.project_manager._determine_styling_framework",
        "type": "function",
        "service": "src",
        "file_path": "src/services/project_manager/app/project_manager.py",
        "parent": "src.services.project_manager.app.project_manager",
        "dependencies": [],
        "dependents": [
          "src.services.project_manager.app.project_manager"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Determine the styling framework if specified."
      },
      "src.services.project_manager.app.project_manager._determine_cloud_provider": {
        "name": "src.services.project_manager.app.project_manager._determine_cloud_provider",
        "type": "function",
        "service": "src",
        "file_path": "src/services/project_manager/app/project_manager.py",
        "parent": "src.services.project_manager.app.project_manager",
        "dependencies": [],
        "dependents": [
          "src.services.project_manager.app.project_manager"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Determine the cloud provider if specified."
      },
      "src.services.project_manager.app.project_manager._recommend_technology_stack": {
        "name": "src.services.project_manager.app.project_manager._recommend_technology_stack",
        "type": "function",
        "service": "src",
        "file_path": "src/services/project_manager/app/project_manager.py",
        "parent": "src.services.project_manager.app.project_manager",
        "dependencies": [],
        "dependents": [
          "src.services.project_manager.app.project_manager"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Recommend a technology stack based on requirements."
      },
      "src.pulsar.app.config": {
        "name": "src.pulsar.app.config",
        "type": "module",
        "service": "src",
        "file_path": "src/pulsar/app/config.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Pulsar Configuration Module"
      },
      "src.pulsar.app.config.PulsarAuthConfig": {
        "name": "src.pulsar.app.config.PulsarAuthConfig",
        "type": "class",
        "service": "src",
        "file_path": "src/pulsar/app/config.py",
        "parent": "src.pulsar.app.config",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.config"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Pulsar authentication configuration."
      },
      "src.pulsar.app.config.PulsarTopicConfig": {
        "name": "src.pulsar.app.config.PulsarTopicConfig",
        "type": "class",
        "service": "src",
        "file_path": "src/pulsar/app/config.py",
        "parent": "src.pulsar.app.config",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.config"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Configuration for a single Pulsar topic."
      },
      "src.pulsar.app.config.PulsarConfig": {
        "name": "src.pulsar.app.config.PulsarConfig",
        "type": "class",
        "service": "src",
        "file_path": "src/pulsar/app/config.py",
        "parent": "src.pulsar.app.config",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.config"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Pulsar client and topic configuration."
      },
      "src.pulsar.app.config.PulsarConfigManager": {
        "name": "src.pulsar.app.config.PulsarConfigManager",
        "type": "class",
        "service": "src",
        "file_path": "src/pulsar/app/config.py",
        "parent": "src.pulsar.app.config",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.config"
        ],
        "methods": [
          "__init__",
          "load",
          "get_client_config",
          "get_auth_params",
          "get_consumer_topics",
          "get_producer_topics"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Manages Pulsar configuration across the application."
      },
      "src.pulsar.app.config.__init__": {
        "name": "src.pulsar.app.config.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/pulsar/app/config.py",
        "parent": "src.pulsar.app.config",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.config"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the Pulsar configuration manager."
      },
      "src.pulsar.app.config.load": {
        "name": "src.pulsar.app.config.load",
        "type": "function",
        "service": "src",
        "file_path": "src/pulsar/app/config.py",
        "parent": "src.pulsar.app.config",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.config"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Load the Pulsar configuration from the YAML file."
      },
      "src.pulsar.app.config.get_client_config": {
        "name": "src.pulsar.app.config.get_client_config",
        "type": "function",
        "service": "src",
        "file_path": "src/pulsar/app/config.py",
        "parent": "src.pulsar.app.config",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.config"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get the Pulsar client configuration parameters."
      },
      "src.pulsar.app.config.get_auth_params": {
        "name": "src.pulsar.app.config.get_auth_params",
        "type": "function",
        "service": "src",
        "file_path": "src/pulsar/app/config.py",
        "parent": "src.pulsar.app.config",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.config"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get authentication parameters based on the configured authentication type."
      },
      "src.pulsar.app.config.get_consumer_topics": {
        "name": "src.pulsar.app.config.get_consumer_topics",
        "type": "function",
        "service": "src",
        "file_path": "src/pulsar/app/config.py",
        "parent": "src.pulsar.app.config",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.config"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get the list of consumer topics."
      },
      "src.pulsar.app.config.get_producer_topics": {
        "name": "src.pulsar.app.config.get_producer_topics",
        "type": "function",
        "service": "src",
        "file_path": "src/pulsar/app/config.py",
        "parent": "src.pulsar.app.config",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.config"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get the list of producer topics."
      },
      "src.pulsar.app.client": {
        "name": "src.pulsar.app.client",
        "type": "module",
        "service": "src",
        "file_path": "src/pulsar/app/client.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Pulsar Event Bus Implementation."
      },
      "src.pulsar.app.client.PulsarEventBus": {
        "name": "src.pulsar.app.client.PulsarEventBus",
        "type": "class",
        "service": "src",
        "file_path": "src/pulsar/app/client.py",
        "parent": "src.pulsar.app.client",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.client"
        ],
        "methods": [
          "__init__",
          "_get_topic_name",
          "subscribe",
          "_start_consumer_loop",
          "_create_event_object"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Apache Pulsar implementation of the EventBus interface."
      },
      "src.pulsar.app.client.__init__": {
        "name": "src.pulsar.app.client.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/pulsar/app/client.py",
        "parent": "src.pulsar.app.client",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.client"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the Pulsar event bus."
      },
      "src.pulsar.app.client._get_topic_name": {
        "name": "src.pulsar.app.client._get_topic_name",
        "type": "function",
        "service": "src",
        "file_path": "src/pulsar/app/client.py",
        "parent": "src.pulsar.app.client",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.client"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Convert event type to a fully qualified Pulsar topic name."
      },
      "src.pulsar.app.client.subscribe": {
        "name": "src.pulsar.app.client.subscribe",
        "type": "function",
        "service": "src",
        "file_path": "src/pulsar/app/client.py",
        "parent": "src.pulsar.app.client",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.client"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Subscribe to events from specified topics."
      },
      "src.pulsar.app.client._start_consumer_loop": {
        "name": "src.pulsar.app.client._start_consumer_loop",
        "type": "function",
        "service": "src",
        "file_path": "src/pulsar/app/client.py",
        "parent": "src.pulsar.app.client",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.client"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Start a background task to continuously receive messages."
      },
      "src.pulsar.app.client._create_event_object": {
        "name": "src.pulsar.app.client._create_event_object",
        "type": "function",
        "service": "src",
        "file_path": "src/pulsar/app/client.py",
        "parent": "src.pulsar.app.client",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.client"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Create an event object with the expected interface."
      },
      "src.pulsar.app.__init__": {
        "name": "src.pulsar.app.__init__",
        "type": "module",
        "service": "src",
        "file_path": "src/pulsar/app/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.pulsar.app.NEEDS_FIXED": {
        "name": "src.pulsar.app.NEEDS_FIXED",
        "type": "module",
        "service": "src",
        "file_path": "src/pulsar/app/NEEDS_FIXED.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.pulsar.app.NEEDS_FIXED.load_config": {
        "name": "src.pulsar.app.NEEDS_FIXED.load_config",
        "type": "function",
        "service": "src",
        "file_path": "src/pulsar/app/NEEDS_FIXED.py",
        "parent": "src.pulsar.app.NEEDS_FIXED",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.NEEDS_FIXED"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.pulsar.app.NEEDS_FIXED.AppState": {
        "name": "src.pulsar.app.NEEDS_FIXED.AppState",
        "type": "class",
        "service": "src",
        "file_path": "src/pulsar/app/NEEDS_FIXED.py",
        "parent": "src.pulsar.app.NEEDS_FIXED",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.NEEDS_FIXED"
        ],
        "methods": [
          "__init__"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.pulsar.app.NEEDS_FIXED.__init__": {
        "name": "src.pulsar.app.NEEDS_FIXED.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/pulsar/app/NEEDS_FIXED.py",
        "parent": "src.pulsar.app.NEEDS_FIXED",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.NEEDS_FIXED"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.pulsar.app.analytics.evolution": {
        "name": "src.pulsar.app.analytics.evolution",
        "type": "module",
        "service": "src",
        "file_path": "src/pulsar/app/analytics/evolution.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.pulsar.app.analytics.evolution.EvolutionSuggestionType": {
        "name": "src.pulsar.app.analytics.evolution.EvolutionSuggestionType",
        "type": "class",
        "service": "src",
        "file_path": "src/pulsar/app/analytics/evolution.py",
        "parent": "src.pulsar.app.analytics.evolution",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.analytics.evolution"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Types of spec sheet definition evolution suggestions"
      },
      "src.pulsar.app.analytics.evolution.EvolutionSuggestion": {
        "name": "src.pulsar.app.analytics.evolution.EvolutionSuggestion",
        "type": "class",
        "service": "src",
        "file_path": "src/pulsar/app/analytics/evolution.py",
        "parent": "src.pulsar.app.analytics.evolution",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.analytics.evolution"
        ],
        "methods": [
          "to_dict",
          "to_json",
          "from_dict",
          "from_json"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "A suggestion for evolving a spec sheet definition"
      },
      "src.pulsar.app.analytics.evolution.FieldEvolutionData": {
        "name": "src.pulsar.app.analytics.evolution.FieldEvolutionData",
        "type": "class",
        "service": "src",
        "file_path": "src/pulsar/app/analytics/evolution.py",
        "parent": "src.pulsar.app.analytics.evolution",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.analytics.evolution"
        ],
        "methods": [
          "to_dict",
          "from_dict"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Evolution data for a field"
      },
      "src.pulsar.app.analytics.evolution.SectionEvolutionData": {
        "name": "src.pulsar.app.analytics.evolution.SectionEvolutionData",
        "type": "class",
        "service": "src",
        "file_path": "src/pulsar/app/analytics/evolution.py",
        "parent": "src.pulsar.app.analytics.evolution",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.analytics.evolution"
        ],
        "methods": [
          "to_dict",
          "from_dict"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Evolution data for a section"
      },
      "src.pulsar.app.analytics.evolution.SpecSheetDefinitionEvolutionAnalysis": {
        "name": "src.pulsar.app.analytics.evolution.SpecSheetDefinitionEvolutionAnalysis",
        "type": "class",
        "service": "src",
        "file_path": "src/pulsar/app/analytics/evolution.py",
        "parent": "src.pulsar.app.analytics.evolution",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.analytics.evolution"
        ],
        "methods": [
          "to_dict",
          "to_json",
          "from_dict",
          "from_json"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Comprehensive evolution analysis for a spec sheet definition"
      },
      "src.pulsar.app.analytics.evolution.to_dict": {
        "name": "src.pulsar.app.analytics.evolution.to_dict",
        "type": "function",
        "service": "src",
        "file_path": "src/pulsar/app/analytics/evolution.py",
        "parent": "src.pulsar.app.analytics.evolution",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.analytics.evolution",
          "src.pulsar.app.analytics.evolution",
          "src.pulsar.app.analytics.evolution",
          "src.pulsar.app.analytics.evolution"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Convert to dictionary"
      },
      "src.pulsar.app.analytics.evolution.to_json": {
        "name": "src.pulsar.app.analytics.evolution.to_json",
        "type": "function",
        "service": "src",
        "file_path": "src/pulsar/app/analytics/evolution.py",
        "parent": "src.pulsar.app.analytics.evolution",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.analytics.evolution",
          "src.pulsar.app.analytics.evolution"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Convert to JSON string"
      },
      "src.pulsar.app.analytics.evolution.from_dict": {
        "name": "src.pulsar.app.analytics.evolution.from_dict",
        "type": "function",
        "service": "src",
        "file_path": "src/pulsar/app/analytics/evolution.py",
        "parent": "src.pulsar.app.analytics.evolution",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.analytics.evolution",
          "src.pulsar.app.analytics.evolution",
          "src.pulsar.app.analytics.evolution",
          "src.pulsar.app.analytics.evolution"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Create from dictionary"
      },
      "src.pulsar.app.analytics.evolution.from_json": {
        "name": "src.pulsar.app.analytics.evolution.from_json",
        "type": "function",
        "service": "src",
        "file_path": "src/pulsar/app/analytics/evolution.py",
        "parent": "src.pulsar.app.analytics.evolution",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.analytics.evolution",
          "src.pulsar.app.analytics.evolution"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Create from JSON string"
      },
      "src.pulsar.app.analytics.__init__": {
        "name": "src.pulsar.app.analytics.__init__",
        "type": "module",
        "service": "src",
        "file_path": "src/pulsar/app/analytics/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.pulsar.app.analytics.usage": {
        "name": "src.pulsar.app.analytics.usage",
        "type": "module",
        "service": "src",
        "file_path": "src/pulsar/app/analytics/usage.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Spec Sheet Definition Registry - Usage Analytics Models"
      },
      "src.pulsar.app.analytics.usage.FieldUsageStats": {
        "name": "src.pulsar.app.analytics.usage.FieldUsageStats",
        "type": "class",
        "service": "src",
        "file_path": "src/pulsar/app/analytics/usage.py",
        "parent": "src.pulsar.app.analytics.usage",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.analytics.usage"
        ],
        "methods": [
          "to_dict",
          "from_dict"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Usage statistics for a field"
      },
      "src.pulsar.app.analytics.usage.SectionUsageStats": {
        "name": "src.pulsar.app.analytics.usage.SectionUsageStats",
        "type": "class",
        "service": "src",
        "file_path": "src/pulsar/app/analytics/usage.py",
        "parent": "src.pulsar.app.analytics.usage",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.analytics.usage"
        ],
        "methods": [
          "to_dict",
          "from_dict"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Usage statistics for a section"
      },
      "src.pulsar.app.analytics.usage.CompletionPathStats": {
        "name": "src.pulsar.app.analytics.usage.CompletionPathStats",
        "type": "class",
        "service": "src",
        "file_path": "src/pulsar/app/analytics/usage.py",
        "parent": "src.pulsar.app.analytics.usage",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.analytics.usage"
        ],
        "methods": [
          "to_dict",
          "from_dict"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Statistics about the path users take to complete a spec sheet definition"
      },
      "src.pulsar.app.analytics.usage.SpecSheetDefinitionUsageAnalytics": {
        "name": "src.pulsar.app.analytics.usage.SpecSheetDefinitionUsageAnalytics",
        "type": "class",
        "service": "src",
        "file_path": "src/pulsar/app/analytics/usage.py",
        "parent": "src.pulsar.app.analytics.usage",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.analytics.usage"
        ],
        "methods": [
          "to_dict",
          "to_json",
          "from_dict",
          "from_json"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Comprehensive usage analytics for a spec sheet definition"
      },
      "src.pulsar.app.analytics.usage.to_dict": {
        "name": "src.pulsar.app.analytics.usage.to_dict",
        "type": "function",
        "service": "src",
        "file_path": "src/pulsar/app/analytics/usage.py",
        "parent": "src.pulsar.app.analytics.usage",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.analytics.usage",
          "src.pulsar.app.analytics.usage",
          "src.pulsar.app.analytics.usage",
          "src.pulsar.app.analytics.usage"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Convert to dictionary"
      },
      "src.pulsar.app.analytics.usage.from_dict": {
        "name": "src.pulsar.app.analytics.usage.from_dict",
        "type": "function",
        "service": "src",
        "file_path": "src/pulsar/app/analytics/usage.py",
        "parent": "src.pulsar.app.analytics.usage",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.analytics.usage",
          "src.pulsar.app.analytics.usage",
          "src.pulsar.app.analytics.usage",
          "src.pulsar.app.analytics.usage"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Create from dictionary"
      },
      "src.pulsar.app.analytics.usage.to_json": {
        "name": "src.pulsar.app.analytics.usage.to_json",
        "type": "function",
        "service": "src",
        "file_path": "src/pulsar/app/analytics/usage.py",
        "parent": "src.pulsar.app.analytics.usage",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.analytics.usage"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Convert to JSON string"
      },
      "src.pulsar.app.analytics.usage.from_json": {
        "name": "src.pulsar.app.analytics.usage.from_json",
        "type": "function",
        "service": "src",
        "file_path": "src/pulsar/app/analytics/usage.py",
        "parent": "src.pulsar.app.analytics.usage",
        "dependencies": [],
        "dependents": [
          "src.pulsar.app.analytics.usage"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Create from JSON string"
      },
      "src.api_gateway.neural_interpretor.__init__": {
        "name": "src.api_gateway.neural_interpretor.__init__",
        "type": "module",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.api_gateway.security.__init__": {
        "name": "src.api_gateway.security.__init__",
        "type": "module",
        "service": "src",
        "file_path": "src/api_gateway/security/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.api_gateway.auth-sidecar.__init__": {
        "name": "src.api_gateway.auth-sidecar.__init__",
        "type": "module",
        "service": "src",
        "file_path": "src/api_gateway/auth-sidecar/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.api_gateway.security.app.hmac_signer": {
        "name": "src.api_gateway.security.app.hmac_signer",
        "type": "module",
        "service": "src",
        "file_path": "src/api_gateway/security/app/hmac_signer.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.api_gateway.security.app.hmac_signer.HmacSigner": {
        "name": "src.api_gateway.security.app.hmac_signer.HmacSigner",
        "type": "class",
        "service": "src",
        "file_path": "src/api_gateway/security/app/hmac_signer.py",
        "parent": "src.api_gateway.security.app.hmac_signer",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.security.app.hmac_signer"
        ],
        "methods": [
          "__init__",
          "sign_request",
          "request"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "HMAC signature generator for API requests to securely authenticate with the API gateway."
      },
      "src.api_gateway.security.app.hmac_signer.__init__": {
        "name": "src.api_gateway.security.app.hmac_signer.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/security/app/hmac_signer.py",
        "parent": "src.api_gateway.security.app.hmac_signer",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.security.app.hmac_signer"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the HMAC signer with credentials."
      },
      "src.api_gateway.security.app.hmac_signer.sign_request": {
        "name": "src.api_gateway.security.app.hmac_signer.sign_request",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/security/app/hmac_signer.py",
        "parent": "src.api_gateway.security.app.hmac_signer",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.security.app.hmac_signer"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Sign an HTTP request with HMAC for Traefik authentication."
      },
      "src.api_gateway.security.app.hmac_signer.request": {
        "name": "src.api_gateway.security.app.hmac_signer.request",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/security/app/hmac_signer.py",
        "parent": "src.api_gateway.security.app.hmac_signer",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.security.app.hmac_signer"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Make a signed HTTP request using the requests library."
      },
      "src.api_gateway.security.app.__init__": {
        "name": "src.api_gateway.security.app.__init__",
        "type": "module",
        "service": "src",
        "file_path": "src/api_gateway/security/app/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.api_gateway.neural_interpretor.app.nueral_interpretor": {
        "name": "src.api_gateway.neural_interpretor.app.nueral_interpretor",
        "type": "module",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/nueral_interpretor.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Neural Interpreter Core - Classifies and broadcasts tasks for agent self-selection"
      },
      "src.api_gateway.neural_interpretor.app.nueral_interpretor.IntentDimension": {
        "name": "src.api_gateway.neural_interpretor.app.nueral_interpretor.IntentDimension",
        "type": "class",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/nueral_interpretor.py",
        "parent": "src.api_gateway.neural_interpretor.app.nueral_interpretor",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Scoring dimensions for the intent classification system"
      },
      "src.api_gateway.neural_interpretor.app.nueral_interpretor.DomainDimension": {
        "name": "src.api_gateway.neural_interpretor.app.nueral_interpretor.DomainDimension",
        "type": "class",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/nueral_interpretor.py",
        "parent": "src.api_gateway.neural_interpretor.app.nueral_interpretor",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Domain classification scores"
      },
      "src.api_gateway.neural_interpretor.app.nueral_interpretor.ComplexityDimension": {
        "name": "src.api_gateway.neural_interpretor.app.nueral_interpretor.ComplexityDimension",
        "type": "class",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/nueral_interpretor.py",
        "parent": "src.api_gateway.neural_interpretor.app.nueral_interpretor",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Task complexity metrics"
      },
      "src.api_gateway.neural_interpretor.app.nueral_interpretor.ActionabilityDimension": {
        "name": "src.api_gateway.neural_interpretor.app.nueral_interpretor.ActionabilityDimension",
        "type": "class",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/nueral_interpretor.py",
        "parent": "src.api_gateway.neural_interpretor.app.nueral_interpretor",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Scores for what actions the task requires"
      },
      "src.api_gateway.neural_interpretor.app.nueral_interpretor.UrgencyDimension": {
        "name": "src.api_gateway.neural_interpretor.app.nueral_interpretor.UrgencyDimension",
        "type": "class",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/nueral_interpretor.py",
        "parent": "src.api_gateway.neural_interpretor.app.nueral_interpretor",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Urgency and importance metrics"
      },
      "src.api_gateway.neural_interpretor.app.nueral_interpretor.SpecificityDimension": {
        "name": "src.api_gateway.neural_interpretor.app.nueral_interpretor.SpecificityDimension",
        "type": "class",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/nueral_interpretor.py",
        "parent": "src.api_gateway.neural_interpretor.app.nueral_interpretor",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "How well-specified the task is"
      },
      "src.api_gateway.neural_interpretor.app.nueral_interpretor.MultimodalityDimension": {
        "name": "src.api_gateway.neural_interpretor.app.nueral_interpretor.MultimodalityDimension",
        "type": "class",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/nueral_interpretor.py",
        "parent": "src.api_gateway.neural_interpretor.app.nueral_interpretor",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Requirements for different modalities"
      },
      "src.api_gateway.neural_interpretor.app.nueral_interpretor.TaskMetadata": {
        "name": "src.api_gateway.neural_interpretor.app.nueral_interpretor.TaskMetadata",
        "type": "class",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/nueral_interpretor.py",
        "parent": "src.api_gateway.neural_interpretor.app.nueral_interpretor",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor"
        ],
        "methods": [
          "to_dict"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Complete metadata for a task, used for agent self-selection"
      },
      "src.api_gateway.neural_interpretor.app.nueral_interpretor.NeuralInterpretor": {
        "name": "src.api_gateway.neural_interpretor.app.nueral_interpretor.NeuralInterpretor",
        "type": "class",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/nueral_interpretor.py",
        "parent": "src.api_gateway.neural_interpretor.app.nueral_interpretor",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor"
        ],
        "methods": [
          "__init__",
          "_simple_token_counter",
          "analyze_task",
          "_analyze_intent",
          "_analyze_domain",
          "_analyze_complexity",
          "_analyze_actionability",
          "_analyze_urgency",
          "_analyze_specificity",
          "_analyze_multimodality",
          "_analyze_workflow_patterns",
          "determine_service_route"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Analyzes tasks to generate rich metadata for agent self-selection"
      },
      "src.api_gateway.neural_interpretor.app.nueral_interpretor.NeuralInterpreter": {
        "name": "src.api_gateway.neural_interpretor.app.nueral_interpretor.NeuralInterpreter",
        "type": "class",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/nueral_interpretor.py",
        "parent": "src.api_gateway.neural_interpretor.app.nueral_interpretor",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor"
        ],
        "methods": [
          "__init__",
          "determine_processing_mode",
          "estimate_processing_time",
          "determine_priority",
          "validate_request"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Core Neural Interpreter that analyzes tasks and publishes them to Pulsar"
      },
      "src.api_gateway.neural_interpretor.app.nueral_interpretor.to_dict": {
        "name": "src.api_gateway.neural_interpretor.app.nueral_interpretor.to_dict",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/nueral_interpretor.py",
        "parent": "src.api_gateway.neural_interpretor.app.nueral_interpretor",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Convert model to a flat dictionary for easier filtering"
      },
      "src.api_gateway.neural_interpretor.app.nueral_interpretor.__init__": {
        "name": "src.api_gateway.neural_interpretor.app.nueral_interpretor.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/nueral_interpretor.py",
        "parent": "src.api_gateway.neural_interpretor.app.nueral_interpretor",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor",
          "src.api_gateway.neural_interpretor.app.nueral_interpretor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the Neural Interpreter"
      },
      "src.api_gateway.neural_interpretor.app.nueral_interpretor._simple_token_counter": {
        "name": "src.api_gateway.neural_interpretor.app.nueral_interpretor._simple_token_counter",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/nueral_interpretor.py",
        "parent": "src.api_gateway.neural_interpretor.app.nueral_interpretor",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Simple token counting approximation"
      },
      "src.api_gateway.neural_interpretor.app.nueral_interpretor.analyze_task": {
        "name": "src.api_gateway.neural_interpretor.app.nueral_interpretor.analyze_task",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/nueral_interpretor.py",
        "parent": "src.api_gateway.neural_interpretor.app.nueral_interpretor",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Analyze a task prompt to generate rich metadata"
      },
      "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_intent": {
        "name": "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_intent",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/nueral_interpretor.py",
        "parent": "src.api_gateway.neural_interpretor.app.nueral_interpretor",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Analyze the intent dimensions of a task"
      },
      "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_domain": {
        "name": "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_domain",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/nueral_interpretor.py",
        "parent": "src.api_gateway.neural_interpretor.app.nueral_interpretor",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Analyze the domain dimensions of a task"
      },
      "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_complexity": {
        "name": "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_complexity",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/nueral_interpretor.py",
        "parent": "src.api_gateway.neural_interpretor.app.nueral_interpretor",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Analyze the complexity dimensions of a task"
      },
      "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_actionability": {
        "name": "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_actionability",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/nueral_interpretor.py",
        "parent": "src.api_gateway.neural_interpretor.app.nueral_interpretor",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Analyze the actionability dimensions of a task"
      },
      "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_urgency": {
        "name": "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_urgency",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/nueral_interpretor.py",
        "parent": "src.api_gateway.neural_interpretor.app.nueral_interpretor",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Analyze the urgency dimensions of a task"
      },
      "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_specificity": {
        "name": "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_specificity",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/nueral_interpretor.py",
        "parent": "src.api_gateway.neural_interpretor.app.nueral_interpretor",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Analyze the specificity dimensions of a task"
      },
      "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_multimodality": {
        "name": "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_multimodality",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/nueral_interpretor.py",
        "parent": "src.api_gateway.neural_interpretor.app.nueral_interpretor",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Analyze the multimodality dimensions of a task"
      },
      "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_workflow_patterns": {
        "name": "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_workflow_patterns",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/nueral_interpretor.py",
        "parent": "src.api_gateway.neural_interpretor.app.nueral_interpretor",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Analyze the text for common workflow patterns"
      },
      "src.api_gateway.neural_interpretor.app.nueral_interpretor.determine_service_route": {
        "name": "src.api_gateway.neural_interpretor.app.nueral_interpretor.determine_service_route",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/nueral_interpretor.py",
        "parent": "src.api_gateway.neural_interpretor.app.nueral_interpretor",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Determine the appropriate service to route this task to"
      },
      "src.api_gateway.neural_interpretor.app.nueral_interpretor.determine_processing_mode": {
        "name": "src.api_gateway.neural_interpretor.app.nueral_interpretor.determine_processing_mode",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/nueral_interpretor.py",
        "parent": "src.api_gateway.neural_interpretor.app.nueral_interpretor",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Determine processing mode based on task metadata"
      },
      "src.api_gateway.neural_interpretor.app.nueral_interpretor.estimate_processing_time": {
        "name": "src.api_gateway.neural_interpretor.app.nueral_interpretor.estimate_processing_time",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/nueral_interpretor.py",
        "parent": "src.api_gateway.neural_interpretor.app.nueral_interpretor",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Estimate task processing time in seconds"
      },
      "src.api_gateway.neural_interpretor.app.nueral_interpretor.determine_priority": {
        "name": "src.api_gateway.neural_interpretor.app.nueral_interpretor.determine_priority",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/nueral_interpretor.py",
        "parent": "src.api_gateway.neural_interpretor.app.nueral_interpretor",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Determine task priority based on metadata"
      },
      "src.api_gateway.neural_interpretor.app.nueral_interpretor.validate_request": {
        "name": "src.api_gateway.neural_interpretor.app.nueral_interpretor.validate_request",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/nueral_interpretor.py",
        "parent": "src.api_gateway.neural_interpretor.app.nueral_interpretor",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.nueral_interpretor"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Validate request parameters"
      },
      "src.api_gateway.neural_interpretor.app.pattern_matcher": {
        "name": "src.api_gateway.neural_interpretor.app.pattern_matcher",
        "type": "module",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/pattern_matcher.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.api_gateway.neural_interpretor.app.pattern_matcher.PatternMatcher": {
        "name": "src.api_gateway.neural_interpretor.app.pattern_matcher.PatternMatcher",
        "type": "class",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/pattern_matcher.py",
        "parent": "src.api_gateway.neural_interpretor.app.pattern_matcher",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.pattern_matcher"
        ],
        "methods": [
          "__init__"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Pattern matcher using Neo4j for storing and matching patterns."
      },
      "src.api_gateway.neural_interpretor.app.pattern_matcher.__init__": {
        "name": "src.api_gateway.neural_interpretor.app.pattern_matcher.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/pattern_matcher.py",
        "parent": "src.api_gateway.neural_interpretor.app.pattern_matcher",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.pattern_matcher"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the pattern matcher with Neo4j connection"
      },
      "src.api_gateway.neural_interpretor.app.code_generation": {
        "name": "src.api_gateway.neural_interpretor.app.code_generation",
        "type": "module",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/code_generation.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.api_gateway.neural_interpretor.app.code_generation.CodeGenRequestType": {
        "name": "src.api_gateway.neural_interpretor.app.code_generation.CodeGenRequestType",
        "type": "class",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/code_generation.py",
        "parent": "src.api_gateway.neural_interpretor.app.code_generation",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.code_generation"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Types of code generation requests"
      },
      "src.api_gateway.neural_interpretor.app.code_generation.ProgrammingLanguage": {
        "name": "src.api_gateway.neural_interpretor.app.code_generation.ProgrammingLanguage",
        "type": "class",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/code_generation.py",
        "parent": "src.api_gateway.neural_interpretor.app.code_generation",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.code_generation"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Supported programming languages"
      },
      "src.api_gateway.neural_interpretor.app.code_generation.CodeGenRequest": {
        "name": "src.api_gateway.neural_interpretor.app.code_generation.CodeGenRequest",
        "type": "class",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/code_generation.py",
        "parent": "src.api_gateway.neural_interpretor.app.code_generation",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.code_generation"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Code generation request object"
      },
      "src.api_gateway.neural_interpretor.app.code_generation.CodeGenRouter": {
        "name": "src.api_gateway.neural_interpretor.app.code_generation.CodeGenRouter",
        "type": "class",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/code_generation.py",
        "parent": "src.api_gateway.neural_interpretor.app.code_generation",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.code_generation"
        ],
        "methods": [
          "__init__",
          "determine_request_type",
          "determine_language",
          "get_topic_for_request"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Routes code generation requests to appropriate topics based on"
      },
      "src.api_gateway.neural_interpretor.app.code_generation.Config": {
        "name": "src.api_gateway.neural_interpretor.app.code_generation.Config",
        "type": "class",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/code_generation.py",
        "parent": "src.api_gateway.neural_interpretor.app.code_generation",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.code_generation"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.api_gateway.neural_interpretor.app.code_generation.__init__": {
        "name": "src.api_gateway.neural_interpretor.app.code_generation.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/code_generation.py",
        "parent": "src.api_gateway.neural_interpretor.app.code_generation",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.code_generation"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize with configuration"
      },
      "src.api_gateway.neural_interpretor.app.code_generation.determine_request_type": {
        "name": "src.api_gateway.neural_interpretor.app.code_generation.determine_request_type",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/code_generation.py",
        "parent": "src.api_gateway.neural_interpretor.app.code_generation",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.code_generation"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Analyze prompt to determine request type"
      },
      "src.api_gateway.neural_interpretor.app.code_generation.determine_language": {
        "name": "src.api_gateway.neural_interpretor.app.code_generation.determine_language",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/code_generation.py",
        "parent": "src.api_gateway.neural_interpretor.app.code_generation",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.code_generation"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Analyze prompt to determine programming language"
      },
      "src.api_gateway.neural_interpretor.app.code_generation.get_topic_for_request": {
        "name": "src.api_gateway.neural_interpretor.app.code_generation.get_topic_for_request",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/code_generation.py",
        "parent": "src.api_gateway.neural_interpretor.app.code_generation",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.code_generation"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Determine the appropriate topic for a request"
      },
      "src.api_gateway.neural_interpretor.app.__init__": {
        "name": "src.api_gateway.neural_interpretor.app.__init__",
        "type": "module",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.api_gateway.neural_interpretor.app.intent_analyzer": {
        "name": "src.api_gateway.neural_interpretor.app.intent_analyzer",
        "type": "module",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/intent_analyzer.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.api_gateway.neural_interpretor.app.intent_analyzer.ProcessingMode": {
        "name": "src.api_gateway.neural_interpretor.app.intent_analyzer.ProcessingMode",
        "type": "class",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/intent_analyzer.py",
        "parent": "src.api_gateway.neural_interpretor.app.intent_analyzer",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.intent_analyzer"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.api_gateway.neural_interpretor.app.intent_analyzer.QueryIntent": {
        "name": "src.api_gateway.neural_interpretor.app.intent_analyzer.QueryIntent",
        "type": "class",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/intent_analyzer.py",
        "parent": "src.api_gateway.neural_interpretor.app.intent_analyzer",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.intent_analyzer"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.api_gateway.neural_interpretor.app.intent_analyzer.IntentAnalyzer": {
        "name": "src.api_gateway.neural_interpretor.app.intent_analyzer.IntentAnalyzer",
        "type": "class",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/intent_analyzer.py",
        "parent": "src.api_gateway.neural_interpretor.app.intent_analyzer",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.intent_analyzer"
        ],
        "methods": [
          "__init__",
          "_count_complexity_keywords",
          "_detect_conversational_markers",
          "_calculate_complexity_score",
          "_estimate_processing_time"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.api_gateway.neural_interpretor.app.intent_analyzer.__init__": {
        "name": "src.api_gateway.neural_interpretor.app.intent_analyzer.__init__",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/intent_analyzer.py",
        "parent": "src.api_gateway.neural_interpretor.app.intent_analyzer",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.intent_analyzer"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "src.api_gateway.neural_interpretor.app.intent_analyzer._count_complexity_keywords": {
        "name": "src.api_gateway.neural_interpretor.app.intent_analyzer._count_complexity_keywords",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/intent_analyzer.py",
        "parent": "src.api_gateway.neural_interpretor.app.intent_analyzer",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.intent_analyzer"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Count words indicating complex reasoning"
      },
      "src.api_gateway.neural_interpretor.app.intent_analyzer._detect_conversational_markers": {
        "name": "src.api_gateway.neural_interpretor.app.intent_analyzer._detect_conversational_markers",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/intent_analyzer.py",
        "parent": "src.api_gateway.neural_interpretor.app.intent_analyzer",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.intent_analyzer"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Detect markers of conversational queries"
      },
      "src.api_gateway.neural_interpretor.app.intent_analyzer._calculate_complexity_score": {
        "name": "src.api_gateway.neural_interpretor.app.intent_analyzer._calculate_complexity_score",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/intent_analyzer.py",
        "parent": "src.api_gateway.neural_interpretor.app.intent_analyzer",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.intent_analyzer"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Calculate query complexity score from signals"
      },
      "src.api_gateway.neural_interpretor.app.intent_analyzer._estimate_processing_time": {
        "name": "src.api_gateway.neural_interpretor.app.intent_analyzer._estimate_processing_time",
        "type": "function",
        "service": "src",
        "file_path": "src/api_gateway/neural_interpretor/app/intent_analyzer.py",
        "parent": "src.api_gateway.neural_interpretor.app.intent_analyzer",
        "dependencies": [],
        "dependents": [
          "src.api_gateway.neural_interpretor.app.intent_analyzer"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Estimate processing time in seconds"
      },
      "tests.unit.__init__": {
        "name": "tests.unit.__init__",
        "type": "module",
        "service": "tests",
        "file_path": "tests/unit/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "tests.integration.__init__": {
        "name": "tests.integration.__init__",
        "type": "module",
        "service": "tests",
        "file_path": "tests/integration/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "tests.performance.__init__": {
        "name": "tests.performance.__init__",
        "type": "module",
        "service": "tests",
        "file_path": "tests/performance/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "bin.cli.__init__": {
        "name": "bin.cli.__init__",
        "type": "module",
        "service": "bin",
        "file_path": "bin/cli/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "bin.cli.synthesize": {
        "name": "bin.cli.synthesize",
        "type": "module",
        "service": "bin",
        "file_path": "bin/cli/synthesize.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Command-line interface for the Program Synthesis System."
      },
      "bin.cli.synthesize.parse_args": {
        "name": "bin.cli.synthesize.parse_args",
        "type": "function",
        "service": "bin",
        "file_path": "bin/cli/synthesize.py",
        "parent": "bin.cli.synthesize",
        "dependencies": [],
        "dependents": [
          "bin.cli.synthesize"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Parse command line arguments."
      },
      "bin.cli.synthesize.main": {
        "name": "bin.cli.synthesize.main",
        "type": "function",
        "service": "bin",
        "file_path": "bin/cli/synthesize.py",
        "parent": "bin.cli.synthesize",
        "dependencies": [],
        "dependents": [
          "bin.cli.synthesize"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Main entry point for the synthesis CLI."
      },
      "bin.cli.standalonewithcli": {
        "name": "bin.cli.standalonewithcli",
        "type": "module",
        "service": "bin",
        "file_path": "bin/cli/standalonewithcli.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Standalone module for the Neural Code Generator."
      },
      "bin.cli.standalonewithcli.parse_args": {
        "name": "bin.cli.standalonewithcli.parse_args",
        "type": "function",
        "service": "bin",
        "file_path": "bin/cli/standalonewithcli.py",
        "parent": "bin.cli.standalonewithcli",
        "dependencies": [],
        "dependents": [
          "bin.cli.standalonewithcli"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Parse command line arguments."
      },
      "bin.cli.standalonewithcli.load_specification": {
        "name": "bin.cli.standalonewithcli.load_specification",
        "type": "function",
        "service": "bin",
        "file_path": "bin/cli/standalonewithcli.py",
        "parent": "bin.cli.standalonewithcli",
        "dependencies": [],
        "dependents": [
          "bin.cli.standalonewithcli"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Load specification from a file or use it directly as a string."
      },
      "bin.cli.standalonewithcli.setup_neural_code_generator": {
        "name": "bin.cli.standalonewithcli.setup_neural_code_generator",
        "type": "function",
        "service": "bin",
        "file_path": "bin/cli/standalonewithcli.py",
        "parent": "bin.cli.standalonewithcli",
        "dependencies": [],
        "dependents": [
          "bin.cli.standalonewithcli"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Set up and configure the neural code generator."
      },
      "bin.cli.standalonewithcli.save_output": {
        "name": "bin.cli.standalonewithcli.save_output",
        "type": "function",
        "service": "bin",
        "file_path": "bin/cli/standalonewithcli.py",
        "parent": "bin.cli.standalonewithcli",
        "dependencies": [],
        "dependents": [
          "bin.cli.standalonewithcli"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Save or print the generation result."
      },
      "bin.cli.standalonewithcli.main": {
        "name": "bin.cli.standalonewithcli.main",
        "type": "function",
        "service": "bin",
        "file_path": "bin/cli/standalonewithcli.py",
        "parent": "bin.cli.standalonewithcli",
        "dependencies": [],
        "dependents": [
          "bin.cli.standalonewithcli"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Main entry point for the standalone module."
      },
      "bin.pulsar.__init__": {
        "name": "bin.pulsar.__init__",
        "type": "module",
        "service": "bin",
        "file_path": "bin/pulsar/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "bin.pulsar.service_module": {
        "name": "bin.pulsar.service_module",
        "type": "module",
        "service": "bin",
        "file_path": "bin/pulsar/service_module.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Service module for the Neural Code Generator."
      },
      "bin.pulsar.service_module.signal_handler": {
        "name": "bin.pulsar.service_module.signal_handler",
        "type": "function",
        "service": "bin",
        "file_path": "bin/pulsar/service_module.py",
        "parent": "bin.pulsar.service_module",
        "dependencies": [],
        "dependents": [
          "bin.pulsar.service_module"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "bin.pulsar.neural_integration": {
        "name": "bin.pulsar.neural_integration",
        "type": "module",
        "service": "bin",
        "file_path": "bin/pulsar/neural_integration.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Integration script for the Neural Code Generator component."
      },
      "bin.pulsar.neural_integration.parse_args": {
        "name": "bin.pulsar.neural_integration.parse_args",
        "type": "function",
        "service": "bin",
        "file_path": "bin/pulsar/neural_integration.py",
        "parent": "bin.pulsar.neural_integration",
        "dependencies": [],
        "dependents": [
          "bin.pulsar.neural_integration"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Parse command line arguments."
      },
      "bin.pulsar.neural_integration.load_configuration": {
        "name": "bin.pulsar.neural_integration.load_configuration",
        "type": "function",
        "service": "bin",
        "file_path": "bin/pulsar/neural_integration.py",
        "parent": "bin.pulsar.neural_integration",
        "dependencies": [],
        "dependents": [
          "bin.pulsar.neural_integration"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Load configuration from a YAML file."
      },
      "bin.pulsar.neural_integration.load_specification": {
        "name": "bin.pulsar.neural_integration.load_specification",
        "type": "function",
        "service": "bin",
        "file_path": "bin/pulsar/neural_integration.py",
        "parent": "bin.pulsar.neural_integration",
        "dependencies": [],
        "dependents": [
          "bin.pulsar.neural_integration"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Load specification from a file or use it directly as a string."
      },
      "bin.pulsar.neural_integration.setup_neural_code_generator": {
        "name": "bin.pulsar.neural_integration.setup_neural_code_generator",
        "type": "function",
        "service": "bin",
        "file_path": "bin/pulsar/neural_integration.py",
        "parent": "bin.pulsar.neural_integration",
        "dependencies": [],
        "dependents": [
          "bin.pulsar.neural_integration"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Set up and configure the neural code generator."
      },
      "bin.pulsar.neural_integration.main": {
        "name": "bin.pulsar.neural_integration.main",
        "type": "function",
        "service": "bin",
        "file_path": "bin/pulsar/neural_integration.py",
        "parent": "bin.pulsar.neural_integration",
        "dependencies": [],
        "dependents": [
          "bin.pulsar.neural_integration"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Main entry point for the integration script."
      },
      "infra.registration.registration": {
        "name": "infra.registration.registration",
        "type": "module",
        "service": "infra",
        "file_path": "infra/registration/registration.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Service Registry for the Program Synthesis System."
      },
      "infra.registration.registration.SingletonMeta": {
        "name": "infra.registration.registration.SingletonMeta",
        "type": "class",
        "service": "infra",
        "file_path": "infra/registration/registration.py",
        "parent": "infra.registration.registration",
        "dependencies": [],
        "dependents": [
          "infra.registration.registration"
        ],
        "methods": [
          "__call__"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Thread-safe implementation of the Singleton pattern using a metaclass."
      },
      "infra.registration.registration.ServiceRegistry": {
        "name": "infra.registration.registration.ServiceRegistry",
        "type": "class",
        "service": "infra",
        "file_path": "infra/registration/registration.py",
        "parent": "infra.registration.registration",
        "dependencies": [],
        "dependents": [
          "infra.registration.registration"
        ],
        "methods": [
          "__init__",
          "_setup_logging",
          "get_service",
          "get_service_with_type",
          "get_services_by_type",
          "get_service_health",
          "get_service_metadata",
          "list_services",
          "run_async"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Registry for microservices implementing the thread-safe Singleton pattern."
      },
      "infra.registration.registration.__call__": {
        "name": "infra.registration.registration.__call__",
        "type": "function",
        "service": "infra",
        "file_path": "infra/registration/registration.py",
        "parent": "infra.registration.registration",
        "dependencies": [],
        "dependents": [
          "infra.registration.registration"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "infra.registration.registration.__init__": {
        "name": "infra.registration.registration.__init__",
        "type": "function",
        "service": "infra",
        "file_path": "infra/registration/registration.py",
        "parent": "infra.registration.registration",
        "dependencies": [],
        "dependents": [
          "infra.registration.registration"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the service registry."
      },
      "infra.registration.registration._setup_logging": {
        "name": "infra.registration.registration._setup_logging",
        "type": "function",
        "service": "infra",
        "file_path": "infra/registration/registration.py",
        "parent": "infra.registration.registration",
        "dependencies": [],
        "dependents": [
          "infra.registration.registration"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Set up logging for the service registry."
      },
      "infra.registration.registration.get_service": {
        "name": "infra.registration.registration.get_service",
        "type": "function",
        "service": "infra",
        "file_path": "infra/registration/registration.py",
        "parent": "infra.registration.registration",
        "dependencies": [],
        "dependents": [
          "infra.registration.registration"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get a service by name with circuit breaker pattern applied."
      },
      "infra.registration.registration.get_service_with_type": {
        "name": "infra.registration.registration.get_service_with_type",
        "type": "function",
        "service": "infra",
        "file_path": "infra/registration/registration.py",
        "parent": "infra.registration.registration",
        "dependencies": [],
        "dependents": [
          "infra.registration.registration"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get a service by name with expected type."
      },
      "infra.registration.registration.get_services_by_type": {
        "name": "infra.registration.registration.get_services_by_type",
        "type": "function",
        "service": "infra",
        "file_path": "infra/registration/registration.py",
        "parent": "infra.registration.registration",
        "dependencies": [],
        "dependents": [
          "infra.registration.registration"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get all services of a specific type."
      },
      "infra.registration.registration.get_service_health": {
        "name": "infra.registration.registration.get_service_health",
        "type": "function",
        "service": "infra",
        "file_path": "infra/registration/registration.py",
        "parent": "infra.registration.registration",
        "dependencies": [],
        "dependents": [
          "infra.registration.registration"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get the current health status of a specific service."
      },
      "infra.registration.registration.get_service_metadata": {
        "name": "infra.registration.registration.get_service_metadata",
        "type": "function",
        "service": "infra",
        "file_path": "infra/registration/registration.py",
        "parent": "infra.registration.registration",
        "dependencies": [],
        "dependents": [
          "infra.registration.registration"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get metadata about a registered service."
      },
      "infra.registration.registration.list_services": {
        "name": "infra.registration.registration.list_services",
        "type": "function",
        "service": "infra",
        "file_path": "infra/registration/registration.py",
        "parent": "infra.registration.registration",
        "dependencies": [],
        "dependents": [
          "infra.registration.registration"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get a list of all registered services with their status."
      },
      "infra.registration.registration.run_async": {
        "name": "infra.registration.registration.run_async",
        "type": "function",
        "service": "infra",
        "file_path": "infra/registration/registration.py",
        "parent": "infra.registration.registration",
        "dependencies": [],
        "dependents": [
          "infra.registration.registration"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Run an asynchronous coroutine in a synchronous context."
      },
      "infra.registration.schema_registry": {
        "name": "infra.registration.schema_registry",
        "type": "module",
        "service": "infra",
        "file_path": "infra/registration/schema_registry.py",
        "parent": null,
        "dependencies": [],
        "dependents": [
          "src.services.shared.pulsar.event_bus",
          "infra.pulsar.event_client"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Avro Schema Registry Client for the Program Synthesis System."
      },
      "infra.registration.schema_registry.SchemaRegistryClient": {
        "name": "infra.registration.schema_registry.SchemaRegistryClient",
        "type": "class",
        "service": "infra",
        "file_path": "infra/registration/schema_registry.py",
        "parent": "infra.registration.schema_registry",
        "dependencies": [],
        "dependents": [
          "infra.registration.schema_registry"
        ],
        "methods": [
          "__init__",
          "register_schema",
          "register_model_schema",
          "get_model_schema_id",
          "get_model_schema_subject",
          "validate_instance_against_schema",
          "get_schema_id",
          "get_schema",
          "validate_event_against_schema"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Client for interacting with an Avro Schema Registry."
      },
      "infra.registration.schema_registry.register_pydantic_model": {
        "name": "infra.registration.schema_registry.register_pydantic_model",
        "type": "function",
        "service": "infra",
        "file_path": "infra/registration/schema_registry.py",
        "parent": "infra.registration.schema_registry",
        "dependencies": [],
        "dependents": [
          "infra.registration.schema_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Register a Pydantic model with the schema registry."
      },
      "infra.registration.schema_registry.convert_pydantic_schema_to_avro": {
        "name": "infra.registration.schema_registry.convert_pydantic_schema_to_avro",
        "type": "function",
        "service": "infra",
        "file_path": "infra/registration/schema_registry.py",
        "parent": "infra.registration.schema_registry",
        "dependencies": [],
        "dependents": [
          "infra.registration.schema_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Convert a Pydantic JSON schema to Avro schema format."
      },
      "infra.registration.schema_registry.map_pydantic_type_to_avro": {
        "name": "infra.registration.schema_registry.map_pydantic_type_to_avro",
        "type": "function",
        "service": "infra",
        "file_path": "infra/registration/schema_registry.py",
        "parent": "infra.registration.schema_registry",
        "dependencies": [],
        "dependents": [
          "infra.registration.schema_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Map Pydantic field types to Avro field types."
      },
      "infra.registration.schema_registry.__init__": {
        "name": "infra.registration.schema_registry.__init__",
        "type": "function",
        "service": "infra",
        "file_path": "infra/registration/schema_registry.py",
        "parent": "infra.registration.schema_registry",
        "dependencies": [],
        "dependents": [
          "infra.registration.schema_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the schema registry client."
      },
      "infra.registration.schema_registry.register_schema": {
        "name": "infra.registration.schema_registry.register_schema",
        "type": "function",
        "service": "infra",
        "file_path": "infra/registration/schema_registry.py",
        "parent": "infra.registration.schema_registry",
        "dependencies": [],
        "dependents": [
          "infra.registration.schema_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Register a schema with the registry."
      },
      "infra.registration.schema_registry.register_model_schema": {
        "name": "infra.registration.schema_registry.register_model_schema",
        "type": "function",
        "service": "infra",
        "file_path": "infra/registration/schema_registry.py",
        "parent": "infra.registration.schema_registry",
        "dependencies": [],
        "dependents": [
          "infra.registration.schema_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Register a model class with the schema registry."
      },
      "infra.registration.schema_registry.get_model_schema_id": {
        "name": "infra.registration.schema_registry.get_model_schema_id",
        "type": "function",
        "service": "infra",
        "file_path": "infra/registration/schema_registry.py",
        "parent": "infra.registration.schema_registry",
        "dependencies": [],
        "dependents": [
          "infra.registration.schema_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get the schema ID for a model class."
      },
      "infra.registration.schema_registry.get_model_schema_subject": {
        "name": "infra.registration.schema_registry.get_model_schema_subject",
        "type": "function",
        "service": "infra",
        "file_path": "infra/registration/schema_registry.py",
        "parent": "infra.registration.schema_registry",
        "dependencies": [],
        "dependents": [
          "infra.registration.schema_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get the schema subject for a model class."
      },
      "infra.registration.schema_registry.validate_instance_against_schema": {
        "name": "infra.registration.schema_registry.validate_instance_against_schema",
        "type": "function",
        "service": "infra",
        "file_path": "infra/registration/schema_registry.py",
        "parent": "infra.registration.schema_registry",
        "dependencies": [],
        "dependents": [
          "infra.registration.schema_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Validate an instance against its schema in the registry."
      },
      "infra.registration.schema_registry.get_schema_id": {
        "name": "infra.registration.schema_registry.get_schema_id",
        "type": "function",
        "service": "infra",
        "file_path": "infra/registration/schema_registry.py",
        "parent": "infra.registration.schema_registry",
        "dependencies": [],
        "dependents": [
          "infra.registration.schema_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get the schema ID for a subject."
      },
      "infra.registration.schema_registry.get_schema": {
        "name": "infra.registration.schema_registry.get_schema",
        "type": "function",
        "service": "infra",
        "file_path": "infra/registration/schema_registry.py",
        "parent": "infra.registration.schema_registry",
        "dependencies": [],
        "dependents": [
          "infra.registration.schema_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get a schema by ID."
      },
      "infra.registration.schema_registry.validate_event_against_schema": {
        "name": "infra.registration.schema_registry.validate_event_against_schema",
        "type": "function",
        "service": "infra",
        "file_path": "infra/registration/schema_registry.py",
        "parent": "infra.registration.schema_registry",
        "dependencies": [],
        "dependents": [
          "infra.registration.schema_registry"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Validate event data against a schema."
      },
      "infra.registration.__init__": {
        "name": "infra.registration.__init__",
        "type": "module",
        "service": "infra",
        "file_path": "infra/registration/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "infra.configs.__init__": {
        "name": "infra.configs.__init__",
        "type": "module",
        "service": "infra",
        "file_path": "infra/configs/__init__.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "infra.pulsar.event_client": {
        "name": "infra.pulsar.event_client",
        "type": "module",
        "service": "infra",
        "file_path": "infra/pulsar/event_client.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Apache Pulsar event client for the program synthesis system."
      },
      "infra.pulsar.event_client.PulsarEventClient": {
        "name": "infra.pulsar.event_client.PulsarEventClient",
        "type": "class",
        "service": "infra",
        "file_path": "infra/pulsar/event_client.py",
        "parent": "infra.pulsar.event_client",
        "dependencies": [],
        "dependents": [
          "infra.pulsar.event_client"
        ],
        "methods": [
          "__init__",
          "get_topic_name",
          "get_producer",
          "send_event",
          "subscribe",
          "_receive_loop",
          "close"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Client for producing and consuming events using Apache Pulsar."
      },
      "infra.pulsar.event_client.__init__": {
        "name": "infra.pulsar.event_client.__init__",
        "type": "function",
        "service": "infra",
        "file_path": "infra/pulsar/event_client.py",
        "parent": "infra.pulsar.event_client",
        "dependencies": [],
        "dependents": [
          "infra.pulsar.event_client"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Initialize the Pulsar event client."
      },
      "infra.pulsar.event_client.get_topic_name": {
        "name": "infra.pulsar.event_client.get_topic_name",
        "type": "function",
        "service": "infra",
        "file_path": "infra/pulsar/event_client.py",
        "parent": "infra.pulsar.event_client",
        "dependencies": [],
        "dependents": [
          "infra.pulsar.event_client"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get the appropriate topic name for an event type."
      },
      "infra.pulsar.event_client.get_producer": {
        "name": "infra.pulsar.event_client.get_producer",
        "type": "function",
        "service": "infra",
        "file_path": "infra/pulsar/event_client.py",
        "parent": "infra.pulsar.event_client",
        "dependencies": [],
        "dependents": [
          "infra.pulsar.event_client"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Get or create a producer for the given topic."
      },
      "infra.pulsar.event_client.send_event": {
        "name": "infra.pulsar.event_client.send_event",
        "type": "function",
        "service": "infra",
        "file_path": "infra/pulsar/event_client.py",
        "parent": "infra.pulsar.event_client",
        "dependencies": [],
        "dependents": [
          "infra.pulsar.event_client"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Send an event to a Pulsar topic."
      },
      "infra.pulsar.event_client.subscribe": {
        "name": "infra.pulsar.event_client.subscribe",
        "type": "function",
        "service": "infra",
        "file_path": "infra/pulsar/event_client.py",
        "parent": "infra.pulsar.event_client",
        "dependencies": [],
        "dependents": [
          "infra.pulsar.event_client"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Subscribe to a topic."
      },
      "infra.pulsar.event_client._receive_loop": {
        "name": "infra.pulsar.event_client._receive_loop",
        "type": "function",
        "service": "infra",
        "file_path": "infra/pulsar/event_client.py",
        "parent": "infra.pulsar.event_client",
        "dependencies": [],
        "dependents": [
          "infra.pulsar.event_client"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Continuous loop to receive messages."
      },
      "infra.pulsar.event_client.close": {
        "name": "infra.pulsar.event_client.close",
        "type": "function",
        "service": "infra",
        "file_path": "infra/pulsar/event_client.py",
        "parent": "infra.pulsar.event_client",
        "dependencies": [],
        "dependents": [
          "infra.pulsar.event_client"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Close all producers, consumers and the client."
      },
      "project_scripts.event_templates.request_template": {
        "name": "project_scripts.event_templates.request_template",
        "type": "module",
        "service": "project_scripts",
        "file_path": "project_scripts/event_templates/request_template.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Template Request Client"
      },
      "project_scripts.event_templates.request_template.main": {
        "name": "project_scripts.event_templates.request_template.main",
        "type": "function",
        "service": "project_scripts",
        "file_path": "project_scripts/event_templates/request_template.py",
        "parent": "project_scripts.event_templates.request_template",
        "dependencies": [],
        "dependents": [
          "project_scripts.event_templates.request_template"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "project_scripts.event_templates.event_template_generator": {
        "name": "project_scripts.event_templates.event_template_generator",
        "type": "module",
        "service": "project_scripts",
        "file_path": "project_scripts/event_templates/event_template_generator.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event-Driven Template Generator"
      },
      "project_scripts.event_templates.event_template_generator.EventTemplateGenerator": {
        "name": "project_scripts.event_templates.event_template_generator.EventTemplateGenerator",
        "type": "class",
        "service": "project_scripts",
        "file_path": "project_scripts/event_templates/event_template_generator.py",
        "parent": "project_scripts.event_templates.event_template_generator",
        "dependencies": [],
        "dependents": [
          "project_scripts.event_templates.event_template_generator"
        ],
        "methods": [
          "__init__",
          "shutdown",
          "_send_response",
          "_calculate_complexity",
          "_save_template"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Generate templates based on events from Pulsar"
      },
      "project_scripts.event_templates.event_template_generator.main": {
        "name": "project_scripts.event_templates.event_template_generator.main",
        "type": "function",
        "service": "project_scripts",
        "file_path": "project_scripts/event_templates/event_template_generator.py",
        "parent": "project_scripts.event_templates.event_template_generator",
        "dependencies": [],
        "dependents": [
          "project_scripts.event_templates.event_template_generator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "project_scripts.event_templates.event_template_generator.__init__": {
        "name": "project_scripts.event_templates.event_template_generator.__init__",
        "type": "function",
        "service": "project_scripts",
        "file_path": "project_scripts/event_templates/event_template_generator.py",
        "parent": "project_scripts.event_templates.event_template_generator",
        "dependencies": [],
        "dependents": [
          "project_scripts.event_templates.event_template_generator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "project_scripts.event_templates.event_template_generator.shutdown": {
        "name": "project_scripts.event_templates.event_template_generator.shutdown",
        "type": "function",
        "service": "project_scripts",
        "file_path": "project_scripts/event_templates/event_template_generator.py",
        "parent": "project_scripts.event_templates.event_template_generator",
        "dependencies": [],
        "dependents": [
          "project_scripts.event_templates.event_template_generator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Shutdown Pulsar client and connections"
      },
      "project_scripts.event_templates.event_template_generator._send_response": {
        "name": "project_scripts.event_templates.event_template_generator._send_response",
        "type": "function",
        "service": "project_scripts",
        "file_path": "project_scripts/event_templates/event_template_generator.py",
        "parent": "project_scripts.event_templates.event_template_generator",
        "dependencies": [],
        "dependents": [
          "project_scripts.event_templates.event_template_generator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Send response message back to Pulsar"
      },
      "project_scripts.event_templates.event_template_generator._calculate_complexity": {
        "name": "project_scripts.event_templates.event_template_generator._calculate_complexity",
        "type": "function",
        "service": "project_scripts",
        "file_path": "project_scripts/event_templates/event_template_generator.py",
        "parent": "project_scripts.event_templates.event_template_generator",
        "dependencies": [],
        "dependents": [
          "project_scripts.event_templates.event_template_generator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Calculate template complexity based on services"
      },
      "project_scripts.event_templates.event_template_generator._save_template": {
        "name": "project_scripts.event_templates.event_template_generator._save_template",
        "type": "function",
        "service": "project_scripts",
        "file_path": "project_scripts/event_templates/event_template_generator.py",
        "parent": "project_scripts.event_templates.event_template_generator",
        "dependencies": [],
        "dependents": [
          "project_scripts.event_templates.event_template_generator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Save template to appropriate directory"
      },
      "project_scripts.event_templates.event_template_generator.signal_handler": {
        "name": "project_scripts.event_templates.event_template_generator.signal_handler",
        "type": "function",
        "service": "project_scripts",
        "file_path": "project_scripts/event_templates/event_template_generator.py",
        "parent": "project_scripts.event_templates.event_template_generator",
        "dependencies": [],
        "dependents": [
          "project_scripts.event_templates.event_template_generator"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "project_scripts.tools.event_relationship_analyzer.request_analysis": {
        "name": "project_scripts.tools.event_relationship_analyzer.request_analysis",
        "type": "module",
        "service": "project_scripts",
        "file_path": "project_scripts/tools/event_relationship_analyzer/request_analysis.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Relationship Analysis Request Client"
      },
      "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer": {
        "name": "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer",
        "type": "module",
        "service": "project_scripts",
        "file_path": "project_scripts/tools/event_relationship_analyzer/event_relationship_analyzer.py",
        "parent": null,
        "dependencies": [],
        "dependents": [],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Event-Driven Template Relationship Analyzer"
      },
      "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer.EventRelationshipAnalyzer": {
        "name": "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer.EventRelationshipAnalyzer",
        "type": "class",
        "service": "project_scripts",
        "file_path": "project_scripts/tools/event_relationship_analyzer/event_relationship_analyzer.py",
        "parent": "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer",
        "dependencies": [],
        "dependents": [
          "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer"
        ],
        "methods": [
          "__init__",
          "shutdown",
          "_send_response",
          "_load_templates",
          "_discover_relationships",
          "_are_complementary",
          "_apply_discovered_relationships"
        ],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Analyze and manage relationships between templates via events"
      },
      "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer.main": {
        "name": "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer.main",
        "type": "function",
        "service": "project_scripts",
        "file_path": "project_scripts/tools/event_relationship_analyzer/event_relationship_analyzer.py",
        "parent": "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer",
        "dependencies": [],
        "dependents": [
          "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer.__init__": {
        "name": "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer.__init__",
        "type": "function",
        "service": "project_scripts",
        "file_path": "project_scripts/tools/event_relationship_analyzer/event_relationship_analyzer.py",
        "parent": "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer",
        "dependencies": [],
        "dependents": [
          "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      },
      "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer.shutdown": {
        "name": "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer.shutdown",
        "type": "function",
        "service": "project_scripts",
        "file_path": "project_scripts/tools/event_relationship_analyzer/event_relationship_analyzer.py",
        "parent": "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer",
        "dependencies": [],
        "dependents": [
          "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Shutdown Pulsar client and connections"
      },
      "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer._send_response": {
        "name": "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer._send_response",
        "type": "function",
        "service": "project_scripts",
        "file_path": "project_scripts/tools/event_relationship_analyzer/event_relationship_analyzer.py",
        "parent": "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer",
        "dependencies": [],
        "dependents": [
          "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Send response message back to Pulsar"
      },
      "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer._load_templates": {
        "name": "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer._load_templates",
        "type": "function",
        "service": "project_scripts",
        "file_path": "project_scripts/tools/event_relationship_analyzer/event_relationship_analyzer.py",
        "parent": "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer",
        "dependencies": [],
        "dependents": [
          "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Load all templates from the directory"
      },
      "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer._discover_relationships": {
        "name": "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer._discover_relationships",
        "type": "function",
        "service": "project_scripts",
        "file_path": "project_scripts/tools/event_relationship_analyzer/event_relationship_analyzer.py",
        "parent": "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer",
        "dependencies": [],
        "dependents": [
          "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Discover relationships between templates"
      },
      "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer._are_complementary": {
        "name": "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer._are_complementary",
        "type": "function",
        "service": "project_scripts",
        "file_path": "project_scripts/tools/event_relationship_analyzer/event_relationship_analyzer.py",
        "parent": "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer",
        "dependencies": [],
        "dependents": [
          "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Check if two templates are complementary"
      },
      "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer._apply_discovered_relationships": {
        "name": "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer._apply_discovered_relationships",
        "type": "function",
        "service": "project_scripts",
        "file_path": "project_scripts/tools/event_relationship_analyzer/event_relationship_analyzer.py",
        "parent": "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer",
        "dependencies": [],
        "dependents": [
          "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": "Apply discovered relationships to templates"
      },
      "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer.signal_handler": {
        "name": "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer.signal_handler",
        "type": "function",
        "service": "project_scripts",
        "file_path": "project_scripts/tools/event_relationship_analyzer/event_relationship_analyzer.py",
        "parent": "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer",
        "dependencies": [],
        "dependents": [
          "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer"
        ],
        "methods": [],
        "event_handlers": [],
        "event_publishers": [],
        "description": null
      }
    },
    "event_flows": [
      {
        "name": "EventFlow",
        "source": "app_mapper",
        "service": "app_mapper.py",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "WorkflowEventType",
        "source": "src.services.workflow_orchestrator.workflow_orchestrator",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "EventBusClient",
        "source": "src.services.constraint_relaxer.app.client",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "EventAvro",
        "source": "src.services.shared.models.event_avro",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "Events",
        "source": "src.services.shared.models.enums",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "EventPriority",
        "source": "src.services.shared.models.enums",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "EventType",
        "source": "src.services.shared.models.enums",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "CodeGenerationRequestedEvent",
        "source": "src.services.shared.models.domain",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "CodeGenerationCompletedEvent",
        "source": "src.services.shared.models.domain",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "CodeGenerationFailedEvent",
        "source": "src.services.shared.models.domain",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "KnowledgeQueryRequestedEvent",
        "source": "src.services.shared.models.domain",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "KnowledgeQueryCompletedEvent",
        "source": "src.services.shared.models.domain",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "KnowledgeUpdatedEvent",
        "source": "src.services.shared.models.domain",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "SpecSheetCreatedEvent",
        "source": "src.services.shared.models.domain",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "SpecSheetUpdatedEvent",
        "source": "src.services.shared.models.domain",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "SpecSheetDeletedEvent",
        "source": "src.services.shared.models.domain",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "SpecSheetPublishedEvent",
        "source": "src.services.shared.models.domain",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "SpecSheetDeprecatedEvent",
        "source": "src.services.shared.models.domain",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "SpecSheetArchivedEvent",
        "source": "src.services.shared.models.domain",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "SpecInstanceCreatedEvent",
        "source": "src.services.shared.models.domain",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "SpecInstanceUpdatedEvent",
        "source": "src.services.shared.models.domain",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "SpecInstanceCompletedEvent",
        "source": "src.services.shared.models.domain",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "SpecInstanceValidatedEvent",
        "source": "src.services.shared.models.domain",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "SpecInstanceDeletedEvent",
        "source": "src.services.shared.models.domain",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "CodeGenerationRequestPayload",
        "source": "src.services.shared.models.events",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "CodeGenerationCompletedPayload",
        "source": "src.services.shared.models.events",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "CodeGenerationFailedPayload",
        "source": "src.services.shared.models.events",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "KnowledgeQueryPayload",
        "source": "src.services.shared.models.events",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "KnowledgeQueryCompletedPayload",
        "source": "src.services.shared.models.events",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "KnowledgeUpdatedPayload",
        "source": "src.services.shared.models.events",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "SpecSheetEvent",
        "source": "src.services.shared.models.events",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "SpecInstanceEvent",
        "source": "src.services.shared.models.events",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "CodeGenerationRequestedEvent",
        "source": "src.services.shared.models.events",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "CodeGenerationCompletedEvent",
        "source": "src.services.shared.models.events",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "CodeGenerationFailedEvent",
        "source": "src.services.shared.models.events",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "KnowledgeQueryRequestedEvent",
        "source": "src.services.shared.models.events",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "KnowledgeQueryCompletedEvent",
        "source": "src.services.shared.models.events",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "KnowledgeUpdatedEvent",
        "source": "src.services.shared.models.events",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "SpecSheetCreatedEvent",
        "source": "src.services.shared.models.events",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "SpecSheetUpdatedEvent",
        "source": "src.services.shared.models.events",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "SpecSheetDeletedEvent",
        "source": "src.services.shared.models.events",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "EventPayload",
        "source": "src.services.shared.models.base",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "BaseEvent",
        "source": "src.services.shared.models.base",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "EventBus",
        "source": "src.services.shared.pulsar.event_bus",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "PulsarEventBus",
        "source": "src.services.shared.pulsar.event_bus",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "EventVerificationError",
        "source": "src.services.shared.pulsar.event_listener",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "SecureEventListener",
        "source": "src.services.shared.pulsar.event_listener",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "SecureEventEmitter",
        "source": "src.services.shared.pulsar.event_emitter",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "AgentEventService",
        "source": "src.services.agents.app.event_service",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "AgentBlockCreatedEvent",
        "source": "src.services.agents.app.models.events",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "AgentBlockUpdatedEvent",
        "source": "src.services.agents.app.models.events",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "AgentTemplateCreatedEvent",
        "source": "src.services.agents.app.models.events",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "AgentTemplateUpdatedEvent",
        "source": "src.services.agents.app.models.events",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "AgentInstanceCreatedEvent",
        "source": "src.services.agents.app.models.events",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "AgentInstanceStartedEvent",
        "source": "src.services.agents.app.models.events",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "AgentInstanceCompletedEvent",
        "source": "src.services.agents.app.models.events",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "AgentInstanceFailedEvent",
        "source": "src.services.agents.app.models.events",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "response_aggregator",
        "source": "unknown",
        "service": "src",
        "targets": [
          "src.services.aggregators.app.response_aggregator"
        ],
        "handlers": [],
        "event_type": "pulsar"
      },
      {
        "name": "PulsarEventBus",
        "source": "src.pulsar.app.client",
        "service": "src",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "PulsarEventClient",
        "source": "infra.pulsar.event_client",
        "service": "infra",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "EventTemplateGenerator",
        "source": "project_scripts.event_templates.event_template_generator",
        "service": "project_scripts",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      },
      {
        "name": "EventRelationshipAnalyzer",
        "source": "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer",
        "service": "project_scripts",
        "targets": [],
        "handlers": [],
        "event_type": "class_based"
      }
    ],
    "templates": [],
    "infra_files": [
      {
        "path": "src/services/project_manager/Dockerfile",
        "type": "dockerfile",
        "service": "src",
        "references": [
          "python"
        ]
      },
      {
        "path": "src/services/feedback_collector/Dockerfile",
        "type": "dockerfile",
        "service": "src",
        "references": [
          "ubuntu"
        ]
      },
      {
        "path": "src/services/aggregators/Dockerfile",
        "type": "dockerfile",
        "service": "src",
        "references": [
          "python"
        ]
      },
      {
        "path": "src/services/spec_registry/Dockerfile",
        "type": "dockerfile",
        "service": "src",
        "references": [
          "python"
        ]
      },
      {
        "path": "src/services/grafana/Dockerfile",
        "type": "dockerfile",
        "service": "src",
        "references": [
          "grafana/grafana"
        ]
      },
      {
        "path": "src/services/shared/Dockerfile",
        "type": "dockerfile",
        "service": "src",
        "references": [
          "python"
        ]
      },
      {
        "path": "src/services/shared/Dockerfile-dev",
        "type": "dockerfile",
        "service": "src",
        "references": [
          "python"
        ]
      },
      {
        "path": "src/services/incremental_synthesis/Dockerfile",
        "type": "dockerfile",
        "service": "src",
        "references": [
          "python"
        ]
      },
      {
        "path": "src/services/language_interop/Dockerfile",
        "type": "dockerfile",
        "service": "src",
        "references": [
          "ubuntu"
        ]
      },
      {
        "path": "src/services/workflow_orchestrator/Dockerfile",
        "type": "dockerfile",
        "service": "src",
        "references": [
          "python"
        ]
      },
      {
        "path": "src/services/meta_learner/Dockerfile",
        "type": "dockerfile",
        "service": "src",
        "references": [
          "python"
        ]
      },
      {
        "path": "src/services/neural_code_generator/Dockerfile",
        "type": "dockerfile",
        "service": "src",
        "references": [
          "python"
        ]
      },
      {
        "path": "src/services/knowledge_base/Dockerfile",
        "type": "dockerfile",
        "service": "src",
        "references": [
          "ubuntu"
        ]
      },
      {
        "path": "src/services/prometheus/Dockerfile",
        "type": "dockerfile",
        "service": "src",
        "references": [
          "ubuntu"
        ]
      },
      {
        "path": "src/services/constraint_relaxer/Dockerfile",
        "type": "dockerfile",
        "service": "src",
        "references": [
          "python"
        ]
      },
      {
        "path": "src/services/ast_code_generator/Dockerfile",
        "type": "dockerfile",
        "service": "src",
        "references": [
          "ubuntu"
        ]
      },
      {
        "path": "src/services/spec_inference/Dockerfile",
        "type": "dockerfile",
        "service": "src",
        "references": [
          "nvidia/cuda"
        ]
      },
      {
        "path": "src/services/shared/logging/Dockerfile",
        "type": "dockerfile",
        "service": "src",
        "references": [
          "python"
        ]
      },
      {
        "path": "src/api_gateway/neural_interpretor/Dockerfile",
        "type": "dockerfile",
        "service": "src",
        "references": [
          "python"
        ]
      },
      {
        "path": "src/api_gateway/security/Dockerfile",
        "type": "dockerfile",
        "service": "src",
        "references": [
          "python"
        ]
      },
      {
        "path": "src/api_gateway/auth-sidecar/Dockerfile",
        "type": "dockerfile",
        "service": "src",
        "references": [
          "node"
        ]
      },
      {
        "path": "infra/docker/Dockerfile",
        "type": "dockerfile",
        "service": "infra",
        "references": [
          "python"
        ]
      },
      {
        "path": "src/services/project_manager/requirements.txt",
        "type": "requirements",
        "service": "src",
        "references": []
      },
      {
        "path": "src/services/feedback_collector/requirements.txt",
        "type": "requirements",
        "service": "src",
        "references": []
      },
      {
        "path": "src/services/aggregators/requirements.txt",
        "type": "requirements",
        "service": "src",
        "references": []
      },
      {
        "path": "src/services/spec_registry/requirements.txt",
        "type": "requirements",
        "service": "src",
        "references": []
      },
      {
        "path": "src/services/grafana/requirements.txt",
        "type": "requirements",
        "service": "src",
        "references": []
      },
      {
        "path": "src/services/shared/requirements.txt",
        "type": "requirements",
        "service": "src",
        "references": []
      },
      {
        "path": "src/services/incremental_synthesis/requirements.txt",
        "type": "requirements",
        "service": "src",
        "references": []
      },
      {
        "path": "src/services/language_interop/requirements.txt",
        "type": "requirements",
        "service": "src",
        "references": []
      },
      {
        "path": "src/services/meta_learner/requirements.txt",
        "type": "requirements",
        "service": "src",
        "references": []
      },
      {
        "path": "src/services/knowledge_base/requirements.txt",
        "type": "requirements",
        "service": "src",
        "references": []
      },
      {
        "path": "src/services/prometheus/requirements.txt",
        "type": "requirements",
        "service": "src",
        "references": []
      },
      {
        "path": "src/services/constraint_relaxer/requirements.txt",
        "type": "requirements",
        "service": "src",
        "references": []
      },
      {
        "path": "src/services/ast_code_generator/requirements.txt",
        "type": "requirements",
        "service": "src",
        "references": []
      },
      {
        "path": "src/services/spec_inference/requirements.txt",
        "type": "requirements",
        "service": "src",
        "references": []
      },
      {
        "path": "src/services/shared/logging/requirements.txt",
        "type": "requirements",
        "service": "src",
        "references": []
      },
      {
        "path": "src/api_gateway/neural_interpretor/requirements.txt",
        "type": "requirements",
        "service": "src",
        "references": []
      },
      {
        "path": "src/api_gateway/security/requirements.txt",
        "type": "requirements",
        "service": "src",
        "references": []
      },
      {
        "path": "src/api_gateway/traefik/requirements.txt",
        "type": "requirements",
        "service": "src",
        "references": []
      },
      {
        "path": "infra/docker/docker-compose-infra-dev.yml",
        "type": "compose",
        "service": "infra",
        "references": [
          "apachepulsar/pulsar",
          "apachepulsar/pulsar-all:4.0.0",
          "apachepulsar/pulsar-all:4.0.0",
          "apachepulsar/pulsar:4.0.3",
          "apachepulsar/pulsar:4.0.3",
          "apachepulsar/pulsar:4.0.3",
          "apachepulsar/pulsar:4.0.3",
          "apachepulsar/pulsar:4.0.3",
          "apachepulsar/pulsar-manager:v0.4.0"
        ]
      },
      {
        "path": "src/api_gateway/docker-compose.yaml",
        "type": "compose",
        "service": "src",
        "references": [
          "traefik:v2.10",
          "apachepulsar/pulsar:3.0.0",
          "node:18-alpine"
        ]
      },
      {
        "path": "src/services/shared/docker-compose.yaml",
        "type": "compose",
        "service": "src",
        "references": [
          "apachepulsar/pulsar:4.0.4"
        ]
      },
      {
        "path": "infra/docker/docker-compose-all.yaml",
        "type": "compose",
        "service": "infra",
        "references": [
          "traefik:v2.10",
          "neo4j:5.6.0-community",
          "apachepulsar/pulsar:4.0.3",
          "qdrant/qdrant:v1.9.6",
          "postgres:15",
          "mongo:6.0",
          "grafana/grafana:10.0.3",
          "prom/node-exporter:v1.3.1"
        ]
      },
      {
        "path": "infra/docker/docker-compose-database-dev.yaml",
        "type": "compose",
        "service": "infra",
        "references": [
          "postgres:17-bookworm",
          "postgres:17-bookworm",
          "postgres:17-bookworm",
          "postgres:17-bookworm",
          "qdrant/qdrant:v1.9.6",
          "mongo:6.0"
        ]
      },
      {
        "path": "infra/docker/docker-compose-service-dev.yaml",
        "type": "compose",
        "service": "infra",
        "references": []
      },
      {
        "path": "infra/docker/docker-compose-api-gateway-dev.yaml",
        "type": "compose",
        "service": "infra",
        "references": [
          "traefik:v2.10",
          "neo4j:5.6.0-community"
        ]
      },
      {
        "path": "infra/docker/docker-compose-monitoring.yaml",
        "type": "compose",
        "service": "infra",
        "references": [
          "prom/prometheus:v2.35.0",
          "prom/alertmanager:v0.24.0",
          "grafana/grafana:8.5.2",
          "prom/node-exporter:v1.3.1"
        ]
      },
      {
        "path": "infra/docker/docker-compose-proxy-dev.yaml",
        "type": "compose",
        "service": "infra",
        "references": [
          "tecnativa/docker-socket-proxy:latest"
        ]
      },
      {
        "path": "infra/kubernetes/service.yaml",
        "type": "kubernetes",
        "service": "infra",
        "references": []
      },
      {
        "path": "infra/.env",
        "type": "env",
        "service": "infra",
        "references": []
      },
      {
        "path": "src/services/llm_volume/deepseek_model_config.yaml",
        "type": "config",
        "service": "src",
        "references": []
      },
      {
        "path": "src/services/neural_code_generator/config.yaml",
        "type": "config",
        "service": "src",
        "references": []
      },
      {
        "path": "src/services/spec_inference/config.yaml",
        "type": "config",
        "service": "src",
        "references": []
      },
      {
        "path": "src/api_gateway/traefik/app/traefik_tls_config.yaml",
        "type": "config",
        "service": "src",
        "references": []
      },
      {
        "path": "src/api_gateway/traefik/app/config/config.yaml",
        "type": "config",
        "service": "src",
        "references": []
      },
      {
        "path": "src/api_gateway/auth-sidecar/app/config/config.yaml",
        "type": "config",
        "service": "src",
        "references": []
      },
      {
        "path": "src/api_gateway/security/app/config/config.yaml",
        "type": "config",
        "service": "src",
        "references": []
      },
      {
        "path": "src/api_gateway/neural_interpretor/app/config/config.yaml",
        "type": "config",
        "service": "src",
        "references": []
      },
      {
        "path": "infra/configs/system_config.yaml",
        "type": "config",
        "service": "infra",
        "references": []
      },
      {
        "path": "infra/configs/config.yaml",
        "type": "config",
        "service": "infra",
        "references": []
      }
    ],
    "roles": {
      "message_queue": [
        "app_mapper.Component",
        "app_mapper.ImprovedApplicationMapper",
        "src.services.workflow_orchestrator.workflow_orchestrator.WorkflowOrchestrator",
        "src.services.neural_code_generator.enhanced_neural_code_generator.EnhancedNeuralCodeGenerator",
        "src.services.knowledge_base.vector_db_service.VectorDBService",
        "src.services.constraint_relaxer.app.client.EventBusClient",
        "src.services.constraint_relaxer.app.main.ConstraintRelaxerService",
        "src.services.shared.models.enums.EventType",
        "src.services.shared.models.domain.SpecSheetPublishedEvent",
        "src.services.shared.models.messages.QueryResponse",
        "src.services.shared.pulsar.event_bus.EventBus",
        "src.services.shared.pulsar.event_bus.PulsarEventBus",
        "src.services.shared.pulsar.event_listener.SecureEventListener",
        "src.services.shared.pulsar.event_emitter.SecureEventEmitter",
        "src.services.shared.logging.logger.LoggerService",
        "src.services.shared.logging.db_handler.PulsarLogHandler",
        "src.services.aggregators.app.response_aggregator.ResponseAggregator",
        "src.pulsar.app.config.PulsarTopicConfig",
        "src.pulsar.app.config.PulsarConfig",
        "src.pulsar.app.config.PulsarConfigManager",
        "src.pulsar.app.client.PulsarEventBus",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.NeuralInterpreter",
        "src.api_gateway.neural_interpretor.app.code_generation.CodeGenRouter",
        "infra.registration.registration.ServiceRegistry",
        "infra.pulsar.event_client.PulsarEventClient",
        "project_scripts.event_templates.event_template_generator.EventTemplateGenerator",
        "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer.EventRelationshipAnalyzer"
      ],
      "pulsar_client": [
        "app_mapper.Component",
        "app_mapper.ImprovedApplicationMapper",
        "src.services.workflow_orchestrator.workflow_orchestrator.WorkflowOrchestrator",
        "src.services.neural_code_generator.enhanced_neural_code_generator.EnhancedNeuralCodeGenerator",
        "src.services.knowledge_base.vector_db_service.VectorDBService",
        "src.services.constraint_relaxer.app.client.EventBusClient",
        "src.services.constraint_relaxer.app.main.ConstraintRelaxerService",
        "src.services.shared.models.enums.EventType",
        "src.services.shared.models.domain.SpecSheetPublishedEvent",
        "src.services.shared.models.messages.QueryResponse",
        "src.services.shared.pulsar.event_bus.EventBus",
        "src.services.shared.pulsar.event_bus.PulsarEventBus",
        "src.services.shared.pulsar.event_listener.SecureEventListener",
        "src.services.shared.pulsar.event_emitter.SecureEventEmitter",
        "src.services.shared.logging.logger.LoggerService",
        "src.services.shared.logging.db_handler.PulsarLogHandler",
        "src.services.aggregators.app.response_aggregator.ResponseAggregator",
        "src.pulsar.app.config.PulsarTopicConfig",
        "src.pulsar.app.config.PulsarConfig",
        "src.pulsar.app.config.PulsarConfigManager",
        "src.pulsar.app.client.PulsarEventBus",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.NeuralInterpreter",
        "src.api_gateway.neural_interpretor.app.code_generation.CodeGenRouter",
        "infra.registration.registration.ServiceRegistry",
        "infra.pulsar.event_client.PulsarEventClient",
        "project_scripts.event_templates.event_template_generator.EventTemplateGenerator",
        "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer.EventRelationshipAnalyzer"
      ],
      "event_bus": [
        "app_mapper.ImprovedApplicationMapper",
        "src.orchestration.orchestration.CodeGenOrchestrator",
        "src.services.workflow_orchestrator.workflow_orchestrator.WorkflowOrchestrator",
        "src.services.meta_learner.main.MetaLearnerService",
        "src.services.constraint_relaxer.app.client.EventBusClient",
        "src.services.constraint_relaxer.app.main.ConstraintRelaxerService",
        "src.services.shared.pulsar.event_bus.EventBus",
        "src.services.shared.pulsar.event_bus.PulsarEventBus",
        "src.services.shared.pulsar.event_listener.SecureEventListener",
        "src.services.shared.pulsar.event_emitter.SecureEventEmitter",
        "src.services.shared.logging.logger.LoggerService",
        "src.services.shared.logging.db_handler.PulsarLogHandler",
        "src.services.agents.app.event_service.AgentEventService",
        "src.services.project_manager.app.project_manager.ProjectManager",
        "src.pulsar.app.client.PulsarEventBus",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.NeuralInterpreter",
        "src.api_gateway.neural_interpretor.app.code_generation.CodeGenRouter",
        "infra.registration.registration.ServiceRegistry",
        "infra.pulsar.event_client.PulsarEventClient",
        "project_scripts.event_templates.event_template_generator.EventTemplateGenerator",
        "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer.EventRelationshipAnalyzer"
      ],
      "model_transformer": [
        "src.services.neural_code_generator.enhanced_neural_code_generator.EnhancedNeuralCodeGenerator"
      ],
      "observer": [
        "src.services.shared.monitoring.health_monitor.HealthMonitor",
        "src.services.aggregators.app.response_aggregator.ResponseAggregator",
        "infra.registration.registration.ServiceRegistry"
      ],
      "validator": [
        "src.services.shared.validation.validator.TypeValidator",
        "src.services.shared.validation.validator.StringValidator",
        "src.services.shared.validation.validator.NumberValidator"
      ],
      "agent": [
        "src.services.agents.app.event_service.AgentEventService",
        "src.services.agents.app.agent_generator.AgentGenerator",
        "src.services.agents.app.agent_template.TemplateService",
        "src.services.agents.app.block_registry.BlockRegistry",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.TaskMetadata",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.NeuralInterpretor",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.NeuralInterpreter"
      ]
    },
    "dependencies": {
      "app_mapper": [
        "os",
        "re",
        "ast",
        "json",
        "yaml",
        "argparse",
        "logging",
        "pathlib",
        "dataclasses",
        "typing",
        "collections",
        "networkx",
        "app_mapper.Component",
        "app_mapper.EventFlow",
        "app_mapper.Template",
        "app_mapper.InfraFile",
        "app_mapper.ImprovedApplicationMapper",
        "app_mapper.main",
        "app_mapper.__init__",
        "app_mapper.get_service_name",
        "app_mapper.find_files",
        "app_mapper.find_infra_files",
        "app_mapper.analyze_file",
        "app_mapper._register_event_class",
        "app_mapper._get_module_name",
        "app_mapper._extract_docstring",
        "app_mapper._get_attribute_name",
        "app_mapper._detect_component_role",
        "app_mapper._detect_templates",
        "app_mapper._extract_template_variables",
        "app_mapper._detect_event_flows",
        "app_mapper.analyze_infra_file",
        "app_mapper.analyze_codebase",
        "app_mapper._process_relationships",
        "app_mapper._organize_by_service",
        "app_mapper.generate_application_map",
        "app_mapper.save_output",
        "app_mapper._save_markdown",
        "app_mapper._save_graphml"
      ],
      "project_scripts.registration": [
        "logging",
        "pathlib",
        "sys",
        "app.components.component_factory",
        "app.components.constraint_relaxer.constraint_relaxer",
        "app.components.feedback_collector.feedback_collector",
        "app.components.incremental_synthesis.incremental_synthesis",
        "app.components.language_interop.language_interop",
        "app.components.meta_learner.meta_learner",
        "app.components.neural_code_generator.enhanced_neural_code_generator",
        "app.components.neural_code_generator.neural_code_generator",
        "app.components.spec_inference.spec_inference",
        "app.components.synthesis_engine.synthesis_engine",
        "app.components.version_manager.version_manager",
        "app.utils.advanced_logger",
        "app.utils.advanced_logger",
        "app.utils.models.enums",
        "project_scripts.registration.register_components"
      ],
      "project_scripts.mistral": [
        "os",
        "dotenv",
        "torch",
        "transformers",
        "transformers"
      ],
      "project_scripts.deepseek": [
        "os",
        "torch",
        "transformers",
        "transformers"
      ],
      "src.orchestration.system": [
        "hashlib",
        "importlib",
        "json",
        "logging",
        "pathlib",
        "time",
        "typing",
        "src.services.shared.constants.enums",
        "src.services.shared.constants.models",
        "yaml",
        "src.orchestration.system.SynthesisSystem",
        "src.orchestration.system.__init__",
        "src.orchestration.system._setup_logger",
        "src.orchestration.system._load_config",
        "src.orchestration.system._initialize_component",
        "src.orchestration.system.generate_from_spec",
        "src.orchestration.system._compute_cache_key"
      ],
      "src.orchestration.program_synthesizor": [
        "enum",
        "json",
        "logging",
        "pathlib",
        "time",
        "typing",
        "src.services.shared.models",
        "yaml",
        "hashlib",
        "hashlib",
        "src.orchestration.program_synthesizor.VerificationResult",
        "src.orchestration.program_synthesizor.SynthesisSystem",
        "src.orchestration.program_synthesizor.FormalSpecification",
        "src.orchestration.program_synthesizor.SynthesisResult",
        "src.orchestration.program_synthesizor.VerificationReport",
        "src.orchestration.program_synthesizor.SMTSpecificationParser",
        "src.orchestration.program_synthesizor.SketchSynthesisEngine",
        "src.orchestration.program_synthesizor.PostgresVectorKnowledgeBase",
        "src.orchestration.program_synthesizor.BaseVerifier",
        "src.orchestration.program_synthesizor.SimplePropertyTester",
        "src.orchestration.program_synthesizor.BoundedModelChecker",
        "src.orchestration.program_synthesizor.FormalVerifier",
        "src.orchestration.program_synthesizor.IncrementalSynthesizer",
        "src.orchestration.program_synthesizor.__init__",
        "src.orchestration.program_synthesizor.decompose",
        "src.orchestration.program_synthesizor.combine",
        "src.orchestration.program_synthesizor.LanguageInteroperability",
        "src.orchestration.program_synthesizor.MetaLearningSystem",
        "src.orchestration.program_synthesizor.ConstraintRelaxer",
        "src.orchestration.program_synthesizor.SymbolicExecutor",
        "src.orchestration.program_synthesizor.InterfaceContractor",
        "src.orchestration.program_synthesizor.__init__",
        "src.orchestration.program_synthesizor._setup_logger",
        "src.orchestration.program_synthesizor._load_config",
        "src.orchestration.program_synthesizor._initialize_component",
        "src.orchestration.program_synthesizor._initialize_component",
        "src.orchestration.program_synthesizor.generate_from_spec",
        "src.orchestration.program_synthesizor._compute_cache_key",
        "src.orchestration.program_synthesizor.__init__",
        "src.orchestration.program_synthesizor.__init__",
        "src.orchestration.program_synthesizor.__init__",
        "src.orchestration.program_synthesizor.__init__",
        "src.orchestration.program_synthesizor.parse",
        "src.orchestration.program_synthesizor.__init__",
        "src.orchestration.program_synthesizor.synthesize",
        "src.orchestration.program_synthesizor.__init__",
        "src.orchestration.program_synthesizor.get",
        "src.orchestration.program_synthesizor.store",
        "src.orchestration.program_synthesizor.find_similar",
        "src.orchestration.program_synthesizor.verify",
        "src.orchestration.program_synthesizor.verify",
        "src.orchestration.program_synthesizor.verify",
        "src.orchestration.program_synthesizor.verify",
        "src.orchestration.program_synthesizor.__init__",
        "src.orchestration.program_synthesizor.generate_for_language",
        "src.orchestration.program_synthesizor.__init__",
        "src.orchestration.program_synthesizor.record_success",
        "src.orchestration.program_synthesizor.record_failure",
        "src.orchestration.program_synthesizor._determine_problem_type",
        "src.orchestration.program_synthesizor.__init__",
        "src.orchestration.program_synthesizor.relax_constraints",
        "src.orchestration.program_synthesizor._identify_violated_constraints",
        "src.orchestration.program_synthesizor._choose_constraint_to_relax",
        "src.orchestration.program_synthesizor._relax_constraint",
        "src.orchestration.program_synthesizor.__init__",
        "src.orchestration.program_synthesizor.generate_tests",
        "src.orchestration.program_synthesizor.execute_tests",
        "src.orchestration.program_synthesizor.__init__",
        "src.orchestration.program_synthesizor.verify_interfaces",
        "src.orchestration.program_synthesizor.Result",
        "src.orchestration.program_synthesizor.Result",
        "src.orchestration.program_synthesizor.__init__",
        "src.orchestration.program_synthesizor.__init__"
      ],
      "src.orchestration.program_synthesizor.VerificationResult": [
        "Enum"
      ],
      "src.orchestration.program_synthesizor.SimplePropertyTester": [
        "BaseVerifier"
      ],
      "src.orchestration.program_synthesizor.BoundedModelChecker": [
        "BaseVerifier"
      ],
      "src.orchestration.program_synthesizor.FormalVerifier": [
        "BaseVerifier"
      ],
      "src.orchestration.__init__": [
        "program_synthesizor",
        "program_synthesizor",
        "program_synthesizor",
        "program_synthesizor",
        "program_synthesizor",
        "program_synthesizor",
        "program_synthesizor"
      ],
      "src.orchestration.orchestration": [
        "asyncio",
        "datetime",
        "datetime",
        "enum",
        "logging",
        "time",
        "typing",
        "uuid",
        "src.services.shared.models.base",
        "src.services.shared.models.enums",
        "src.services.shared.models.events",
        "src.services.shared.models.events",
        "src.services.shared.models.events",
        "src.services.shared.models.events",
        "src.services.shared.models.events",
        "src.services.shared.pulsar.event_emitter",
        "src.services.shared.pulsar.event_listener",
        "ast",
        "src.orchestration.orchestration.CodeGenPhase",
        "src.orchestration.orchestration.CodeGenOrchestrator",
        "src.orchestration.orchestration.__init__",
        "src.orchestration.orchestration._initialize_components",
        "src.orchestration.orchestration._register_event_handlers",
        "src.orchestration.orchestration._generate_simulated_code",
        "src.orchestration.orchestration._check_syntax"
      ],
      "src.orchestration.orchestration.CodeGenPhase": [
        "str",
        "Enum"
      ],
      "src.orchestration.orchestration.CodeGenOrchestrator": [
        "BaseComponent"
      ],
      "src.services.version_manager.version_manager": [
        "datetime",
        "difflib",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "time",
        "typing",
        "uuid",
        "program_synthesis_system.src.shared",
        "src.services.version_manager.version_manager.VersionManager",
        "src.services.version_manager.version_manager.__init__",
        "src.services.version_manager.version_manager._initialize_storage",
        "src.services.version_manager.version_manager._load_version_index",
        "src.services.version_manager.version_manager._save_version_index",
        "src.services.version_manager.version_manager.record_new_version",
        "src.services.version_manager.version_manager.record_usage",
        "src.services.version_manager.version_manager.find_prior_versions",
        "src.services.version_manager.version_manager.get_version_history",
        "src.services.version_manager.version_manager.get_version_details",
        "src.services.version_manager.version_manager.compare_versions",
        "src.services.version_manager.version_manager._compute_fingerprint",
        "src.services.version_manager.version_manager._find_related_versions",
        "src.services.version_manager.version_manager._compute_text_similarity",
        "src.services.version_manager.version_manager._compute_text_diff",
        "src.services.version_manager.version_manager._compare_metadata",
        "src.services.version_manager.version_manager._calculate_version_similarity",
        "src.services.version_manager.version_manager._prune_old_versions",
        "src.services.version_manager.version_manager._remove_version",
        "src.services.version_manager.version_manager.get_version_statistics"
      ],
      "src.services.version_manager.version_manager.VersionManager": [
        "BaseComponent"
      ],
      "src.services.shared.setup": [
        "setuptools",
        "setuptools"
      ],
      "src.services.component_factory.component_factory": [
        "importlib",
        "logging",
        "typing",
        "src.services.neural_code_generator.enhanced_neural_code_generator",
        "src.services.shared.models.base",
        "src.services.shared.models.enums",
        "src.services.component_factory.component_factory.ComponentFactory",
        "src.services.component_factory.component_factory.__init__",
        "src.services.component_factory.component_factory._register_default_services",
        "src.services.component_factory.component_factory.register_component",
        "src.services.component_factory.component_factory.create_component",
        "src.services.component_factory.component_factory.create_from_config"
      ],
      "src.services.incremental_synthesis.incremental_synthesis": [
        "copy",
        "logging",
        "pathlib",
        "sys",
        "time",
        "typing",
        "program_synthesis_system.src.shared",
        "src.services.shared.models",
        "src.services.shared.models",
        "z3",
        "src.services.incremental_synthesis.incremental_synthesis.IncrementalSynthesis",
        "src.services.incremental_synthesis.incremental_synthesis.__init__",
        "src.services.incremental_synthesis.incremental_synthesis.decompose",
        "src.services.incremental_synthesis.incremental_synthesis.combine",
        "src.services.incremental_synthesis.incremental_synthesis._decompose_by_dependencies",
        "src.services.incremental_synthesis.incremental_synthesis._extract_variable_dependencies",
        "src.services.incremental_synthesis.incremental_synthesis._extract_variables_from_constraint",
        "src.services.incremental_synthesis.incremental_synthesis._find_connected_components",
        "src.services.incremental_synthesis.incremental_synthesis._create_component_spec",
        "src.services.incremental_synthesis.incremental_synthesis._decompose_by_semantic_clustering",
        "src.services.incremental_synthesis.incremental_synthesis._group_constraints_by_type",
        "src.services.incremental_synthesis.incremental_synthesis._decompose_by_partitioning",
        "src.services.incremental_synthesis.incremental_synthesis._merge_components",
        "src.services.incremental_synthesis.incremental_synthesis._calculate_component_similarity",
        "src.services.incremental_synthesis.incremental_synthesis._merge_two_components",
        "src.services.incremental_synthesis.incremental_synthesis._combine_sequential",
        "src.services.incremental_synthesis.incremental_synthesis._combine_parallel",
        "src.services.incremental_synthesis.incremental_synthesis._combine_conditional",
        "src.services.incremental_synthesis.incremental_synthesis._get_component_body",
        "src.services.incremental_synthesis.incremental_synthesis._get_function_arguments",
        "src.services.incremental_synthesis.incremental_synthesis._compute_cache_key",
        "src.services.incremental_synthesis.incremental_synthesis.dfs"
      ],
      "src.services.incremental_synthesis.incremental_synthesis.IncrementalSynthesis": [
        "BaseComponent"
      ],
      "src.services.language_interop.language_interop": [
        "src.services.language_interop.language_interop.create_interop_bridge"
      ],
      "src.services.workflow_orchestrator.workflow_orchestrator": [
        "asyncio",
        "datetime",
        "datetime",
        "enum",
        "json",
        "logging",
        "os",
        "typing",
        "pulsar",
        "src.services.shared.constants.models",
        "src.services.shared.constants.models",
        "src.services.shared.constants.models",
        "src.services.shared.constants.models",
        "src.services.shared.constants.models",
        "src.services.shared.constants.models",
        "src.services.shared.constants.models",
        "src.services.workflow_orchestrator.workflow_orchestrator.WorkflowPhase",
        "src.services.workflow_orchestrator.workflow_orchestrator.WorkflowEventType",
        "src.services.workflow_orchestrator.workflow_orchestrator.WorkflowOrchestrator",
        "src.services.workflow_orchestrator.workflow_orchestrator.__init__",
        "src.services.workflow_orchestrator.workflow_orchestrator._load_project_states",
        "src.services.workflow_orchestrator.workflow_orchestrator._save_project_states"
      ],
      "src.services.workflow_orchestrator.workflow_orchestrator.WorkflowPhase": [
        "str",
        "Enum"
      ],
      "src.services.workflow_orchestrator.workflow_orchestrator.WorkflowEventType": [
        "str",
        "Enum"
      ],
      "src.services.meta_learner.meta_learner": [
        "hashlib",
        "collections",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "random",
        "sys",
        "time",
        "typing",
        "src.services.shared.models.base",
        "src.services.shared.models.enums",
        "numpy",
        "sklearn.cluster",
        "sklearn.feature_extraction.text",
        "src.services.meta_learner.meta_learner._extract_domain",
        "src.services.meta_learner.meta_learner.MetaLearner",
        "src.services.meta_learner.meta_learner.__init__",
        "src.services.meta_learner.meta_learner._load_learning_data",
        "src.services.meta_learner.meta_learner._save_learning_data",
        "src.services.meta_learner.meta_learner.suggest_strategy",
        "src.services.meta_learner.meta_learner.record_success",
        "src.services.meta_learner.meta_learner.record_failure",
        "src.services.meta_learner.meta_learner.get_strategy_performance",
        "src.services.meta_learner.meta_learner.get_domain_strategies",
        "src.services.meta_learner.meta_learner.analyze_strategy_patterns",
        "src.services.meta_learner.meta_learner._explore_strategies",
        "src.services.meta_learner.meta_learner._get_best_overall_strategy",
        "src.services.meta_learner.meta_learner._calculate_strategy_success_rate",
        "src.services.meta_learner.meta_learner._update_problem_clusters",
        "src.services.meta_learner.meta_learner._perform_clustering",
        "src.services.meta_learner.meta_learner._get_problem_cluster",
        "src.services.meta_learner.meta_learner._calculate_domain_similarity",
        "src.services.meta_learner.meta_learner._calculate_strategy_complementarity",
        "src.services.meta_learner.meta_learner._sanitize_context",
        "src.services.meta_learner.meta_learner.recommend_strategy",
        "src.services.meta_learner.meta_learner._determine_problem_type"
      ],
      "src.services.meta_learner.meta_learner.MetaLearner": [
        "BaseComponent"
      ],
      "src.services.meta_learner.main": [
        "logging",
        "os",
        "signal",
        "sys",
        "threading",
        "time",
        "typing",
        "src.services.shared.models.base",
        "src.services.shared.models.enums",
        "src.services.shared.models.types",
        "src.services.shared.models.synthesis",
        "src.services.shared.logging.logger",
        "src.services.shared.pulsar.event_emitter",
        "src.services.shared.pulsar.event_listener",
        "src.services.meta_learner.meta_learner",
        "numpy",
        "sklearn.cluster",
        "asyncio",
        "asyncio",
        "src.services.meta_learner.main.MetaLearnerService",
        "src.services.meta_learner.main.handle_signal",
        "src.services.meta_learner.main.__init__",
        "src.services.meta_learner.main._load_secret",
        "src.services.meta_learner.main.initialize"
      ],
      "src.services.neural_code_generator.healthcheck": [
        "asyncio",
        "json",
        "logging",
        "os",
        "sys",
        "threading",
        "time",
        "typing",
        "fastapi",
        "fastapi",
        "fastapi",
        "psutil",
        "pydantic",
        "torch",
        "uvicorn",
        "src.services.neural_code_generator.healthcheck.HealthStatus",
        "src.services.neural_code_generator.healthcheck.update_stats",
        "src.services.neural_code_generator.healthcheck.start_server"
      ],
      "src.services.neural_code_generator.healthcheck.HealthStatus": [
        "BaseModel"
      ],
      "src.services.neural_code_generator.enhanced_neural_code_generator": [
        "json",
        "logging",
        "pathlib",
        "platform",
        "time",
        "typing",
        "numpy",
        "sentence_transformers",
        "src.services.shared",
        "src.services.shared.models.base",
        "src.services.shared.pulsar",
        "src.services.shared.pulsar",
        "torch",
        "transformers",
        "transformers",
        "ast",
        "astunparse",
        "ast",
        "program_synthesis_system.src.shared",
        "program_synthesis_system.src.shared",
        "program_synthesis_system.src.components.knowledge_base.vector_knowledge_base",
        "program_synthesis_system.src.shared",
        "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_base_model",
        "src.services.neural_code_generator.enhanced_neural_code_generator.EnhancedNeuralCodeGenerator",
        "src.services.neural_code_generator.enhanced_neural_code_generator.__init__",
        "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_models",
        "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_tokenizer",
        "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_base_model",
        "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_retrieval_model",
        "src.services.neural_code_generator.enhanced_neural_code_generator._connect_knowledge_base",
        "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_simple_knowledge_base",
        "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_tree_transformer",
        "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_hierarchical_model",
        "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_syntax_beam_search",
        "src.services.neural_code_generator.enhanced_neural_code_generator._python_syntax_checker",
        "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_hybrid_model",
        "src.services.neural_code_generator.enhanced_neural_code_generator._initialize_pulsar",
        "src.services.neural_code_generator.enhanced_neural_code_generator._implement_basic_pulsar",
        "src.services.neural_code_generator.enhanced_neural_code_generator._parse_specification",
        "src.services.neural_code_generator.enhanced_neural_code_generator.generate",
        "src.services.neural_code_generator.enhanced_neural_code_generator._create_generation_prompt",
        "src.services.neural_code_generator.enhanced_neural_code_generator.SimpleKnowledgeBase",
        "src.services.neural_code_generator.enhanced_neural_code_generator.BasicPulsarConnection",
        "src.services.neural_code_generator.enhanced_neural_code_generator.__init__",
        "src.services.neural_code_generator.enhanced_neural_code_generator._load_index",
        "src.services.neural_code_generator.enhanced_neural_code_generator.search",
        "src.services.neural_code_generator.enhanced_neural_code_generator.__init__"
      ],
      "src.services.neural_code_generator.enhanced_neural_code_generator.EnhancedNeuralCodeGenerator": [
        "BaseComponent"
      ],
      "src.services.neural_code_generator.main": [
        "asyncio",
        "json",
        "logging",
        "os",
        "signal",
        "sys",
        "typing",
        "program_synthesis_system.components.neural_code_generator.enhanced_neural_code_generator",
        "src.services.neural_code_generator.main.signal_handler"
      ],
      "src.services.verifier.statistical_verifier": [
        "logging",
        "random",
        "time",
        "typing",
        "src.services.shared.models.base",
        "src.services.shared.models.synthesis",
        "src.services.shared.models.types",
        "src.services.shared.models.types",
        "src.services.shared.models.types",
        "z3",
        "src.services.verifier.statistical_verifier.StatisticalVerifier",
        "src.services.verifier.statistical_verifier.DistributedVerifier",
        "src.services.verifier.statistical_verifier.SymbolicExecutor",
        "src.services.verifier.statistical_verifier.BaseVerifier",
        "src.services.verifier.statistical_verifier.SimplePropertyTester",
        "src.services.verifier.statistical_verifier.BoundedModelChecker",
        "src.services.verifier.statistical_verifier.FormalVerifier",
        "src.services.verifier.statistical_verifier.StatisticalVerifier",
        "src.services.verifier.statistical_verifier.StratifiedVerifier",
        "src.services.verifier.statistical_verifier.__init__",
        "src.services.verifier.statistical_verifier.verify",
        "src.services.verifier.statistical_verifier._generate_test_inputs",
        "src.services.verifier.statistical_verifier._generate_inputs_from_constraints",
        "src.services.verifier.statistical_verifier._generate_random_inputs",
        "src.services.verifier.statistical_verifier._check_inputs",
        "src.services.verifier.statistical_verifier._create_program_interpreter",
        "src.services.verifier.statistical_verifier._check_constraints",
        "src.services.verifier.statistical_verifier._calculate_confidence",
        "src.services.verifier.statistical_verifier.__init__",
        "src.services.verifier.statistical_verifier.verify",
        "src.services.verifier.statistical_verifier.__init__",
        "src.services.verifier.statistical_verifier.generate_tests",
        "src.services.verifier.statistical_verifier.execute_tests",
        "src.services.verifier.statistical_verifier.BaseVerifier",
        "src.services.verifier.statistical_verifier.SimplePropertyTester",
        "src.services.verifier.statistical_verifier.BoundedModelChecker",
        "src.services.verifier.statistical_verifier.FormalVerifier",
        "src.services.verifier.statistical_verifier.verify",
        "src.services.verifier.statistical_verifier.verify",
        "src.services.verifier.statistical_verifier.verify",
        "src.services.verifier.statistical_verifier.verify",
        "src.services.verifier.statistical_verifier.__init__",
        "src.services.verifier.statistical_verifier.verify",
        "src.services.verifier.statistical_verifier.__init__",
        "src.services.verifier.statistical_verifier.stratified_verify",
        "src.services.verifier.statistical_verifier.interpreter",
        "src.services.verifier.statistical_verifier.SymbolicResult",
        "src.services.verifier.statistical_verifier.verify",
        "src.services.verifier.statistical_verifier.verify",
        "src.services.verifier.statistical_verifier.verify",
        "src.services.verifier.statistical_verifier.verify",
        "src.services.verifier.statistical_verifier.__init__"
      ],
      "src.services.verifier.statistical_verifier.StatisticalVerifier": [
        "BaseComponent",
        "BaseVerifier"
      ],
      "src.services.verifier.statistical_verifier.SimplePropertyTester": [
        "BaseVerifier",
        "BaseVerifier"
      ],
      "src.services.verifier.statistical_verifier.BoundedModelChecker": [
        "BaseVerifier",
        "BaseVerifier"
      ],
      "src.services.verifier.statistical_verifier.FormalVerifier": [
        "BaseVerifier",
        "BaseVerifier"
      ],
      "src.services.knowledge_base.vector_knowledge_base": [
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "typing",
        "src.services.shared.constants.base_component",
        "numpy",
        "qdrant_client",
        "qdrant_client.http",
        "sentence_transformers",
        "src.services.knowledge_base.vector_knowledge_base.VectorKnowledgeBase",
        "src.services.knowledge_base.vector_knowledge_base.__init__",
        "src.services.knowledge_base.vector_knowledge_base._initialize_storage",
        "src.services.knowledge_base.vector_knowledge_base._initialize_embedding_model",
        "src.services.knowledge_base.vector_knowledge_base.store",
        "src.services.knowledge_base.vector_knowledge_base.get",
        "src.services.knowledge_base.vector_knowledge_base.search",
        "src.services.knowledge_base.vector_knowledge_base.delete"
      ],
      "src.services.knowledge_base.vector_knowledge_base.VectorKnowledgeBase": [
        "BaseComponent"
      ],
      "src.services.knowledge_base.vector_db_service": [
        "time",
        "src.services.shared.constants.base_component",
        "src.services.shared.logging.logger",
        "pymilvus",
        "pymilvus",
        "pymilvus",
        "qdrant_client",
        "pinecone",
        "src.services.knowledge_base.vector_db_service.VectorDBService",
        "src.services.knowledge_base.vector_db_service.__init__",
        "src.services.knowledge_base.vector_db_service._initialize_vector_db"
      ],
      "src.services.knowledge_base.vector_db_service.VectorDBService": [
        "BaseComponent"
      ],
      "src.services.synthesis_engine.synthesis_engine": [
        "src.services.shared.models.base",
        "src.services.synthesis_engine.synthesis_engine.SpecBasedSynthesisEngine",
        "src.services.synthesis_engine.synthesis_engine.__init__",
        "src.services.synthesis_engine.synthesis_engine._initialize_synthesizer",
        "src.services.synthesis_engine.synthesis_engine._create_synthesizer",
        "src.services.synthesis_engine.synthesis_engine._select_strategy",
        "src.services.synthesis_engine.synthesis_engine._get_next_strategy",
        "src.services.synthesis_engine.synthesis_engine._convert_spec_to_formal_spec",
        "src.services.synthesis_engine.synthesis_engine._generate_fallback_code"
      ],
      "src.services.synthesis_engine.synthesis_engine.SpecBasedSynthesisEngine": [
        "BaseComponent"
      ],
      "src.services.specification_parser.smt_spec_parser": [
        "dataclasses",
        "logging",
        "re",
        "sys",
        "typing",
        "program_synthesis_system.src.shared",
        "program_synthesis_system.src.shared",
        "z3",
        "src.services.specification_parser.smt_spec_parser._parse_to_ast",
        "src.services.specification_parser.smt_spec_parser._extract_constraints",
        "src.services.specification_parser.smt_spec_parser._extract_examples",
        "src.services.specification_parser.smt_spec_parser.SMTSpecificationParser",
        "src.services.specification_parser.smt_spec_parser.Token",
        "src.services.specification_parser.smt_spec_parser.__init__",
        "src.services.specification_parser.smt_spec_parser.parse",
        "src.services.specification_parser.smt_spec_parser._extract_parameter_names",
        "src.services.specification_parser.smt_spec_parser._infer_types",
        "src.services.specification_parser.smt_spec_parser._infer_types",
        "src.services.specification_parser.smt_spec_parser._extract_constraints",
        "src.services.specification_parser.smt_spec_parser._create_comparison_constraint",
        "src.services.specification_parser.smt_spec_parser._convert_value",
        "src.services.specification_parser.smt_spec_parser._parse_constraint_string",
        "src.services.specification_parser.smt_spec_parser._extract_examples",
        "src.services.specification_parser.smt_spec_parser._get_default_value",
        "src.services.specification_parser.smt_spec_parser._parse_example_text",
        "src.services.specification_parser.smt_spec_parser._create_ast"
      ],
      "src.services.specification_parser.smt_spec_parser.SMTSpecificationParser": [
        "BaseComponent"
      ],
      "src.services.workflow_registry.app.workflows.workflow_registry": [
        "argparse",
        "asyncio",
        "json",
        "logging",
        "os",
        "sys",
        "time",
        "dataclasses",
        "enum",
        "pathlib",
        "typing",
        "torch",
        "yaml",
        "fastapi",
        "fastapi.middleware.cors",
        "fastapi.responses",
        "pydantic",
        "vllm",
        "vllm.engine.arg_utils",
        "arctic_inference",
        "arctic_inference.plugins.vllm",
        "uvicorn",
        "src.services.workflow_registry.app.workflows.workflow_registry.SpeculationMethod",
        "src.services.workflow_registry.app.workflows.workflow_registry.PerformanceMetrics",
        "src.services.workflow_registry.app.workflows.workflow_registry.LLMRequest",
        "src.services.workflow_registry.app.workflows.workflow_registry.SpeculativeAccelerator",
        "src.services.workflow_registry.app.workflows.workflow_registry.create_app",
        "src.services.workflow_registry.app.workflows.workflow_registry.main",
        "src.services.workflow_registry.app.workflows.workflow_registry.update",
        "src.services.workflow_registry.app.workflows.workflow_registry.as_dict",
        "src.services.workflow_registry.app.workflows.workflow_registry.__init__",
        "src.services.workflow_registry.app.workflows.workflow_registry._load_config",
        "src.services.workflow_registry.app.workflows.workflow_registry._validate_dependencies",
        "src.services.workflow_registry.app.workflows.workflow_registry._build_speculative_config",
        "src.services.workflow_registry.app.workflows.workflow_registry._init_engine",
        "src.services.workflow_registry.app.workflows.workflow_registry.get_metrics"
      ],
      "src.services.workflow_registry.app.workflows.workflow_registry.SpeculationMethod": [
        "str",
        "Enum"
      ],
      "src.services.workflow_registry.app.workflows.workflow_registry.LLMRequest": [
        "BaseModel"
      ],
      "src.services.ast_code_generator.app.ast_code_generator": [
        "datetime",
        "logging",
        "typing",
        "uuid",
        "src.services.knowledge_base.db_adapter",
        "src.services.shared.constants.base_component",
        "src.services.shared.constants.models",
        "src.services.shared.logging.logger",
        "src.services.ast_code_generator.app.ast_code_generator._generate_function_stub",
        "src.services.ast_code_generator.app.ast_code_generator._optimize_ast",
        "src.services.ast_code_generator.app.ast_code_generator._apply_style",
        "src.services.ast_code_generator.app.ast_code_generator._add_comments",
        "src.services.ast_code_generator.app.ast_code_generator.CodeGenerator",
        "src.services.ast_code_generator.app.ast_code_generator.ASTCodeGenerator",
        "src.services.ast_code_generator.app.ast_code_generator.__init__",
        "src.services.ast_code_generator.app.ast_code_generator.generate",
        "src.services.ast_code_generator.app.ast_code_generator.generate_best_effort",
        "src.services.ast_code_generator.app.ast_code_generator.__init__",
        "src.services.ast_code_generator.app.ast_code_generator.generate",
        "src.services.ast_code_generator.app.ast_code_generator.generate_best_effort",
        "src.services.ast_code_generator.app.ast_code_generator._generate_from_ast",
        "src.services.ast_code_generator.app.ast_code_generator._generate_body",
        "src.services.ast_code_generator.app.ast_code_generator._generate_expression",
        "src.services.ast_code_generator.app.ast_code_generator.__init__",
        "src.services.ast_code_generator.app.ast_code_generator._add_safety_measures"
      ],
      "src.services.ast_code_generator.app.ast_code_generator.ASTCodeGenerator": [
        "BaseComponent"
      ],
      "src.services.ast_code_generator.app.ast_utils": [
        "typing",
        "src.services.ast_code_generator.app.ast_utils.generate_function_stub",
        "src.services.ast_code_generator.app.ast_utils.optimize_ast",
        "src.services.ast_code_generator.app.ast_utils.apply_style",
        "src.services.ast_code_generator.app.ast_utils.add_comments"
      ],
      "src.services.constraint_relaxer.app.config": [
        "os",
        "src.services.constraint_relaxer.app.config.AppConfig",
        "src.services.constraint_relaxer.app.config.__init__"
      ],
      "src.services.constraint_relaxer.app.client": [
        "asyncio",
        "json",
        "logging",
        "typing",
        "pulsar",
        "pulsar.schema",
        "pulsar.schema",
        "pulsar.schema",
        "pulsar.schema",
        "src.services.shared.models.base",
        "src.services.constraint_relaxer.app.client.EventBusClient",
        "src.services.constraint_relaxer.app.client.__init__"
      ],
      "src.services.constraint_relaxer.app.__init__": [
        "src.services.constraint_relaxer.app.__init__.is_int_value",
        "src.services.constraint_relaxer.app.__init__.is_int",
        "src.services.constraint_relaxer.app.__init__.is_real",
        "src.services.constraint_relaxer.app.__init__.And",
        "src.services.constraint_relaxer.app.__init__.Or",
        "src.services.constraint_relaxer.app.__init__.Not",
        "src.services.constraint_relaxer.app.__init__.Int",
        "src.services.constraint_relaxer.app.__init__.Real",
        "src.services.constraint_relaxer.app.__init__.Bool",
        "src.services.constraint_relaxer.app.__init__.Solver",
        "src.services.constraint_relaxer.app.__init__.__init__",
        "src.services.constraint_relaxer.app.__init__.evaluate",
        "src.services.constraint_relaxer.app.__init__.__init__",
        "src.services.constraint_relaxer.app.__init__.evaluate",
        "src.services.constraint_relaxer.app.__init__.__init__",
        "src.services.constraint_relaxer.app.__init__.evaluate",
        "src.services.constraint_relaxer.app.__init__.__init__",
        "src.services.constraint_relaxer.app.__init__.validate",
        "src.services.constraint_relaxer.app.__init__.__init__",
        "src.services.constraint_relaxer.app.__init__.validate",
        "src.services.constraint_relaxer.app.__init__.validate",
        "src.services.constraint_relaxer.app.__init__.__init__",
        "src.services.constraint_relaxer.app.__init__.add_constraint",
        "src.services.constraint_relaxer.app.__init__.solve"
      ],
      "src.services.constraint_relaxer.app.constraint_relaxer": [
        "logging",
        "time",
        "typing",
        "src.services.shared.models.base",
        "src.services.shared.models.messages",
        "src.services.shared.models.types",
        "z3",
        "src.services.constraint_relaxer.app.constraint_relaxer.ModelBasedConstraintRelaxer",
        "src.services.constraint_relaxer.app.constraint_relaxer.__init__",
        "src.services.constraint_relaxer.app.constraint_relaxer._select_relaxation_strategy",
        "src.services.constraint_relaxer.app.constraint_relaxer._count_variables",
        "src.services.constraint_relaxer.app.constraint_relaxer._constraint_to_z3",
        "src.services.constraint_relaxer.app.constraint_relaxer._parse_constraint_string"
      ],
      "src.services.constraint_relaxer.app.main": [
        "asyncio",
        "logging",
        "signal",
        "typing",
        "src.services.constraint_relaxer.app.client",
        "src.services.constraint_relaxer.app.config",
        "src.services.constraint_relaxer.app.constraint_relaxer",
        "src.services.constraint_relaxer.app.main.ConstraintRelaxerService",
        "src.services.constraint_relaxer.app.main.__init__",
        "src.services.constraint_relaxer.app.main._handle_sigterm",
        "src.services.constraint_relaxer.app.main._deserialize_spec",
        "src.services.constraint_relaxer.app.main._deserialize_verification_result",
        "src.services.constraint_relaxer.app.main._serialize_spec"
      ],
      "src.services.shared.utils.z3_utils": [
        "logging",
        "typing",
        "z3",
        "z3",
        "z3",
        "z3",
        "z3",
        "z3",
        "z3",
        "z3",
        "z3",
        "z3",
        "z3",
        "z3",
        "z3",
        "z3",
        "z3",
        "z3",
        "z3",
        "src.services.shared.utils.z3_utils._solver",
        "src.services.shared.utils.z3_utils._check_sat",
        "src.services.shared.utils.z3_utils._check_unsat",
        "src.services.shared.utils.z3_utils._is_expr_ref",
        "src.services.shared.utils.z3_utils._is_const",
        "src.services.shared.utils.z3_utils._is_bool",
        "src.services.shared.utils.z3_utils._is_int_value",
        "src.services.shared.utils.z3_utils._is_real",
        "src.services.shared.utils.z3_utils._create_bool",
        "src.services.shared.utils.z3_utils._is_true",
        "src.services.shared.utils.z3_utils._optimize",
        "src.services.shared.utils.z3_utils._is_eq",
        "src.services.shared.utils.z3_utils._is_arith",
        "src.services.shared.utils.z3_utils._is_and",
        "src.services.shared.utils.z3_utils._and",
        "src.services.shared.utils.z3_utils._is_app",
        "src.services.shared.utils.z3_utils.get_model",
        "src.services.shared.utils.z3_utils.extract_variables",
        "src.services.shared.utils.z3_utils.is_satisfiable",
        "src.services.shared.utils.z3_utils.get_unsat_core",
        "src.services.shared.utils.z3_utils.optimize_constraints",
        "src.services.shared.utils.z3_utils.relax_constraint"
      ],
      "src.services.shared.models.event_avro": [
        "datetime",
        "datetime",
        "typing",
        "uuid",
        "pydantic",
        "base",
        "enums",
        "src.services.shared.models.event_avro.EventAvro",
        "src.services.shared.models.event_avro.Meta"
      ],
      "src.services.shared.models.event_avro.EventAvro": [
        "PulsarAvroBaseModel"
      ],
      "src.services.shared.models.enums": [
        "enum",
        "enum",
        "typing",
        "pydantic",
        "pydantic",
        "pydantic",
        "src.services.shared.models.enums.is_failure_event",
        "src.services.shared.models.enums.get_retry_event_type",
        "src.services.shared.models.enums.Components",
        "src.services.shared.models.enums.Events",
        "src.services.shared.models.enums.EventPriority",
        "src.services.shared.models.enums.EventType",
        "src.services.shared.models.enums.Database",
        "src.services.shared.models.enums.DatabaseConfig",
        "src.services.shared.models.enums.Paths",
        "src.services.shared.models.enums.Techniques",
        "src.services.shared.models.enums.ModelConfig",
        "src.services.shared.models.enums.Metrics",
        "src.services.shared.models.enums.MetricsConfig",
        "src.services.shared.models.enums.DeploymentConfig",
        "src.services.shared.models.enums.ErrorCodes",
        "src.services.shared.models.enums.Constants",
        "src.services.shared.models.enums.ProcessingMode",
        "src.services.shared.models.enums.TaskStatus",
        "src.services.shared.models.enums.TaskPriority",
        "src.services.shared.models.enums.ProjectType",
        "src.services.shared.models.enums.ProjectStatus",
        "src.services.shared.models.enums.SynthesisStrategy",
        "src.services.shared.models.enums.DisclosureLevel",
        "src.services.shared.models.enums.HealthStatus",
        "src.services.shared.models.enums.VerificationResult",
        "src.services.shared.models.enums.SynthesisStrategy",
        "src.services.shared.models.enums.DisclosureLevel"
      ],
      "src.services.shared.models.enums.Components": [
        "str",
        "Enum"
      ],
      "src.services.shared.models.enums.Events": [
        "str",
        "Enum"
      ],
      "src.services.shared.models.enums.EventPriority": [
        "int",
        "Enum"
      ],
      "src.services.shared.models.enums.EventType": [
        "str",
        "Enum"
      ],
      "src.services.shared.models.enums.Database": [
        "str",
        "Enum"
      ],
      "src.services.shared.models.enums.DatabaseConfig": [
        "BaseModel"
      ],
      "src.services.shared.models.enums.Paths": [
        "BaseModel"
      ],
      "src.services.shared.models.enums.Techniques": [
        "str",
        "Enum"
      ],
      "src.services.shared.models.enums.ModelConfig": [
        "BaseModel"
      ],
      "src.services.shared.models.enums.Metrics": [
        "str",
        "Enum"
      ],
      "src.services.shared.models.enums.MetricsConfig": [
        "BaseModel"
      ],
      "src.services.shared.models.enums.DeploymentConfig": [
        "BaseModel"
      ],
      "src.services.shared.models.enums.ErrorCodes": [
        "int",
        "Enum"
      ],
      "src.services.shared.models.enums.Constants": [
        "BaseModel"
      ],
      "src.services.shared.models.enums.ProcessingMode": [
        "str",
        "Enum"
      ],
      "src.services.shared.models.enums.TaskStatus": [
        "str",
        "Enum"
      ],
      "src.services.shared.models.enums.TaskPriority": [
        "int",
        "Enum"
      ],
      "src.services.shared.models.enums.ProjectType": [
        "str",
        "Enum"
      ],
      "src.services.shared.models.enums.ProjectStatus": [
        "str",
        "Enum"
      ],
      "src.services.shared.models.enums.SynthesisStrategy": [
        "str",
        "Enum",
        "str",
        "Enum"
      ],
      "src.services.shared.models.enums.DisclosureLevel": [
        "Enum",
        "Enum"
      ],
      "src.services.shared.models.enums.HealthStatus": [
        "str",
        "Enum"
      ],
      "src.services.shared.models.enums.VerificationResult": [
        "str",
        "Enum"
      ],
      "src.services.shared.models.domain": [
        "datetime",
        "datetime",
        "typing",
        "pydantic",
        "pydantic",
        "base",
        "base",
        "enums",
        "enums",
        "src.services.shared.models.domain.CodeGenerationRequestedEvent",
        "src.services.shared.models.domain.CodeGenerationCompletedEvent",
        "src.services.shared.models.domain.CodeGenerationFailedEvent",
        "src.services.shared.models.domain.KnowledgeQueryRequestedEvent",
        "src.services.shared.models.domain.KnowledgeQueryCompletedEvent",
        "src.services.shared.models.domain.KnowledgeUpdatedEvent",
        "src.services.shared.models.domain.SpecSheetCreatedEvent",
        "src.services.shared.models.domain.SpecSheetUpdatedEvent",
        "src.services.shared.models.domain.SpecSheetDeletedEvent",
        "src.services.shared.models.domain.SpecSheetPublishedEvent",
        "src.services.shared.models.domain.SpecSheetDeprecatedEvent",
        "src.services.shared.models.domain.SpecSheetArchivedEvent",
        "src.services.shared.models.domain.SpecInstanceCreatedEvent",
        "src.services.shared.models.domain.SpecInstanceUpdatedEvent",
        "src.services.shared.models.domain.SpecInstanceCompletedEvent",
        "src.services.shared.models.domain.SpecInstanceValidatedEvent",
        "src.services.shared.models.domain.SpecInstanceDeletedEvent",
        "src.services.shared.models.domain.create",
        "src.services.shared.models.domain.create",
        "src.services.shared.models.domain.create",
        "src.services.shared.models.domain.create",
        "src.services.shared.models.domain.create",
        "src.services.shared.models.domain.create"
      ],
      "src.services.shared.models.domain.CodeGenerationRequestedEvent": [
        "BaseEvent"
      ],
      "src.services.shared.models.domain.CodeGenerationCompletedEvent": [
        "BaseEvent"
      ],
      "src.services.shared.models.domain.CodeGenerationFailedEvent": [
        "BaseEvent"
      ],
      "src.services.shared.models.domain.KnowledgeQueryRequestedEvent": [
        "BaseEvent"
      ],
      "src.services.shared.models.domain.KnowledgeQueryCompletedEvent": [
        "BaseEvent"
      ],
      "src.services.shared.models.domain.KnowledgeUpdatedEvent": [
        "BaseEvent"
      ],
      "src.services.shared.models.domain.SpecSheetCreatedEvent": [
        "SpecSheetEvent"
      ],
      "src.services.shared.models.domain.SpecSheetUpdatedEvent": [
        "SpecSheetEvent"
      ],
      "src.services.shared.models.domain.SpecSheetDeletedEvent": [
        "SpecSheetEvent"
      ],
      "src.services.shared.models.domain.SpecSheetPublishedEvent": [
        "SpecSheetEvent"
      ],
      "src.services.shared.models.domain.SpecSheetDeprecatedEvent": [
        "SpecSheetEvent"
      ],
      "src.services.shared.models.domain.SpecSheetArchivedEvent": [
        "SpecSheetEvent"
      ],
      "src.services.shared.models.domain.SpecInstanceCreatedEvent": [
        "SpecInstanceEvent"
      ],
      "src.services.shared.models.domain.SpecInstanceUpdatedEvent": [
        "SpecInstanceEvent"
      ],
      "src.services.shared.models.domain.SpecInstanceCompletedEvent": [
        "SpecInstanceEvent"
      ],
      "src.services.shared.models.domain.SpecInstanceValidatedEvent": [
        "SpecInstanceEvent"
      ],
      "src.services.shared.models.domain.SpecInstanceDeletedEvent": [
        "SpecInstanceEvent"
      ],
      "src.services.shared.models.events": [
        "typing",
        "pydantic",
        "pydantic",
        "base",
        "base",
        "enums",
        "enums",
        "src.services.shared.models.events.CodeGenerationRequestPayload",
        "src.services.shared.models.events.CodeGenerationCompletedPayload",
        "src.services.shared.models.events.CodeGenerationFailedPayload",
        "src.services.shared.models.events.KnowledgeQueryPayload",
        "src.services.shared.models.events.KnowledgeQueryCompletedPayload",
        "src.services.shared.models.events.KnowledgeUpdatedPayload",
        "src.services.shared.models.events.SpecSheetEvent",
        "src.services.shared.models.events.SpecInstanceEvent",
        "src.services.shared.models.events.CodeGenerationRequestedEvent",
        "src.services.shared.models.events.CodeGenerationCompletedEvent",
        "src.services.shared.models.events.CodeGenerationFailedEvent",
        "src.services.shared.models.events.KnowledgeQueryRequestedEvent",
        "src.services.shared.models.events.KnowledgeQueryCompletedEvent",
        "src.services.shared.models.events.KnowledgeUpdatedEvent",
        "src.services.shared.models.events.SpecSheetCreatedEvent",
        "src.services.shared.models.events.SpecSheetUpdatedEvent",
        "src.services.shared.models.events.SpecSheetDeletedEvent",
        "src.services.shared.models.events.ensure_payload_consistency",
        "src.services.shared.models.events.ensure_payload_consistency",
        "src.services.shared.models.events.create",
        "src.services.shared.models.events.create",
        "src.services.shared.models.events.create",
        "src.services.shared.models.events.create",
        "src.services.shared.models.events.create",
        "src.services.shared.models.events.create"
      ],
      "src.services.shared.models.events.CodeGenerationRequestPayload": [
        "EventPayload"
      ],
      "src.services.shared.models.events.CodeGenerationCompletedPayload": [
        "EventPayload"
      ],
      "src.services.shared.models.events.CodeGenerationFailedPayload": [
        "EventPayload"
      ],
      "src.services.shared.models.events.KnowledgeQueryPayload": [
        "EventPayload"
      ],
      "src.services.shared.models.events.KnowledgeQueryCompletedPayload": [
        "EventPayload"
      ],
      "src.services.shared.models.events.KnowledgeUpdatedPayload": [
        "EventPayload"
      ],
      "src.services.shared.models.events.SpecSheetEvent": [
        "BaseEvent"
      ],
      "src.services.shared.models.events.SpecInstanceEvent": [
        "BaseEvent"
      ],
      "src.services.shared.models.events.CodeGenerationRequestedEvent": [
        "BaseEvent"
      ],
      "src.services.shared.models.events.CodeGenerationCompletedEvent": [
        "BaseEvent"
      ],
      "src.services.shared.models.events.CodeGenerationFailedEvent": [
        "BaseEvent"
      ],
      "src.services.shared.models.events.KnowledgeQueryRequestedEvent": [
        "BaseEvent"
      ],
      "src.services.shared.models.events.KnowledgeQueryCompletedEvent": [
        "BaseEvent"
      ],
      "src.services.shared.models.events.KnowledgeUpdatedEvent": [
        "BaseEvent"
      ],
      "src.services.shared.models.events.SpecSheetCreatedEvent": [
        "SpecSheetEvent"
      ],
      "src.services.shared.models.events.SpecSheetUpdatedEvent": [
        "SpecSheetEvent"
      ],
      "src.services.shared.models.events.SpecSheetDeletedEvent": [
        "SpecSheetEvent"
      ],
      "src.services.shared.models.constants": [
        "pydantic",
        "pydantic",
        "pydantic",
        "src.services.shared.models.constants.DatabaseConfig",
        "src.services.shared.models.constants.Paths",
        "src.services.shared.models.constants.ModelConfig",
        "src.services.shared.models.constants.MetricsConfig",
        "src.services.shared.models.constants.DeploymentConfig",
        "src.services.shared.models.constants.Constants"
      ],
      "src.services.shared.models.constants.DatabaseConfig": [
        "BaseModel"
      ],
      "src.services.shared.models.constants.Paths": [
        "BaseModel"
      ],
      "src.services.shared.models.constants.ModelConfig": [
        "BaseModel"
      ],
      "src.services.shared.models.constants.MetricsConfig": [
        "BaseModel"
      ],
      "src.services.shared.models.constants.DeploymentConfig": [
        "BaseModel"
      ],
      "src.services.shared.models.constants.Constants": [
        "BaseModel"
      ],
      "src.services.shared.models.schema_registry": [
        "json",
        "typing",
        "requests",
        "base",
        "src.services.shared.models.schema_registry.SchemaRegistryClient",
        "src.services.shared.models.schema_registry.register_model_schema",
        "src.services.shared.models.schema_registry.register_all_models",
        "src.services.shared.models.schema_registry.__init__",
        "src.services.shared.models.schema_registry.register_schema",
        "src.services.shared.models.schema_registry.get_schema",
        "src.services.shared.models.schema_registry.get_latest_schema",
        "src.services.shared.models.schema_registry.check_schema_compatibility"
      ],
      "src.services.shared.models.telemetry": [
        "datetime",
        "datetime",
        "logging",
        "threading",
        "typing",
        "src.services.shared.models.telemetry.TelemetryManager",
        "src.services.shared.models.telemetry.get_instance",
        "src.services.shared.models.telemetry.__init__",
        "src.services.shared.models.telemetry.record_metric",
        "src.services.shared.models.telemetry.get_metrics",
        "src.services.shared.models.telemetry.reset",
        "src.services.shared.models.telemetry.get_summary"
      ],
      "src.services.shared.models.types": [
        "datetime",
        "datetime",
        "enum",
        "typing",
        "uuid",
        "pydantic",
        "pydantic",
        "pydantic",
        "src.services.shared.models.base",
        "src.services.shared.models.types.VerificationResult",
        "src.services.shared.models.types.FormalSpecification",
        "src.services.shared.models.types.VerificationReport",
        "src.services.shared.models.types.ConstraintRelaxationRequest",
        "src.services.shared.models.types.ConstraintRelaxationResponse",
        "src.services.shared.models.types.is_decomposable",
        "src.services.shared.models.types.model_copy"
      ],
      "src.services.shared.models.types.VerificationResult": [
        "str",
        "Enum"
      ],
      "src.services.shared.models.types.FormalSpecification": [
        "BaseModel"
      ],
      "src.services.shared.models.types.VerificationReport": [
        "BaseModel"
      ],
      "src.services.shared.models.types.ConstraintRelaxationRequest": [
        "BaseMessage"
      ],
      "src.services.shared.models.types.ConstraintRelaxationResponse": [
        "BaseMessage"
      ],
      "src.services.shared.models.messages": [
        "datetime",
        "datetime",
        "typing",
        "uuid",
        "pydantic",
        "base",
        "base",
        "enums",
        "enums",
        "enums",
        "src.services.shared.models.messages.Pattern",
        "src.services.shared.models.messages.IntentAnalysis",
        "src.services.shared.models.messages.ErrorResponse",
        "src.services.shared.models.messages.QueryResponse",
        "src.services.shared.models.messages.HealthResponse",
        "src.services.shared.models.messages.PatternCreateRequest",
        "src.services.shared.models.messages.PatternResponse",
        "src.services.shared.models.messages.PatternListResponse",
        "src.services.shared.models.messages.QueryRequest",
        "src.services.shared.models.messages.SymbolicTestResult",
        "src.services.shared.models.messages.InterfaceVerificationResult",
        "src.services.shared.models.messages.Task",
        "src.services.shared.models.messages.Meta"
      ],
      "src.services.shared.models.messages.Pattern": [
        "AvroBaseModel"
      ],
      "src.services.shared.models.messages.IntentAnalysis": [
        "AvroBaseModel"
      ],
      "src.services.shared.models.messages.ErrorResponse": [
        "AvroBaseModel"
      ],
      "src.services.shared.models.messages.QueryResponse": [
        "BaseMessage"
      ],
      "src.services.shared.models.messages.HealthResponse": [
        "AvroBaseModel"
      ],
      "src.services.shared.models.messages.PatternCreateRequest": [
        "BaseMessage"
      ],
      "src.services.shared.models.messages.PatternResponse": [
        "BaseMessage"
      ],
      "src.services.shared.models.messages.PatternListResponse": [
        "BaseMessage"
      ],
      "src.services.shared.models.messages.QueryRequest": [
        "BaseMessage"
      ],
      "src.services.shared.models.messages.SymbolicTestResult": [
        "AvroBaseModel"
      ],
      "src.services.shared.models.messages.InterfaceVerificationResult": [
        "AvroBaseModel"
      ],
      "src.services.shared.models.messages.Task": [
        "BaseMessage"
      ],
      "src.services.shared.models.projects": [
        "datetime",
        "datetime",
        "enum",
        "typing",
        "uuid",
        "pydantic",
        "pydantic",
        "pydantic",
        "base",
        "enums",
        "src.services.shared.models.projects.TechnologyStack",
        "src.services.shared.models.projects.Requirement",
        "src.services.shared.models.projects.ProjectCreatedMessage",
        "src.services.shared.models.projects.ProjectAnalysisRequestMessage"
      ],
      "src.services.shared.models.projects.TechnologyStack": [
        "BaseModel"
      ],
      "src.services.shared.models.projects.Requirement": [
        "BaseModel"
      ],
      "src.services.shared.models.projects.ProjectCreatedMessage": [
        "BaseMessage"
      ],
      "src.services.shared.models.projects.ProjectAnalysisRequestMessage": [
        "BaseMessage"
      ],
      "src.services.shared.models.base": [
        "__future__",
        "datetime",
        "datetime",
        "io",
        "typing",
        "uuid",
        "dataclasses_avroschema.pydantic",
        "fastavro",
        "pydantic",
        "pydantic",
        "pydantic",
        "pydantic",
        "pydantic",
        "enums",
        "enums",
        "src.services.shared.models.base.PulsarAvroBaseModel",
        "src.services.shared.models.base.EventPayload",
        "src.services.shared.models.base.BaseEvent",
        "src.services.shared.models.base.BaseMessage",
        "src.services.shared.models.base.BaseComponent",
        "src.services.shared.models.base.ConfigurableComponent",
        "src.services.shared.models.base.get_schema_subject",
        "src.services.shared.models.base.schema_version",
        "src.services.shared.models.base.to_avro_dict",
        "src.services.shared.models.base.serialize",
        "src.services.shared.models.base.deserialize",
        "src.services.shared.models.base.from_avro_dict",
        "src.services.shared.models.base.Meta",
        "src.services.shared.models.base.validate_event_type",
        "src.services.shared.models.base.validate_priority",
        "src.services.shared.models.base.validate_timestamp",
        "src.services.shared.models.base.__init__",
        "src.services.shared.models.base.initialize",
        "src.services.shared.models.base.component_name",
        "src.services.shared.models.base.schema_version",
        "src.services.shared.models.base.get_param",
        "src.services.shared.models.base.model_dump",
        "src.services.shared.models.base.configure"
      ],
      "src.services.shared.models.base.PulsarAvroBaseModel": [
        "AvroBaseModel"
      ],
      "src.services.shared.models.base.EventPayload": [
        "PulsarAvroBaseModel"
      ],
      "src.services.shared.models.base.BaseEvent": [
        "PulsarAvroBaseModel"
      ],
      "src.services.shared.models.base.BaseMessage": [
        "PulsarAvroBaseModel"
      ],
      "src.services.shared.models.base.BaseComponent": [
        "BaseModel"
      ],
      "src.services.shared.models.base.ConfigurableComponent": [
        "BaseComponent"
      ],
      "src.services.shared.models.specifications": [
        "datetime",
        "datetime",
        "typing",
        "uuid",
        "pydantic",
        "pydantic",
        "pydantic",
        "src.services.shared.models.base",
        "src.services.shared.models.specifications.FieldDefinition",
        "src.services.shared.models.specifications.SectionDefinition",
        "src.services.shared.models.specifications.SpecSheetDefinition",
        "src.services.shared.models.specifications.FieldValue",
        "src.services.shared.models.specifications.SectionValues",
        "src.services.shared.models.specifications.SpecSheet",
        "src.services.shared.models.specifications.SpecSheetGenerationRequestMessage",
        "src.services.shared.models.specifications.SpecSheetCompletionRequestMessage",
        "src.services.shared.models.specifications.SpecSheetDefinitionRequest",
        "src.services.shared.models.specifications.SpecSheetDefinitionResponse",
        "src.services.shared.models.specifications.to_avro",
        "src.services.shared.models.specifications._make_avro_compatible",
        "src.services.shared.models.specifications.to_avro",
        "src.services.shared.models.specifications._make_avro_compatible"
      ],
      "src.services.shared.models.specifications.FieldDefinition": [
        "BaseModel"
      ],
      "src.services.shared.models.specifications.SectionDefinition": [
        "BaseModel"
      ],
      "src.services.shared.models.specifications.SpecSheetDefinition": [
        "BaseMessage"
      ],
      "src.services.shared.models.specifications.FieldValue": [
        "BaseModel"
      ],
      "src.services.shared.models.specifications.SectionValues": [
        "BaseModel"
      ],
      "src.services.shared.models.specifications.SpecSheet": [
        "BaseMessage"
      ],
      "src.services.shared.models.specifications.SpecSheetGenerationRequestMessage": [
        "BaseMessage"
      ],
      "src.services.shared.models.specifications.SpecSheetCompletionRequestMessage": [
        "BaseMessage"
      ],
      "src.services.shared.models.specifications.SpecSheetDefinitionRequest": [
        "BaseMessage"
      ],
      "src.services.shared.models.specifications.SpecSheetDefinitionResponse": [
        "BaseMessage"
      ],
      "src.services.shared.models.validation": [
        "typing",
        "pydantic",
        "pydantic",
        "pydantic",
        "src.services.shared.models.validation.ValidationResult",
        "src.services.shared.models.validation.error_message",
        "src.services.shared.models.validation.with_error",
        "src.services.shared.models.validation.merge"
      ],
      "src.services.shared.models.validation.ValidationResult": [
        "BaseModel"
      ],
      "src.services.shared.models.synthesis": [
        "datetime",
        "datetime",
        "typing",
        "pydantic",
        "pydantic",
        "pydantic",
        "src.services.shared.models.synthesis.SynthesisResult",
        "src.services.shared.models.synthesis.to_dict",
        "src.services.shared.models.synthesis.confidence",
        "src.services.shared.models.synthesis.ast",
        "src.services.shared.models.synthesis.create",
        "src.services.shared.models.synthesis.combine",
        "src.services.shared.models.synthesis.with_code"
      ],
      "src.services.shared.models.synthesis.SynthesisResult": [
        "BaseModel"
      ],
      "src.services.shared.concurrency.concurrency": [
        "asyncio",
        "concurrent.futures",
        "contextlib",
        "dataclasses",
        "enum",
        "functools",
        "logging",
        "os",
        "time",
        "typing",
        "src.services.shared.concurrency.concurrency.TaskPriority",
        "src.services.shared.concurrency.concurrency.TaskInfo",
        "src.services.shared.concurrency.concurrency.TaskPool",
        "src.services.shared.concurrency.concurrency.AsyncTaskManager",
        "src.services.shared.concurrency.concurrency.ParallelExecutor",
        "src.services.shared.concurrency.concurrency.parallel_context",
        "src.services.shared.concurrency.concurrency.run_parallel",
        "src.services.shared.concurrency.concurrency.__init__",
        "src.services.shared.concurrency.concurrency.submit",
        "src.services.shared.concurrency.concurrency.get_task_info",
        "src.services.shared.concurrency.concurrency.get_result",
        "src.services.shared.concurrency.concurrency.cancel_task",
        "src.services.shared.concurrency.concurrency.wait_for_tasks",
        "src.services.shared.concurrency.concurrency.shutdown",
        "src.services.shared.concurrency.concurrency.__init__",
        "src.services.shared.concurrency.concurrency.__init__",
        "src.services.shared.concurrency.concurrency.map",
        "src.services.shared.concurrency.concurrency.execute_all",
        "src.services.shared.concurrency.concurrency.shutdown",
        "src.services.shared.concurrency.concurrency.task_done_callback",
        "src.services.shared.concurrency.concurrency.process_chunk"
      ],
      "src.services.shared.concurrency.concurrency.TaskPriority": [
        "Enum"
      ],
      "src.services.shared.pulsar.event_bus": [
        "abc",
        "asyncio",
        "datetime",
        "json",
        "logging",
        "typing",
        "uuid",
        "pulsar",
        "infra.registration.schema_registry",
        "src.services.shared.pulsar.event_bus.EventBus",
        "src.services.shared.pulsar.event_bus.PulsarEventBus",
        "src.services.shared.pulsar.event_bus.subscribe",
        "src.services.shared.pulsar.event_bus.__init__",
        "src.services.shared.pulsar.event_bus.subscribe",
        "src.services.shared.pulsar.event_bus._create_event"
      ],
      "src.services.shared.pulsar.event_bus.EventBus": [
        "abc"
      ],
      "src.services.shared.pulsar.event_bus.PulsarEventBus": [
        "EventBus"
      ],
      "src.services.shared.pulsar.event_listener": [
        "asyncio",
        "base64",
        "hashlib",
        "hmac",
        "json",
        "logging",
        "os",
        "time",
        "typing",
        "pulsar",
        "pulsar.schema",
        "models",
        "models",
        "src.services.shared.pulsar.event_listener.EventVerificationError",
        "src.services.shared.pulsar.event_listener.SecureEventListener",
        "src.services.shared.pulsar.event_listener.__init__",
        "src.services.shared.pulsar.event_listener._get_topic_names",
        "src.services.shared.pulsar.event_listener._verify_signature",
        "src.services.shared.pulsar.event_listener.register_handler"
      ],
      "src.services.shared.pulsar.event_listener.EventVerificationError": [
        "Exception"
      ],
      "src.services.shared.pulsar.event_emitter": [
        "asyncio",
        "base64",
        "hashlib",
        "hmac",
        "json",
        "logging",
        "os",
        "time",
        "typing",
        "pulsar",
        "pulsar.schema",
        "models",
        "src.services.shared.pulsar.event_emitter.SecureEventEmitter",
        "src.services.shared.pulsar.event_emitter.__init__",
        "src.services.shared.pulsar.event_emitter._get_topic_name",
        "src.services.shared.pulsar.event_emitter._get_producer",
        "src.services.shared.pulsar.event_emitter._sign_message",
        "src.services.shared.pulsar.event_emitter._add_signature",
        "src.services.shared.pulsar.event_emitter.emit",
        "src.services.shared.pulsar.event_emitter.close"
      ],
      "src.services.shared.pulsar.client_factory": [
        "typing",
        "pulsar",
        "pulsar",
        "src.services.shared.pulsar.client_factory.create_pulsar_client"
      ],
      "src.services.shared.monitoring.metrics": [
        "asyncio",
        "functools",
        "logging",
        "time",
        "typing",
        "metrics_collector",
        "src.services.shared.monitoring.metrics.set_metrics_collector",
        "src.services.shared.monitoring.metrics.get_metrics_collector",
        "src.services.shared.monitoring.metrics.track_inference_time",
        "src.services.shared.monitoring.metrics._record_success",
        "src.services.shared.monitoring.metrics._record_error",
        "src.services.shared.monitoring.metrics.sync_wrapper"
      ],
      "src.services.shared.monitoring.embedding_client": [
        "asyncio",
        "logging",
        "time",
        "typing",
        "metrics_collector",
        "numpy",
        "src.services.shared.monitoring.embedding_client.EmbeddingClient",
        "src.services.shared.monitoring.embedding_client.__init__",
        "src.services.shared.monitoring.embedding_client.Timer",
        "src.services.shared.monitoring.embedding_client._initialize_models",
        "src.services.shared.monitoring.embedding_client._simulate_embedding",
        "src.services.shared.monitoring.embedding_client.__init__",
        "src.services.shared.monitoring.embedding_client.start",
        "src.services.shared.monitoring.embedding_client.stop",
        "src.services.shared.monitoring.embedding_client.duration"
      ],
      "src.services.shared.monitoring.health_monitor": [
        "asyncio",
        "logging",
        "time",
        "typing",
        "src.shared.metrics.metrics_collector",
        "src.services.shared.health.healthcheck",
        "fastapi",
        "src.services.shared.health.healthcheck",
        "src.services.shared.monitoring.health_monitor.HealthStatus",
        "src.services.shared.monitoring.health_monitor.HealthMonitor",
        "src.services.shared.monitoring.health_monitor.start_server",
        "src.services.shared.monitoring.health_monitor.__init__",
        "src.services.shared.monitoring.health_monitor.register_dependency",
        "src.services.shared.monitoring.health_monitor.register_subsystem",
        "src.services.shared.monitoring.health_monitor.get_detailed_status",
        "src.services.shared.monitoring.health_monitor.is_healthy",
        "src.services.shared.monitoring.health_monitor.is_available"
      ],
      "src.services.shared.monitoring.healthcheck": [
        "asyncio",
        "json",
        "logging",
        "os",
        "sys",
        "threading",
        "time",
        "typing",
        "fastapi",
        "fastapi",
        "fastapi",
        "psutil",
        "pydantic",
        "torch",
        "uvicorn",
        "src.services.shared.monitoring.healthcheck.HealthStatus",
        "src.services.shared.monitoring.healthcheck.update_stats",
        "src.services.shared.monitoring.healthcheck.start_server"
      ],
      "src.services.shared.monitoring.healthcheck.HealthStatus": [
        "BaseModel"
      ],
      "src.services.shared.monitoring.metrics_collector": [
        "logging",
        "prometheus_client.context_managers",
        "prometheus_client",
        "prometheus_client",
        "prometheus_client",
        "prometheus_client",
        "prometheus_client",
        "src.services.shared.monitoring.metrics_collector.MetricsCollector",
        "src.services.shared.monitoring.metrics_collector.__init__",
        "src.services.shared.monitoring.metrics_collector._init_metrics",
        "src.services.shared.monitoring.metrics_collector.record_request",
        "src.services.shared.monitoring.metrics_collector.start_request_timer",
        "src.services.shared.monitoring.metrics_collector.record_tokens",
        "src.services.shared.monitoring.metrics_collector.record_confidence",
        "src.services.shared.monitoring.metrics_collector.record_code_length",
        "src.services.shared.monitoring.metrics_collector.record_cache_hit",
        "src.services.shared.monitoring.metrics_collector.record_cache_miss",
        "src.services.shared.monitoring.metrics_collector.record_component_status",
        "src.services.shared.monitoring.metrics_collector.update_gpu_memory_usage",
        "src.services.shared.monitoring.metrics_collector.start_model_loading_timer",
        "src.services.shared.monitoring.metrics_collector.record_event_emitted",
        "src.services.shared.monitoring.metrics_collector.record_event_received",
        "src.services.shared.monitoring.metrics_collector.start_event_processing_timer",
        "src.services.shared.monitoring.metrics_collector.set_component_up",
        "src.services.shared.monitoring.metrics_collector.record_error",
        "src.services.shared.monitoring.metrics_collector.start_vector_db_timer",
        "src.services.shared.monitoring.metrics_collector.record_vector_db_operation"
      ],
      "src.services.shared.monitoring.circuit_breaker": [
        "asyncio",
        "enum",
        "functools",
        "logging",
        "time",
        "typing",
        "src.shared.metrics.metrics_collector",
        "src.services.shared.monitoring.circuit_breaker.CircuitState",
        "src.services.shared.monitoring.circuit_breaker.CircuitBreakerError",
        "src.services.shared.monitoring.circuit_breaker.CircuitBreaker",
        "src.services.shared.monitoring.circuit_breaker.circuit_breaker",
        "src.services.shared.monitoring.circuit_breaker.async_circuit_breaker",
        "src.services.shared.monitoring.circuit_breaker.create_circuit_breaker_from_config",
        "src.services.shared.monitoring.circuit_breaker.__init__",
        "src.services.shared.monitoring.circuit_breaker.is_open",
        "src.services.shared.monitoring.circuit_breaker.get_state",
        "src.services.shared.monitoring.circuit_breaker.get_metrics",
        "src.services.shared.monitoring.circuit_breaker.__str__",
        "src.services.shared.monitoring.circuit_breaker.decorator",
        "src.services.shared.monitoring.circuit_breaker.decorator",
        "src.services.shared.monitoring.circuit_breaker.wrapper"
      ],
      "src.services.shared.monitoring.circuit_breaker.CircuitState": [
        "Enum"
      ],
      "src.services.shared.monitoring.circuit_breaker.CircuitBreakerError": [
        "Exception"
      ],
      "src.services.shared.logging.logger": [
        "asyncio",
        "os",
        "json",
        "signal",
        "sys",
        "datetime",
        "pulsar",
        "motor.motor_asyncio",
        "logging",
        "src.services.shared.logging.logger.LoggerService",
        "src.services.shared.logging.logger.__init__"
      ],
      "src.services.shared.logging.db_handler": [
        "asyncio",
        "json",
        "logging",
        "os",
        "pulsar",
        "datetime",
        "src.services.shared.logging.db_handler.PulsarLogHandler",
        "src.services.shared.logging.db_handler.__init__",
        "src.services.shared.logging.db_handler._connect",
        "src.services.shared.logging.db_handler.emit",
        "src.services.shared.logging.db_handler.format",
        "src.services.shared.logging.db_handler.format_message",
        "src.services.shared.logging.db_handler.close"
      ],
      "src.services.shared.logging.db_handler.PulsarLogHandler": [
        "logging.Handler"
      ],
      "src.services.shared.validation.validator": [
        "functools",
        "inspect",
        "pathlib",
        "re",
        "sys",
        "typing",
        "logging.logger",
        "src.services.shared.validation.validator.ValidationResult",
        "src.services.shared.validation.validator.ValidationError",
        "src.services.shared.validation.validator.Validator",
        "src.services.shared.validation.validator.TypeValidator",
        "src.services.shared.validation.validator.StringValidator",
        "src.services.shared.validation.validator.NumberValidator",
        "src.services.shared.validation.validator.validate_input",
        "src.services.shared.validation.validator.__init__",
        "src.services.shared.validation.validator.__bool__",
        "src.services.shared.validation.validator.add_error",
        "src.services.shared.validation.validator.add_errors",
        "src.services.shared.validation.validator.merge",
        "src.services.shared.validation.validator.error_message",
        "src.services.shared.validation.validator.__init__",
        "src.services.shared.validation.validator.__init__",
        "src.services.shared.validation.validator.validate",
        "src.services.shared.validation.validator.__call__",
        "src.services.shared.validation.validator.__init__",
        "src.services.shared.validation.validator.validate",
        "src.services.shared.validation.validator.__init__",
        "src.services.shared.validation.validator.validate",
        "src.services.shared.validation.validator.__init__",
        "src.services.shared.validation.validator.validate",
        "src.services.shared.validation.validator.decorator",
        "src.services.shared.validation.validator.wrapper"
      ],
      "src.services.shared.validation.validator.ValidationError": [
        "Exception"
      ],
      "src.services.shared.validation.validator.TypeValidator": [
        "Validator"
      ],
      "src.services.shared.validation.validator.StringValidator": [
        "Validator"
      ],
      "src.services.shared.validation.validator.NumberValidator": [
        "Validator"
      ],
      "src.services.shared.validation.__init__": [
        "validator",
        "validator",
        "validator",
        "validator",
        "validator",
        "validator"
      ],
      "src.services.shared.models.tests.event_avro_test": [
        "pydantic",
        "pytest",
        "src.services.shared.models.event_avro",
        "src.services.shared.models.event_avro_converter",
        "src.services.shared.models.event_avro_converter",
        "src.services.shared.models.events",
        "src.services.shared.models.tests.event_avro_test.test_event_model_validation",
        "src.services.shared.models.tests.event_avro_test.test_avro_serialization"
      ],
      "src.services.shared.models.tests.test_event_converter": [
        "datetime",
        "datetime",
        "enum",
        "infra.registration.event_converter",
        "src.services.shared.models.event_avro",
        "src.services.shared.models.events",
        "src.services.shared.models.events",
        "src.services.shared.models.events",
        "src.services.shared.models.tests.test_event_converter.TestEnum",
        "src.services.shared.models.tests.test_event_converter.test_to_avro_basic",
        "src.services.shared.models.tests.test_event_converter.test_from_avro_basic",
        "src.services.shared.models.tests.test_event_converter.test_ensure_avro_compatible",
        "src.services.shared.models.tests.test_event_converter.test_roundtrip"
      ],
      "src.services.shared.models.tests.test_event_converter.TestEnum": [
        "str",
        "Enum"
      ],
      "src.services.agents.app.event_service": [
        "os",
        "asyncio",
        "logging",
        "typing",
        "src.services.shared.client_factory",
        "src.services.shared.models.base",
        "src.services.shared.event_emitter",
        "src.services.shared.event_listener",
        "src.services.agents.app.event_service.AgentEventService",
        "src.services.agents.app.event_service.__init__",
        "src.services.agents.app.event_service.register_handler"
      ],
      "src.services.agents.app.agent_generator": [
        "os",
        "logging",
        "jinja2",
        "uuid",
        "typing",
        "agent_template_service.models.agent_blocks",
        "agent_template_service.services.block_registry",
        "agent_template_service.services.template_service",
        "agent_template_service.services.event_service",
        "agent_template_service.models.events",
        "src.services.agents.app.agent_generator.AgentGenerator",
        "src.services.agents.app.agent_generator.__init__",
        "src.services.agents.app.agent_generator.get_instance",
        "src.services.agents.app.agent_generator.list_instances"
      ],
      "src.services.agents.app.agent_workflow": [
        "logging",
        "typing",
        "uuid",
        "src.services.shared.models.enums",
        "src.services.shared.workflow_registry"
      ],
      "src.services.agents.app.agent_template": [
        "os",
        "json",
        "logging",
        "uuid",
        "datetime",
        "typing",
        "agent_template_service.models.agent_blocks",
        "agent_template_service.services.event_service",
        "agent_template_service.services.block_registry",
        "agent_template_service.models.events",
        "src.services.agents.app.agent_template.TemplateService",
        "src.services.agents.app.agent_template.__init__",
        "src.services.agents.app.agent_template._load_templates",
        "src.services.agents.app.agent_template._save_template",
        "src.services.agents.app.agent_template.get_template",
        "src.services.agents.app.agent_template.list_templates",
        "src.services.agents.app.agent_template.delete_template"
      ],
      "src.services.agents.app.block_registry": [
        "os",
        "json",
        "logging",
        "uuid",
        "datetime",
        "typing",
        "agent_template_service.models.agent_blocks",
        "agent_template_service.services.event_service",
        "agent_template_service.models.events",
        "src.services.agents.app.block_registry.BlockRegistry",
        "src.services.agents.app.block_registry.__init__",
        "src.services.agents.app.block_registry._load_blocks",
        "src.services.agents.app.block_registry._save_block",
        "src.services.agents.app.block_registry.get_block",
        "src.services.agents.app.block_registry.list_blocks",
        "src.services.agents.app.block_registry.delete_block"
      ],
      "src.services.agents.app.models.events": [
        "datetime",
        "typing",
        "pydantic",
        "src.services.shared.models.base",
        "src.services.shared.models.enums",
        "src.services.agents.app.models.events.AgentBlockCreatedEvent",
        "src.services.agents.app.models.events.AgentBlockUpdatedEvent",
        "src.services.agents.app.models.events.AgentTemplateCreatedEvent",
        "src.services.agents.app.models.events.AgentTemplateUpdatedEvent",
        "src.services.agents.app.models.events.AgentInstanceCreatedEvent",
        "src.services.agents.app.models.events.AgentInstanceStartedEvent",
        "src.services.agents.app.models.events.AgentInstanceCompletedEvent",
        "src.services.agents.app.models.events.AgentInstanceFailedEvent"
      ],
      "src.services.agents.app.models.events.AgentBlockCreatedEvent": [
        "BaseEvent"
      ],
      "src.services.agents.app.models.events.AgentBlockUpdatedEvent": [
        "BaseEvent"
      ],
      "src.services.agents.app.models.events.AgentTemplateCreatedEvent": [
        "BaseEvent"
      ],
      "src.services.agents.app.models.events.AgentTemplateUpdatedEvent": [
        "BaseEvent"
      ],
      "src.services.agents.app.models.events.AgentInstanceCreatedEvent": [
        "BaseEvent"
      ],
      "src.services.agents.app.models.events.AgentInstanceStartedEvent": [
        "BaseEvent"
      ],
      "src.services.agents.app.models.events.AgentInstanceCompletedEvent": [
        "BaseEvent"
      ],
      "src.services.agents.app.models.events.AgentInstanceFailedEvent": [
        "BaseEvent"
      ],
      "src.services.agents.app.models.agent_blocks": [
        "datetime",
        "enum",
        "typing",
        "pydantic",
        "src.services.agents.app.models.agent_blocks.BlockType",
        "src.services.agents.app.models.agent_blocks.InputParameter",
        "src.services.agents.app.models.agent_blocks.OutputParameter",
        "src.services.agents.app.models.agent_blocks.BlockMetadata",
        "src.services.agents.app.models.agent_blocks.AgentBlock",
        "src.services.agents.app.models.agent_blocks.AgentTemplate",
        "src.services.agents.app.models.agent_blocks.AgentInstance"
      ],
      "src.services.agents.app.models.agent_blocks.BlockType": [
        "str",
        "Enum"
      ],
      "src.services.agents.app.models.agent_blocks.InputParameter": [
        "BaseModel"
      ],
      "src.services.agents.app.models.agent_blocks.OutputParameter": [
        "BaseModel"
      ],
      "src.services.agents.app.models.agent_blocks.BlockMetadata": [
        "BaseModel"
      ],
      "src.services.agents.app.models.agent_blocks.AgentBlock": [
        "BaseModel"
      ],
      "src.services.agents.app.models.agent_blocks.AgentTemplate": [
        "BaseModel"
      ],
      "src.services.agents.app.models.agent_blocks.AgentInstance": [
        "BaseModel"
      ],
      "src.services.spec_registry.app.spec_registry": [
        "asyncio",
        "datetime",
        "json",
        "re",
        "uuid",
        "typing",
        "src.services.shared.logging.logger",
        "src.services.spec_registry.app.models",
        "src.services.spec_registry.app.spec_registry.SpecRegistry",
        "src.services.spec_registry.app.spec_registry.__init__",
        "src.services.spec_registry.app.spec_registry._init_validators",
        "src.services.spec_registry.app.spec_registry.get_fields_for_spec_type",
        "src.services.spec_registry.app.spec_registry._get_fields_for_spec_type",
        "src.services.spec_registry.app.spec_registry._get_container_field_definitions",
        "src.services.spec_registry.app.spec_registry._get_api_field_definitions",
        "src.services.spec_registry.app.spec_registry._get_database_field_definitions",
        "src.services.spec_registry.app.spec_registry._validate_spec",
        "src.services.spec_registry.app.spec_registry._validate_required",
        "src.services.spec_registry.app.spec_registry._validate_min_length",
        "src.services.spec_registry.app.spec_registry._validate_max_length",
        "src.services.spec_registry.app.spec_registry._validate_min_value",
        "src.services.spec_registry.app.spec_registry._validate_max_value",
        "src.services.spec_registry.app.spec_registry._validate_pattern",
        "src.services.spec_registry.app.spec_registry._validate_string",
        "src.services.spec_registry.app.spec_registry._validate_int",
        "src.services.spec_registry.app.spec_registry._validate_float",
        "src.services.spec_registry.app.spec_registry._validate_boolean",
        "src.services.spec_registry.app.spec_registry._validate_list",
        "src.services.spec_registry.app.spec_registry._validate_json",
        "src.services.spec_registry.app.spec_registry._validate_code",
        "src.services.spec_registry.app.spec_registry._validate_datetime",
        "src.services.spec_registry.app.spec_registry._validate_reference"
      ],
      "src.services.spec_registry.app.models": [
        "datetime",
        "enum",
        "typing",
        "uuid",
        "pydantic",
        "re",
        "re",
        "re",
        "re",
        "re",
        "src.services.spec_registry.app.models.FieldType",
        "src.services.spec_registry.app.models.SpecStatus",
        "src.services.spec_registry.app.models.FieldConstraint",
        "src.services.spec_registry.app.models.RequiredConstraint",
        "src.services.spec_registry.app.models.MinLengthConstraint",
        "src.services.spec_registry.app.models.MaxLengthConstraint",
        "src.services.spec_registry.app.models.PatternConstraint",
        "src.services.spec_registry.app.models.MinValueConstraint",
        "src.services.spec_registry.app.models.MaxValueConstraint",
        "src.services.spec_registry.app.models.FieldDefinition",
        "src.services.spec_registry.app.models.SpecTemplate",
        "src.services.spec_registry.app.models.Spec",
        "src.services.spec_registry.app.models.ValidationResult",
        "src.services.spec_registry.app.models.validate_field_names",
        "src.services.spec_registry.app.models.to_internal_format",
        "src.services.spec_registry.app.models._constraint_to_string",
        "src.services.spec_registry.app.models.from_internal_format",
        "src.services.spec_registry.app.models._string_to_constraint"
      ],
      "src.services.spec_registry.app.models.FieldType": [
        "str",
        "Enum"
      ],
      "src.services.spec_registry.app.models.SpecStatus": [
        "str",
        "Enum"
      ],
      "src.services.spec_registry.app.models.FieldConstraint": [
        "BaseModel"
      ],
      "src.services.spec_registry.app.models.RequiredConstraint": [
        "FieldConstraint"
      ],
      "src.services.spec_registry.app.models.MinLengthConstraint": [
        "FieldConstraint"
      ],
      "src.services.spec_registry.app.models.MaxLengthConstraint": [
        "FieldConstraint"
      ],
      "src.services.spec_registry.app.models.PatternConstraint": [
        "FieldConstraint"
      ],
      "src.services.spec_registry.app.models.MinValueConstraint": [
        "FieldConstraint"
      ],
      "src.services.spec_registry.app.models.MaxValueConstraint": [
        "FieldConstraint"
      ],
      "src.services.spec_registry.app.models.FieldDefinition": [
        "BaseModel"
      ],
      "src.services.spec_registry.app.models.SpecTemplate": [
        "BaseModel"
      ],
      "src.services.spec_registry.app.models.Spec": [
        "BaseModel"
      ],
      "src.services.spec_registry.app.models.ValidationResult": [
        "BaseModel"
      ],
      "src.services.spec_registry.app.postgre_spec_repo": [
        "logging",
        "datetime",
        "typing",
        "json",
        "asyncpg",
        "pydantic",
        "src.services.spec_registry.app.postgre_spec_repo.PostgreSQLSpecRepository",
        "src.services.spec_registry.app.postgre_spec_repo.__init__",
        "src.services.spec_registry.app.postgre_spec_repo._format_record"
      ],
      "src.services.spec_registry.app.main": [
        "asyncio",
        "os",
        "logging",
        "src.services.spec_registry.app.spec_registry_event_adapter"
      ],
      "src.services.aggregators.app.response_aggregator": [
        "asyncio",
        "xyz",
        "time",
        "typing",
        "datetime",
        "redis.asyncio",
        "motor.motor_asyncio",
        "src.services.shared.models",
        "src.services.shared.models",
        "src.services.shared.logging.logger",
        "src.services.shared.monitoring.metrics_collector",
        "src.services.aggregators.app.response_aggregator.ResponseAggregator",
        "src.services.aggregators.app.response_aggregator.__init__",
        "src.services.aggregators.app.response_aggregator.register_response_processor",
        "src.services.aggregators.app.response_aggregator._get_response_event_types",
        "src.services.aggregators.app.response_aggregator._initialize_request",
        "src.services.aggregators.app.response_aggregator._aggregate_responses",
        "src.services.aggregators.app.response_aggregator._record_service_failure",
        "src.services.aggregators.app.response_aggregator._is_circuit_open"
      ],
      "src.services.aggregators.app.response_aggregator.ResponseAggregator": [
        "BaseComponent"
      ],
      "src.services.feedback_collector.app.feedback_collector": [
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "sys",
        "typing",
        "uuid",
        "src.services.shared.constants.base_component",
        "src.services.shared.constants.enums",
        "src.services.shared.constants.models",
        "src.services.shared.constants.models",
        "numpy",
        "sklearn.cluster",
        "psutil",
        "datetime",
        "glob",
        "zipfile",
        "glob",
        "src.services.feedback_collector.app.feedback_collector._sanitize_context",
        "src.services.feedback_collector.app.feedback_collector._categorize_error",
        "src.services.feedback_collector.app.feedback_collector._check_type_violations",
        "src.services.feedback_collector.app.feedback_collector._extract_common_values",
        "src.services.feedback_collector.app.feedback_collector._is_negative_feedback",
        "src.services.feedback_collector.app.feedback_collector._check_boundary_violations",
        "src.services.feedback_collector.app.feedback_collector._extract_error_patterns",
        "src.services.feedback_collector.app.feedback_collector._get_memory_usage",
        "src.services.feedback_collector.app.feedback_collector._get_system_load",
        "src.services.feedback_collector.app.feedback_collector.get_feedback_statistics",
        "src.services.feedback_collector.app.feedback_collector.FeedbackCollector",
        "src.services.feedback_collector.app.feedback_collector.__init__",
        "src.services.feedback_collector.app.feedback_collector._initialize_storage",
        "src.services.feedback_collector.app.feedback_collector.record_success",
        "src.services.feedback_collector.app.feedback_collector.record_failure",
        "src.services.feedback_collector.app.feedback_collector.record_user_feedback",
        "src.services.feedback_collector.app.feedback_collector.export_feedback_for_training",
        "src.services.feedback_collector.app.feedback_collector._store_feedback",
        "src.services.feedback_collector.app.feedback_collector._maybe_compress_old_data",
        "src.services.feedback_collector.app.feedback_collector._load_feedback_data",
        "src.services.feedback_collector.app.feedback_collector._analyze_negative_feedback",
        "src.services.feedback_collector.app.feedback_collector._analyze_failure_patterns",
        "src.services.feedback_collector.app.feedback_collector._schedule_pattern_analysis"
      ],
      "src.services.feedback_collector.app.feedback_collector.FeedbackCollector": [
        "BaseComponent"
      ],
      "src.services.project_manager.app.project_manager": [
        "asyncio",
        "datetime",
        "json",
        "logging",
        "os",
        "typing",
        "uuid",
        "infra.storage.repository",
        "models.project",
        "models.project",
        "models.project",
        "models.project",
        "models.project",
        "models.project",
        "models.project",
        "models.project",
        "models.spec_sheet",
        "models.spec_sheet",
        "models.spec_sheet",
        "models.spec_sheet",
        "src.services.project_manager.app.project_manager.ProjectManager",
        "src.services.project_manager.app.project_manager.__init__",
        "src.services.project_manager.app.project_manager._has_api_requirements",
        "src.services.project_manager.app.project_manager._has_database_requirements",
        "src.services.project_manager.app.project_manager._has_auth_requirements",
        "src.services.project_manager.app.project_manager._has_microservice_requirements",
        "src.services.project_manager.app.project_manager._has_event_driven_requirements",
        "src.services.project_manager.app.project_manager._has_requirements_with_keywords",
        "src.services.project_manager.app.project_manager._get_requirement_ids_by_keyword",
        "src.services.project_manager.app.project_manager._estimate_api_endpoint_count",
        "src.services.project_manager.app.project_manager._estimate_model_count",
        "src.services.project_manager.app.project_manager._estimate_page_count",
        "src.services.project_manager.app.project_manager._estimate_component_count",
        "src.services.project_manager.app.project_manager._estimate_event_count",
        "src.services.project_manager.app.project_manager._determine_database_type",
        "src.services.project_manager.app.project_manager._determine_database_provider",
        "src.services.project_manager.app.project_manager._determine_auth_type",
        "src.services.project_manager.app.project_manager._determine_auth_provider",
        "src.services.project_manager.app.project_manager._determine_styling_framework",
        "src.services.project_manager.app.project_manager._determine_cloud_provider",
        "src.services.project_manager.app.project_manager._recommend_technology_stack"
      ],
      "src.pulsar.app.config": [
        "logging",
        "os",
        "typing",
        "pydantic",
        "pydantic",
        "yaml",
        "src.pulsar.app.config.PulsarAuthConfig",
        "src.pulsar.app.config.PulsarTopicConfig",
        "src.pulsar.app.config.PulsarConfig",
        "src.pulsar.app.config.PulsarConfigManager",
        "src.pulsar.app.config.__init__",
        "src.pulsar.app.config.load",
        "src.pulsar.app.config.get_client_config",
        "src.pulsar.app.config.get_auth_params",
        "src.pulsar.app.config.get_consumer_topics",
        "src.pulsar.app.config.get_producer_topics"
      ],
      "src.pulsar.app.config.PulsarAuthConfig": [
        "BaseModel"
      ],
      "src.pulsar.app.config.PulsarTopicConfig": [
        "BaseModel"
      ],
      "src.pulsar.app.config.PulsarConfig": [
        "BaseModel"
      ],
      "src.pulsar.app.client": [
        "asyncio",
        "json",
        "logging",
        "typing",
        "pulsar",
        "src.services.shared.pulsar.event_bus",
        "src.pulsar.app.client.PulsarEventBus",
        "src.pulsar.app.client.__init__",
        "src.pulsar.app.client._get_topic_name",
        "src.pulsar.app.client.subscribe",
        "src.pulsar.app.client._start_consumer_loop",
        "src.pulsar.app.client._create_event_object"
      ],
      "src.pulsar.app.client.PulsarEventBus": [
        "EventBus"
      ],
      "src.pulsar.app.NEEDS_FIXED": [
        "asyncio",
        "datetime",
        "datetime",
        "logging",
        "os",
        "time",
        "typing",
        "fastapi",
        "fastapi",
        "fastapi",
        "fastapi",
        "fastapi",
        "fastapi.middleware.cors",
        "fastapi.responses",
        "pulsar",
        "uuid6",
        "uvicorn",
        "yaml",
        "api.models",
        "api.models",
        "api.models",
        "api.models",
        "api.models",
        "api.models",
        "api.models",
        "api.models",
        "core.intent_analyzer",
        "core.intent_analyzer",
        "core.pattern_matcher",
        "events.publisher.events",
        "models.embedding_client",
        "src.pulsar.app.NEEDS_FIXED.load_config",
        "src.pulsar.app.NEEDS_FIXED.AppState",
        "src.pulsar.app.NEEDS_FIXED.__init__"
      ],
      "src.pulsar.app.analytics.evolution": [
        "enum",
        "json",
        "time",
        "typing",
        "pydantic",
        "pydantic",
        "src.pulsar.app.analytics.evolution.EvolutionSuggestionType",
        "src.pulsar.app.analytics.evolution.EvolutionSuggestion",
        "src.pulsar.app.analytics.evolution.FieldEvolutionData",
        "src.pulsar.app.analytics.evolution.SectionEvolutionData",
        "src.pulsar.app.analytics.evolution.SpecSheetDefinitionEvolutionAnalysis",
        "src.pulsar.app.analytics.evolution.to_dict",
        "src.pulsar.app.analytics.evolution.to_json",
        "src.pulsar.app.analytics.evolution.from_dict",
        "src.pulsar.app.analytics.evolution.from_json",
        "src.pulsar.app.analytics.evolution.to_dict",
        "src.pulsar.app.analytics.evolution.from_dict",
        "src.pulsar.app.analytics.evolution.to_dict",
        "src.pulsar.app.analytics.evolution.from_dict",
        "src.pulsar.app.analytics.evolution.to_dict",
        "src.pulsar.app.analytics.evolution.to_json",
        "src.pulsar.app.analytics.evolution.from_dict",
        "src.pulsar.app.analytics.evolution.from_json"
      ],
      "src.pulsar.app.analytics.evolution.EvolutionSuggestionType": [
        "str",
        "Enum"
      ],
      "src.pulsar.app.analytics.evolution.EvolutionSuggestion": [
        "BaseModel"
      ],
      "src.pulsar.app.analytics.evolution.FieldEvolutionData": [
        "BaseModel"
      ],
      "src.pulsar.app.analytics.evolution.SectionEvolutionData": [
        "BaseModel"
      ],
      "src.pulsar.app.analytics.evolution.SpecSheetDefinitionEvolutionAnalysis": [
        "BaseModel"
      ],
      "src.pulsar.app.analytics.usage": [
        "json",
        "time",
        "typing",
        "pydantic",
        "pydantic",
        "pydantic",
        "src.pulsar.app.analytics.usage.FieldUsageStats",
        "src.pulsar.app.analytics.usage.SectionUsageStats",
        "src.pulsar.app.analytics.usage.CompletionPathStats",
        "src.pulsar.app.analytics.usage.SpecSheetDefinitionUsageAnalytics",
        "src.pulsar.app.analytics.usage.to_dict",
        "src.pulsar.app.analytics.usage.from_dict",
        "src.pulsar.app.analytics.usage.to_dict",
        "src.pulsar.app.analytics.usage.from_dict",
        "src.pulsar.app.analytics.usage.to_dict",
        "src.pulsar.app.analytics.usage.from_dict",
        "src.pulsar.app.analytics.usage.to_dict",
        "src.pulsar.app.analytics.usage.to_json",
        "src.pulsar.app.analytics.usage.from_dict",
        "src.pulsar.app.analytics.usage.from_json"
      ],
      "src.pulsar.app.analytics.usage.FieldUsageStats": [
        "BaseModel"
      ],
      "src.pulsar.app.analytics.usage.SectionUsageStats": [
        "BaseModel"
      ],
      "src.pulsar.app.analytics.usage.CompletionPathStats": [
        "BaseModel"
      ],
      "src.pulsar.app.analytics.usage.SpecSheetDefinitionUsageAnalytics": [
        "BaseModel"
      ],
      "src.api_gateway.security.app.hmac_signer": [
        "argparse",
        "base64",
        "datetime",
        "hashlib",
        "hmac",
        "os",
        "time",
        "typing",
        "urllib.parse",
        "requests",
        "json",
        "src.api_gateway.security.app.hmac_signer.HmacSigner",
        "src.api_gateway.security.app.hmac_signer.__init__",
        "src.api_gateway.security.app.hmac_signer.sign_request",
        "src.api_gateway.security.app.hmac_signer.request"
      ],
      "src.api_gateway.neural_interpretor.app.nueral_interpretor": [
        "asyncio",
        "datetime",
        "json",
        "time",
        "typing",
        "uuid",
        "pulsar",
        "pydantic",
        "pydantic",
        "src.services.shared.concurrency.concurrency",
        "src.services.shared.logging.logger",
        "src.services.shared.models",
        "src.services.shared.models",
        "src.services.shared.models",
        "src.services.shared.models",
        "src.services.shared.monitoring.metrics",
        "src.services.shared.validation.validator",
        "src.services.shared.validation.validator",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.IntentDimension",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.DomainDimension",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.ComplexityDimension",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.ActionabilityDimension",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.UrgencyDimension",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.SpecificityDimension",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.MultimodalityDimension",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.TaskMetadata",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.NeuralInterpretor",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.NeuralInterpreter",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.to_dict",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.__init__",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor._simple_token_counter",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.analyze_task",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_intent",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_domain",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_complexity",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_actionability",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_urgency",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_specificity",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_multimodality",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor._analyze_workflow_patterns",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.determine_service_route",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.__init__",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.determine_processing_mode",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.estimate_processing_time",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.determine_priority",
        "src.api_gateway.neural_interpretor.app.nueral_interpretor.validate_request"
      ],
      "src.api_gateway.neural_interpretor.app.nueral_interpretor.IntentDimension": [
        "BaseModel"
      ],
      "src.api_gateway.neural_interpretor.app.nueral_interpretor.DomainDimension": [
        "BaseModel"
      ],
      "src.api_gateway.neural_interpretor.app.nueral_interpretor.ComplexityDimension": [
        "BaseModel"
      ],
      "src.api_gateway.neural_interpretor.app.nueral_interpretor.ActionabilityDimension": [
        "BaseModel"
      ],
      "src.api_gateway.neural_interpretor.app.nueral_interpretor.UrgencyDimension": [
        "BaseModel"
      ],
      "src.api_gateway.neural_interpretor.app.nueral_interpretor.SpecificityDimension": [
        "BaseModel"
      ],
      "src.api_gateway.neural_interpretor.app.nueral_interpretor.MultimodalityDimension": [
        "BaseModel"
      ],
      "src.api_gateway.neural_interpretor.app.nueral_interpretor.TaskMetadata": [
        "BaseModel"
      ],
      "src.api_gateway.neural_interpretor.app.pattern_matcher": [
        "asyncio",
        "datetime",
        "logging",
        "typing",
        "uuid",
        "neo4j",
        "neo4j",
        "numpy",
        "src.api_gateway.neural_interpretor.app.pattern_matcher.PatternMatcher",
        "src.api_gateway.neural_interpretor.app.pattern_matcher.__init__"
      ],
      "src.api_gateway.neural_interpretor.app.code_generation": [
        "asyncio",
        "datetime",
        "enum",
        "json",
        "logging",
        "time",
        "typing",
        "uuid",
        "pulsar",
        "pydantic",
        "pydantic",
        "src.api_gateway.neural_interpretor.app.code_generation.CodeGenRequestType",
        "src.api_gateway.neural_interpretor.app.code_generation.ProgrammingLanguage",
        "src.api_gateway.neural_interpretor.app.code_generation.CodeGenRequest",
        "src.api_gateway.neural_interpretor.app.code_generation.CodeGenRouter",
        "src.api_gateway.neural_interpretor.app.code_generation.Config",
        "src.api_gateway.neural_interpretor.app.code_generation.__init__",
        "src.api_gateway.neural_interpretor.app.code_generation.determine_request_type",
        "src.api_gateway.neural_interpretor.app.code_generation.determine_language",
        "src.api_gateway.neural_interpretor.app.code_generation.get_topic_for_request"
      ],
      "src.api_gateway.neural_interpretor.app.code_generation.CodeGenRequestType": [
        "str",
        "Enum"
      ],
      "src.api_gateway.neural_interpretor.app.code_generation.ProgrammingLanguage": [
        "str",
        "Enum"
      ],
      "src.api_gateway.neural_interpretor.app.code_generation.CodeGenRequest": [
        "BaseModel"
      ],
      "src.api_gateway.neural_interpretor.app.intent_analyzer": [
        "datetime",
        "enum",
        "logging",
        "typing",
        "numpy",
        "pydantic",
        "src.services.shared.monitoring.embedding_client",
        "src.services.shared.monitoring.metrics",
        "uuid6",
        "pattern_matcher",
        "src.api_gateway.neural_interpretor.app.intent_analyzer.ProcessingMode",
        "src.api_gateway.neural_interpretor.app.intent_analyzer.QueryIntent",
        "src.api_gateway.neural_interpretor.app.intent_analyzer.IntentAnalyzer",
        "src.api_gateway.neural_interpretor.app.intent_analyzer.__init__",
        "src.api_gateway.neural_interpretor.app.intent_analyzer._count_complexity_keywords",
        "src.api_gateway.neural_interpretor.app.intent_analyzer._detect_conversational_markers",
        "src.api_gateway.neural_interpretor.app.intent_analyzer._calculate_complexity_score",
        "src.api_gateway.neural_interpretor.app.intent_analyzer._estimate_processing_time"
      ],
      "src.api_gateway.neural_interpretor.app.intent_analyzer.ProcessingMode": [
        "str",
        "Enum"
      ],
      "src.api_gateway.neural_interpretor.app.intent_analyzer.QueryIntent": [
        "BaseModel"
      ],
      "bin.cli.synthesize": [
        "argparse",
        "json",
        "pathlib",
        "sys",
        "src.orchestration",
        "logging",
        "bin.cli.synthesize.parse_args",
        "bin.cli.synthesize.main"
      ],
      "bin.cli.standalonewithcli": [
        "argparse",
        "json",
        "logging",
        "os",
        "pathlib",
        "sys",
        "torch",
        "src.services.neural_code_generator.enhanced_neural_code_generator",
        "bin.cli.standalonewithcli.parse_args",
        "bin.cli.standalonewithcli.load_specification",
        "bin.cli.standalonewithcli.setup_neural_code_generator",
        "bin.cli.standalonewithcli.save_output",
        "bin.cli.standalonewithcli.main"
      ],
      "bin.pulsar.service_module": [
        "asyncio",
        "json",
        "logging",
        "os",
        "signal",
        "sys",
        "typing",
        "program_synthesis_system.components.neural_code_generator.enhanced_neural_code_generator",
        "bin.pulsar.service_module.signal_handler"
      ],
      "bin.pulsar.neural_integration": [
        "argparse",
        "logging",
        "pathlib",
        "sys",
        "program_synthesis_system.src.components.component_factory",
        "program_synthesis_system.src.components.neural_code_generator.neural_code_generator",
        "program_synthesis_system.src.shared.enums",
        "yaml",
        "json",
        "bin.pulsar.neural_integration.parse_args",
        "bin.pulsar.neural_integration.load_configuration",
        "bin.pulsar.neural_integration.load_specification",
        "bin.pulsar.neural_integration.setup_neural_code_generator",
        "bin.pulsar.neural_integration.main"
      ],
      "infra.registration.registration": [
        "asyncio",
        "logging",
        "time",
        "threading",
        "typing",
        "src.services.shared.logging.logger",
        "src.services.shared.models.base",
        "src.services.shared.models.enums",
        "src.services.shared.models.enums",
        "src.services.shared.monitoring.circuit_breaker",
        "src.services.shared.monitoring.health_monitor",
        "src.services.shared.monitoring.metrics_collector",
        "src.services.shared.pulsar.client_factory",
        "src.services.shared.pulsar.event_emitter",
        "infra.registration.registration.SingletonMeta",
        "infra.registration.registration.ServiceRegistry",
        "infra.registration.registration.__call__",
        "infra.registration.registration.__init__",
        "infra.registration.registration._setup_logging",
        "infra.registration.registration.get_service",
        "infra.registration.registration.get_service_with_type",
        "infra.registration.registration.get_services_by_type",
        "infra.registration.registration.get_service_health",
        "infra.registration.registration.get_service_metadata",
        "infra.registration.registration.list_services",
        "infra.registration.registration.run_async"
      ],
      "infra.registration.registration.SingletonMeta": [
        "type"
      ],
      "infra.registration.schema_registry": [
        "json",
        "logging",
        "typing",
        "pydantic",
        "requests",
        "infra.registration.schema_registry.SchemaRegistryClient",
        "infra.registration.schema_registry.register_pydantic_model",
        "infra.registration.schema_registry.convert_pydantic_schema_to_avro",
        "infra.registration.schema_registry.map_pydantic_type_to_avro",
        "infra.registration.schema_registry.__init__",
        "infra.registration.schema_registry.register_schema",
        "infra.registration.schema_registry.register_model_schema",
        "infra.registration.schema_registry.get_model_schema_id",
        "infra.registration.schema_registry.get_model_schema_subject",
        "infra.registration.schema_registry.validate_instance_against_schema",
        "infra.registration.schema_registry.get_schema_id",
        "infra.registration.schema_registry.get_schema",
        "infra.registration.schema_registry.validate_event_against_schema"
      ],
      "infra.pulsar.event_client": [
        "logging",
        "typing",
        "infra.registration.schema_registry",
        "src.services.shared.models",
        "src.services.shared.models",
        "src.services.shared.models.events",
        "pulsar",
        "pulsar.schema",
        "pulsar",
        "threading",
        "infra.pulsar.event_client.PulsarEventClient",
        "infra.pulsar.event_client.__init__",
        "infra.pulsar.event_client.get_topic_name",
        "infra.pulsar.event_client.get_producer",
        "infra.pulsar.event_client.send_event",
        "infra.pulsar.event_client.subscribe",
        "infra.pulsar.event_client._receive_loop",
        "infra.pulsar.event_client.close"
      ],
      "project_scripts.event_templates.request_template": [
        "argparse",
        "datetime",
        "json",
        "sys",
        "time",
        "uuid",
        "pulsar",
        "project_scripts.event_templates.request_template.main"
      ],
      "project_scripts.event_templates.event_template_generator": [
        "argparse",
        "asyncio",
        "datetime",
        "json",
        "logging",
        "os",
        "signal",
        "sys",
        "typing",
        "uuid",
        "pulsar",
        "project_scripts.event_templates.event_template_generator.EventTemplateGenerator",
        "project_scripts.event_templates.event_template_generator.main",
        "project_scripts.event_templates.event_template_generator.__init__",
        "project_scripts.event_templates.event_template_generator.shutdown",
        "project_scripts.event_templates.event_template_generator._send_response",
        "project_scripts.event_templates.event_template_generator._calculate_complexity",
        "project_scripts.event_templates.event_template_generator._save_template",
        "project_scripts.event_templates.event_template_generator.signal_handler"
      ],
      "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer": [
        "argparse",
        "asyncio",
        "collections",
        "datetime",
        "json",
        "logging",
        "os",
        "signal",
        "sys",
        "typing",
        "pulsar",
        "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer.EventRelationshipAnalyzer",
        "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer.main",
        "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer.__init__",
        "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer.shutdown",
        "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer._send_response",
        "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer._load_templates",
        "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer._discover_relationships",
        "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer._are_complementary",
        "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer._apply_discovered_relationships",
        "project_scripts.tools.event_relationship_analyzer.event_relationship_analyzer.signal_handler"
      ]
    }
  }
}